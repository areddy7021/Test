/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.preferences;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class audit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1301499157016536160L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"audit\",\"namespace\":\"com.optum.exts.individual.preference.selection.model\",\"fields\":[{\"name\":\"createUserIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The Id of who or what performed the object creation. This can be a person or process.\",\"default\":null},{\"name\":\"createDatetime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"Date and time when the object was created.\",\"default\":null},{\"name\":\"updateUserIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The Id of who or what performed the object update. This can be a person or process.\",\"default\":null},{\"name\":\"updateDatetime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"Date and time when the object was updated.\",\"default\":null},{\"name\":\"sourceSystemCreateUserIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The Id of who or what performed the object creation on the source system. This can be a person or process.\",\"default\":null},{\"name\":\"sourceSystemCreateDatetime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"The date and time the object was created on the source system.\",\"default\":null},{\"name\":\"sourceSystemUpdateUserIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The Id of who or what performed the object update on the source system. This can be a person or process.\",\"default\":null},{\"name\":\"sourceSystemUpdateDatetime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"The date and time the object was updated on the source system.\",\"default\":null},{\"name\":\"recordStatusCode\",\"type\":[\"null\",\"string\"],\"doc\":\"A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<audit> ENCODER =
      new BinaryMessageEncoder<audit>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<audit> DECODER =
      new BinaryMessageDecoder<audit>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<audit> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<audit> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<audit>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this audit to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a audit from a ByteBuffer. */
  public static audit fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The Id of who or what performed the object creation. This can be a person or process. */
  @Deprecated public CharSequence createUserIdentifier;
  /** Date and time when the object was created. */
  @Deprecated public Long createDatetime;
  /** The Id of who or what performed the object update. This can be a person or process. */
  @Deprecated public CharSequence updateUserIdentifier;
  /** Date and time when the object was updated. */
  @Deprecated public Long updateDatetime;
  /** The Id of who or what performed the object creation on the source system. This can be a person or process. */
  @Deprecated public CharSequence sourceSystemCreateUserIdentifier;
  /** The date and time the object was created on the source system. */
  @Deprecated public Long sourceSystemCreateDatetime;
  /** The Id of who or what performed the object update on the source system. This can be a person or process. */
  @Deprecated public CharSequence sourceSystemUpdateUserIdentifier;
  /** The date and time the object was updated on the source system. */
  @Deprecated public Long sourceSystemUpdateDatetime;
  /** A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete */
  @Deprecated public CharSequence recordStatusCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public audit() {}

  /**
   * All-args constructor.
   * @param createUserIdentifier The Id of who or what performed the object creation. This can be a person or process.
   * @param createDatetime Date and time when the object was created.
   * @param updateUserIdentifier The Id of who or what performed the object update. This can be a person or process.
   * @param updateDatetime Date and time when the object was updated.
   * @param sourceSystemCreateUserIdentifier The Id of who or what performed the object creation on the source system. This can be a person or process.
   * @param sourceSystemCreateDatetime The date and time the object was created on the source system.
   * @param sourceSystemUpdateUserIdentifier The Id of who or what performed the object update on the source system. This can be a person or process.
   * @param sourceSystemUpdateDatetime The date and time the object was updated on the source system.
   * @param recordStatusCode A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
   */
  public audit(CharSequence createUserIdentifier, Long createDatetime, CharSequence updateUserIdentifier, Long updateDatetime, CharSequence sourceSystemCreateUserIdentifier, Long sourceSystemCreateDatetime, CharSequence sourceSystemUpdateUserIdentifier, Long sourceSystemUpdateDatetime, CharSequence recordStatusCode) {
    this.createUserIdentifier = createUserIdentifier;
    this.createDatetime = createDatetime;
    this.updateUserIdentifier = updateUserIdentifier;
    this.updateDatetime = updateDatetime;
    this.sourceSystemCreateUserIdentifier = sourceSystemCreateUserIdentifier;
    this.sourceSystemCreateDatetime = sourceSystemCreateDatetime;
    this.sourceSystemUpdateUserIdentifier = sourceSystemUpdateUserIdentifier;
    this.sourceSystemUpdateDatetime = sourceSystemUpdateDatetime;
    this.recordStatusCode = recordStatusCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return createUserIdentifier;
    case 1: return createDatetime;
    case 2: return updateUserIdentifier;
    case 3: return updateDatetime;
    case 4: return sourceSystemCreateUserIdentifier;
    case 5: return sourceSystemCreateDatetime;
    case 6: return sourceSystemUpdateUserIdentifier;
    case 7: return sourceSystemUpdateDatetime;
    case 8: return recordStatusCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: createUserIdentifier = (CharSequence)value$; break;
    case 1: createDatetime = (Long)value$; break;
    case 2: updateUserIdentifier = (CharSequence)value$; break;
    case 3: updateDatetime = (Long)value$; break;
    case 4: sourceSystemCreateUserIdentifier = (CharSequence)value$; break;
    case 5: sourceSystemCreateDatetime = (Long)value$; break;
    case 6: sourceSystemUpdateUserIdentifier = (CharSequence)value$; break;
    case 7: sourceSystemUpdateDatetime = (Long)value$; break;
    case 8: recordStatusCode = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'createUserIdentifier' field.
   * @return The Id of who or what performed the object creation. This can be a person or process.
   */
  public CharSequence getCreateUserIdentifier() {
    return createUserIdentifier;
  }

  /**
   * Sets the value of the 'createUserIdentifier' field.
   * The Id of who or what performed the object creation. This can be a person or process.
   * @param value the value to set.
   */
  public void setCreateUserIdentifier(CharSequence value) {
    this.createUserIdentifier = value;
  }

  /**
   * Gets the value of the 'createDatetime' field.
   * @return Date and time when the object was created.
   */
  public Long getCreateDatetime() {
    return createDatetime;
  }

  /**
   * Sets the value of the 'createDatetime' field.
   * Date and time when the object was created.
   * @param value the value to set.
   */
  public void setCreateDatetime(Long value) {
    this.createDatetime = value;
  }

  /**
   * Gets the value of the 'updateUserIdentifier' field.
   * @return The Id of who or what performed the object update. This can be a person or process.
   */
  public CharSequence getUpdateUserIdentifier() {
    return updateUserIdentifier;
  }

  /**
   * Sets the value of the 'updateUserIdentifier' field.
   * The Id of who or what performed the object update. This can be a person or process.
   * @param value the value to set.
   */
  public void setUpdateUserIdentifier(CharSequence value) {
    this.updateUserIdentifier = value;
  }

  /**
   * Gets the value of the 'updateDatetime' field.
   * @return Date and time when the object was updated.
   */
  public Long getUpdateDatetime() {
    return updateDatetime;
  }

  /**
   * Sets the value of the 'updateDatetime' field.
   * Date and time when the object was updated.
   * @param value the value to set.
   */
  public void setUpdateDatetime(Long value) {
    this.updateDatetime = value;
  }

  /**
   * Gets the value of the 'sourceSystemCreateUserIdentifier' field.
   * @return The Id of who or what performed the object creation on the source system. This can be a person or process.
   */
  public CharSequence getSourceSystemCreateUserIdentifier() {
    return sourceSystemCreateUserIdentifier;
  }

  /**
   * Sets the value of the 'sourceSystemCreateUserIdentifier' field.
   * The Id of who or what performed the object creation on the source system. This can be a person or process.
   * @param value the value to set.
   */
  public void setSourceSystemCreateUserIdentifier(CharSequence value) {
    this.sourceSystemCreateUserIdentifier = value;
  }

  /**
   * Gets the value of the 'sourceSystemCreateDatetime' field.
   * @return The date and time the object was created on the source system.
   */
  public Long getSourceSystemCreateDatetime() {
    return sourceSystemCreateDatetime;
  }

  /**
   * Sets the value of the 'sourceSystemCreateDatetime' field.
   * The date and time the object was created on the source system.
   * @param value the value to set.
   */
  public void setSourceSystemCreateDatetime(Long value) {
    this.sourceSystemCreateDatetime = value;
  }

  /**
   * Gets the value of the 'sourceSystemUpdateUserIdentifier' field.
   * @return The Id of who or what performed the object update on the source system. This can be a person or process.
   */
  public CharSequence getSourceSystemUpdateUserIdentifier() {
    return sourceSystemUpdateUserIdentifier;
  }

  /**
   * Sets the value of the 'sourceSystemUpdateUserIdentifier' field.
   * The Id of who or what performed the object update on the source system. This can be a person or process.
   * @param value the value to set.
   */
  public void setSourceSystemUpdateUserIdentifier(CharSequence value) {
    this.sourceSystemUpdateUserIdentifier = value;
  }

  /**
   * Gets the value of the 'sourceSystemUpdateDatetime' field.
   * @return The date and time the object was updated on the source system.
   */
  public Long getSourceSystemUpdateDatetime() {
    return sourceSystemUpdateDatetime;
  }

  /**
   * Sets the value of the 'sourceSystemUpdateDatetime' field.
   * The date and time the object was updated on the source system.
   * @param value the value to set.
   */
  public void setSourceSystemUpdateDatetime(Long value) {
    this.sourceSystemUpdateDatetime = value;
  }

  /**
   * Gets the value of the 'recordStatusCode' field.
   * @return A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
   */
  public CharSequence getRecordStatusCode() {
    return recordStatusCode;
  }

  /**
   * Sets the value of the 'recordStatusCode' field.
   * A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
   * @param value the value to set.
   */
  public void setRecordStatusCode(CharSequence value) {
    this.recordStatusCode = value;
  }

  /**
   * Creates a new audit RecordBuilder.
   * @return A new audit RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new audit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new audit RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new audit RecordBuilder by copying an existing audit instance.
   * @param other The existing instance to copy.
   * @return A new audit RecordBuilder
   */
  public static Builder newBuilder(audit other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for audit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<audit>
    implements org.apache.avro.data.RecordBuilder<audit> {

    /** The Id of who or what performed the object creation. This can be a person or process. */
    private CharSequence createUserIdentifier;
    /** Date and time when the object was created. */
    private Long createDatetime;
    /** The Id of who or what performed the object update. This can be a person or process. */
    private CharSequence updateUserIdentifier;
    /** Date and time when the object was updated. */
    private Long updateDatetime;
    /** The Id of who or what performed the object creation on the source system. This can be a person or process. */
    private CharSequence sourceSystemCreateUserIdentifier;
    /** The date and time the object was created on the source system. */
    private Long sourceSystemCreateDatetime;
    /** The Id of who or what performed the object update on the source system. This can be a person or process. */
    private CharSequence sourceSystemUpdateUserIdentifier;
    /** The date and time the object was updated on the source system. */
    private Long sourceSystemUpdateDatetime;
    /** A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete */
    private CharSequence recordStatusCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.createUserIdentifier)) {
        this.createUserIdentifier = data().deepCopy(fields()[0].schema(), other.createUserIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createDatetime)) {
        this.createDatetime = data().deepCopy(fields()[1].schema(), other.createDatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.updateUserIdentifier)) {
        this.updateUserIdentifier = data().deepCopy(fields()[2].schema(), other.updateUserIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.updateDatetime)) {
        this.updateDatetime = data().deepCopy(fields()[3].schema(), other.updateDatetime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sourceSystemCreateUserIdentifier)) {
        this.sourceSystemCreateUserIdentifier = data().deepCopy(fields()[4].schema(), other.sourceSystemCreateUserIdentifier);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sourceSystemCreateDatetime)) {
        this.sourceSystemCreateDatetime = data().deepCopy(fields()[5].schema(), other.sourceSystemCreateDatetime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sourceSystemUpdateUserIdentifier)) {
        this.sourceSystemUpdateUserIdentifier = data().deepCopy(fields()[6].schema(), other.sourceSystemUpdateUserIdentifier);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceSystemUpdateDatetime)) {
        this.sourceSystemUpdateDatetime = data().deepCopy(fields()[7].schema(), other.sourceSystemUpdateDatetime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recordStatusCode)) {
        this.recordStatusCode = data().deepCopy(fields()[8].schema(), other.recordStatusCode);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing audit instance
     * @param other The existing instance to copy.
     */
    private Builder(audit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.createUserIdentifier)) {
        this.createUserIdentifier = data().deepCopy(fields()[0].schema(), other.createUserIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createDatetime)) {
        this.createDatetime = data().deepCopy(fields()[1].schema(), other.createDatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.updateUserIdentifier)) {
        this.updateUserIdentifier = data().deepCopy(fields()[2].schema(), other.updateUserIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.updateDatetime)) {
        this.updateDatetime = data().deepCopy(fields()[3].schema(), other.updateDatetime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sourceSystemCreateUserIdentifier)) {
        this.sourceSystemCreateUserIdentifier = data().deepCopy(fields()[4].schema(), other.sourceSystemCreateUserIdentifier);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sourceSystemCreateDatetime)) {
        this.sourceSystemCreateDatetime = data().deepCopy(fields()[5].schema(), other.sourceSystemCreateDatetime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sourceSystemUpdateUserIdentifier)) {
        this.sourceSystemUpdateUserIdentifier = data().deepCopy(fields()[6].schema(), other.sourceSystemUpdateUserIdentifier);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceSystemUpdateDatetime)) {
        this.sourceSystemUpdateDatetime = data().deepCopy(fields()[7].schema(), other.sourceSystemUpdateDatetime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recordStatusCode)) {
        this.recordStatusCode = data().deepCopy(fields()[8].schema(), other.recordStatusCode);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'createUserIdentifier' field.
      * The Id of who or what performed the object creation. This can be a person or process.
      * @return The value.
      */
    public CharSequence getCreateUserIdentifier() {
      return createUserIdentifier;
    }

    /**
      * Sets the value of the 'createUserIdentifier' field.
      * The Id of who or what performed the object creation. This can be a person or process.
      * @param value The value of 'createUserIdentifier'.
      * @return This builder.
      */
    public Builder setCreateUserIdentifier(CharSequence value) {
      validate(fields()[0], value);
      this.createUserIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'createUserIdentifier' field has been set.
      * The Id of who or what performed the object creation. This can be a person or process.
      * @return True if the 'createUserIdentifier' field has been set, false otherwise.
      */
    public boolean hasCreateUserIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'createUserIdentifier' field.
      * The Id of who or what performed the object creation. This can be a person or process.
      * @return This builder.
      */
    public Builder clearCreateUserIdentifier() {
      createUserIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'createDatetime' field.
      * Date and time when the object was created.
      * @return The value.
      */
    public Long getCreateDatetime() {
      return createDatetime;
    }

    /**
      * Sets the value of the 'createDatetime' field.
      * Date and time when the object was created.
      * @param value The value of 'createDatetime'.
      * @return This builder.
      */
    public Builder setCreateDatetime(Long value) {
      validate(fields()[1], value);
      this.createDatetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'createDatetime' field has been set.
      * Date and time when the object was created.
      * @return True if the 'createDatetime' field has been set, false otherwise.
      */
    public boolean hasCreateDatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'createDatetime' field.
      * Date and time when the object was created.
      * @return This builder.
      */
    public Builder clearCreateDatetime() {
      createDatetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateUserIdentifier' field.
      * The Id of who or what performed the object update. This can be a person or process.
      * @return The value.
      */
    public CharSequence getUpdateUserIdentifier() {
      return updateUserIdentifier;
    }

    /**
      * Sets the value of the 'updateUserIdentifier' field.
      * The Id of who or what performed the object update. This can be a person or process.
      * @param value The value of 'updateUserIdentifier'.
      * @return This builder.
      */
    public Builder setUpdateUserIdentifier(CharSequence value) {
      validate(fields()[2], value);
      this.updateUserIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'updateUserIdentifier' field has been set.
      * The Id of who or what performed the object update. This can be a person or process.
      * @return True if the 'updateUserIdentifier' field has been set, false otherwise.
      */
    public boolean hasUpdateUserIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'updateUserIdentifier' field.
      * The Id of who or what performed the object update. This can be a person or process.
      * @return This builder.
      */
    public Builder clearUpdateUserIdentifier() {
      updateUserIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateDatetime' field.
      * Date and time when the object was updated.
      * @return The value.
      */
    public Long getUpdateDatetime() {
      return updateDatetime;
    }

    /**
      * Sets the value of the 'updateDatetime' field.
      * Date and time when the object was updated.
      * @param value The value of 'updateDatetime'.
      * @return This builder.
      */
    public Builder setUpdateDatetime(Long value) {
      validate(fields()[3], value);
      this.updateDatetime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'updateDatetime' field has been set.
      * Date and time when the object was updated.
      * @return True if the 'updateDatetime' field has been set, false otherwise.
      */
    public boolean hasUpdateDatetime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'updateDatetime' field.
      * Date and time when the object was updated.
      * @return This builder.
      */
    public Builder clearUpdateDatetime() {
      updateDatetime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemCreateUserIdentifier' field.
      * The Id of who or what performed the object creation on the source system. This can be a person or process.
      * @return The value.
      */
    public CharSequence getSourceSystemCreateUserIdentifier() {
      return sourceSystemCreateUserIdentifier;
    }

    /**
      * Sets the value of the 'sourceSystemCreateUserIdentifier' field.
      * The Id of who or what performed the object creation on the source system. This can be a person or process.
      * @param value The value of 'sourceSystemCreateUserIdentifier'.
      * @return This builder.
      */
    public Builder setSourceSystemCreateUserIdentifier(CharSequence value) {
      validate(fields()[4], value);
      this.sourceSystemCreateUserIdentifier = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemCreateUserIdentifier' field has been set.
      * The Id of who or what performed the object creation on the source system. This can be a person or process.
      * @return True if the 'sourceSystemCreateUserIdentifier' field has been set, false otherwise.
      */
    public boolean hasSourceSystemCreateUserIdentifier() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sourceSystemCreateUserIdentifier' field.
      * The Id of who or what performed the object creation on the source system. This can be a person or process.
      * @return This builder.
      */
    public Builder clearSourceSystemCreateUserIdentifier() {
      sourceSystemCreateUserIdentifier = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemCreateDatetime' field.
      * The date and time the object was created on the source system.
      * @return The value.
      */
    public Long getSourceSystemCreateDatetime() {
      return sourceSystemCreateDatetime;
    }

    /**
      * Sets the value of the 'sourceSystemCreateDatetime' field.
      * The date and time the object was created on the source system.
      * @param value The value of 'sourceSystemCreateDatetime'.
      * @return This builder.
      */
    public Builder setSourceSystemCreateDatetime(Long value) {
      validate(fields()[5], value);
      this.sourceSystemCreateDatetime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemCreateDatetime' field has been set.
      * The date and time the object was created on the source system.
      * @return True if the 'sourceSystemCreateDatetime' field has been set, false otherwise.
      */
    public boolean hasSourceSystemCreateDatetime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sourceSystemCreateDatetime' field.
      * The date and time the object was created on the source system.
      * @return This builder.
      */
    public Builder clearSourceSystemCreateDatetime() {
      sourceSystemCreateDatetime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemUpdateUserIdentifier' field.
      * The Id of who or what performed the object update on the source system. This can be a person or process.
      * @return The value.
      */
    public CharSequence getSourceSystemUpdateUserIdentifier() {
      return sourceSystemUpdateUserIdentifier;
    }

    /**
      * Sets the value of the 'sourceSystemUpdateUserIdentifier' field.
      * The Id of who or what performed the object update on the source system. This can be a person or process.
      * @param value The value of 'sourceSystemUpdateUserIdentifier'.
      * @return This builder.
      */
    public Builder setSourceSystemUpdateUserIdentifier(CharSequence value) {
      validate(fields()[6], value);
      this.sourceSystemUpdateUserIdentifier = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemUpdateUserIdentifier' field has been set.
      * The Id of who or what performed the object update on the source system. This can be a person or process.
      * @return True if the 'sourceSystemUpdateUserIdentifier' field has been set, false otherwise.
      */
    public boolean hasSourceSystemUpdateUserIdentifier() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sourceSystemUpdateUserIdentifier' field.
      * The Id of who or what performed the object update on the source system. This can be a person or process.
      * @return This builder.
      */
    public Builder clearSourceSystemUpdateUserIdentifier() {
      sourceSystemUpdateUserIdentifier = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemUpdateDatetime' field.
      * The date and time the object was updated on the source system.
      * @return The value.
      */
    public Long getSourceSystemUpdateDatetime() {
      return sourceSystemUpdateDatetime;
    }

    /**
      * Sets the value of the 'sourceSystemUpdateDatetime' field.
      * The date and time the object was updated on the source system.
      * @param value The value of 'sourceSystemUpdateDatetime'.
      * @return This builder.
      */
    public Builder setSourceSystemUpdateDatetime(Long value) {
      validate(fields()[7], value);
      this.sourceSystemUpdateDatetime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemUpdateDatetime' field has been set.
      * The date and time the object was updated on the source system.
      * @return True if the 'sourceSystemUpdateDatetime' field has been set, false otherwise.
      */
    public boolean hasSourceSystemUpdateDatetime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sourceSystemUpdateDatetime' field.
      * The date and time the object was updated on the source system.
      * @return This builder.
      */
    public Builder clearSourceSystemUpdateDatetime() {
      sourceSystemUpdateDatetime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordStatusCode' field.
      * A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
      * @return The value.
      */
    public CharSequence getRecordStatusCode() {
      return recordStatusCode;
    }

    /**
      * Sets the value of the 'recordStatusCode' field.
      * A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
      * @param value The value of 'recordStatusCode'.
      * @return This builder.
      */
    public Builder setRecordStatusCode(CharSequence value) {
      validate(fields()[8], value);
      this.recordStatusCode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'recordStatusCode' field has been set.
      * A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
      * @return True if the 'recordStatusCode' field has been set, false otherwise.
      */
    public boolean hasRecordStatusCode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'recordStatusCode' field.
      * A code indicating the status of the object. Examples: - Active - Inactive - SoftLogical Delete
      * @return This builder.
      */
    public Builder clearRecordStatusCode() {
      recordStatusCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public audit build() {
      try {
        audit record = new audit();
        record.createUserIdentifier = fieldSetFlags()[0] ? this.createUserIdentifier : (CharSequence) defaultValue(fields()[0]);
        record.createDatetime = fieldSetFlags()[1] ? this.createDatetime : (Long) defaultValue(fields()[1]);
        record.updateUserIdentifier = fieldSetFlags()[2] ? this.updateUserIdentifier : (CharSequence) defaultValue(fields()[2]);
        record.updateDatetime = fieldSetFlags()[3] ? this.updateDatetime : (Long) defaultValue(fields()[3]);
        record.sourceSystemCreateUserIdentifier = fieldSetFlags()[4] ? this.sourceSystemCreateUserIdentifier : (CharSequence) defaultValue(fields()[4]);
        record.sourceSystemCreateDatetime = fieldSetFlags()[5] ? this.sourceSystemCreateDatetime : (Long) defaultValue(fields()[5]);
        record.sourceSystemUpdateUserIdentifier = fieldSetFlags()[6] ? this.sourceSystemUpdateUserIdentifier : (CharSequence) defaultValue(fields()[6]);
        record.sourceSystemUpdateDatetime = fieldSetFlags()[7] ? this.sourceSystemUpdateDatetime : (Long) defaultValue(fields()[7]);
        record.recordStatusCode = fieldSetFlags()[8] ? this.recordStatusCode : (CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<audit>
    WRITER$ = (org.apache.avro.io.DatumWriter<audit>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<audit>
    READER$ = (org.apache.avro.io.DatumReader<audit>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
