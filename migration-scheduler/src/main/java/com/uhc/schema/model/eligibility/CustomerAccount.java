/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomerAccount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5322341193232975554L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerAccount\",\"namespace\":\"com.uhc.schema.model.eligibility\",\"fields\":[{\"name\":\"businessArrangement\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"carrierExternalEntityIdentifers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CarrierExternalEntityIdentifier\",\"namespace\":\"com.uhc.schema.model.eligibility.customeraccount\",\"fields\":[{\"name\":\"externalEntityIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The identifier for an entity.\",\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the carrier entity type.\",\"default\":null}]}}],\"default\":null},{\"name\":\"customerAccountIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"hsaAffirmationIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.\",\"default\":null},{\"name\":\"hsaElectronicSignatureIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.\",\"default\":null},{\"name\":\"hsaWetSignatureIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.\",\"default\":null},{\"name\":\"lineOfBusiness\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"The customer account line of business. E.g., EI, MR, CS, Global.\",\"default\":null},{\"name\":\"obligor\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"planCoverageIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.\",\"default\":null},{\"name\":\"policySuffixCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"purchasePlanCode\",\"type\":[\"null\",\"string\"],\"doc\":\"The plan code for this membership record.\",\"default\":null},{\"name\":\"purchasePlanIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.\",\"default\":null},{\"name\":\"sharedArrangement\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CustomerAccount> ENCODER =
      new BinaryMessageEncoder<CustomerAccount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CustomerAccount> DECODER =
      new BinaryMessageDecoder<CustomerAccount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CustomerAccount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CustomerAccount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CustomerAccount>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CustomerAccount to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CustomerAccount from a ByteBuffer. */
  public static CustomerAccount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType businessArrangement;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> carrierExternalEntityIdentifers;
  @Deprecated public java.lang.CharSequence customerAccountIdentifier;
  @Deprecated public java.lang.CharSequence description;
  /** Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf. */
  @Deprecated public java.lang.CharSequence hsaAffirmationIndicator;
  /** Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf. */
  @Deprecated public java.lang.CharSequence hsaElectronicSignatureIndicator;
  /** Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf. */
  @Deprecated public java.lang.CharSequence hsaWetSignatureIndicator;
  /** The customer account line of business. E.g., EI, MR, CS, Global. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType lineOfBusiness;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType obligor;
  /** The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical. */
  @Deprecated public java.lang.CharSequence planCoverageIdentifier;
  @Deprecated public java.lang.CharSequence policySuffixCode;
  /** The plan code for this membership record. */
  @Deprecated public java.lang.CharSequence purchasePlanCode;
  /** The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical. */
  @Deprecated public java.lang.CharSequence purchasePlanIdentifier;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType sharedArrangement;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerAccount() {}

  /**
   * All-args constructor.
   * @param businessArrangement The new value for businessArrangement
   * @param carrierExternalEntityIdentifers The new value for carrierExternalEntityIdentifers
   * @param customerAccountIdentifier The new value for customerAccountIdentifier
   * @param description The new value for description
   * @param hsaAffirmationIndicator Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
   * @param hsaElectronicSignatureIndicator Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
   * @param hsaWetSignatureIndicator Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
   * @param lineOfBusiness The customer account line of business. E.g., EI, MR, CS, Global.
   * @param obligor The new value for obligor
   * @param planCoverageIdentifier The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
   * @param policySuffixCode The new value for policySuffixCode
   * @param purchasePlanCode The plan code for this membership record.
   * @param purchasePlanIdentifier The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
   * @param sharedArrangement The new value for sharedArrangement
   */
  public CustomerAccount(com.uhc.schema.model.eligibility.common.DescriptionType businessArrangement, java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> carrierExternalEntityIdentifers, java.lang.CharSequence customerAccountIdentifier, java.lang.CharSequence description, java.lang.CharSequence hsaAffirmationIndicator, java.lang.CharSequence hsaElectronicSignatureIndicator, java.lang.CharSequence hsaWetSignatureIndicator, com.uhc.schema.model.eligibility.common.DescriptionType lineOfBusiness, com.uhc.schema.model.eligibility.common.DescriptionType obligor, java.lang.CharSequence planCoverageIdentifier, java.lang.CharSequence policySuffixCode, java.lang.CharSequence purchasePlanCode, java.lang.CharSequence purchasePlanIdentifier, com.uhc.schema.model.eligibility.common.DescriptionType sharedArrangement) {
    this.businessArrangement = businessArrangement;
    this.carrierExternalEntityIdentifers = carrierExternalEntityIdentifers;
    this.customerAccountIdentifier = customerAccountIdentifier;
    this.description = description;
    this.hsaAffirmationIndicator = hsaAffirmationIndicator;
    this.hsaElectronicSignatureIndicator = hsaElectronicSignatureIndicator;
    this.hsaWetSignatureIndicator = hsaWetSignatureIndicator;
    this.lineOfBusiness = lineOfBusiness;
    this.obligor = obligor;
    this.planCoverageIdentifier = planCoverageIdentifier;
    this.policySuffixCode = policySuffixCode;
    this.purchasePlanCode = purchasePlanCode;
    this.purchasePlanIdentifier = purchasePlanIdentifier;
    this.sharedArrangement = sharedArrangement;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return businessArrangement;
    case 1: return carrierExternalEntityIdentifers;
    case 2: return customerAccountIdentifier;
    case 3: return description;
    case 4: return hsaAffirmationIndicator;
    case 5: return hsaElectronicSignatureIndicator;
    case 6: return hsaWetSignatureIndicator;
    case 7: return lineOfBusiness;
    case 8: return obligor;
    case 9: return planCoverageIdentifier;
    case 10: return policySuffixCode;
    case 11: return purchasePlanCode;
    case 12: return purchasePlanIdentifier;
    case 13: return sharedArrangement;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: businessArrangement = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 1: carrierExternalEntityIdentifers = (java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier>)value$; break;
    case 2: customerAccountIdentifier = (java.lang.CharSequence)value$; break;
    case 3: description = (java.lang.CharSequence)value$; break;
    case 4: hsaAffirmationIndicator = (java.lang.CharSequence)value$; break;
    case 5: hsaElectronicSignatureIndicator = (java.lang.CharSequence)value$; break;
    case 6: hsaWetSignatureIndicator = (java.lang.CharSequence)value$; break;
    case 7: lineOfBusiness = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 8: obligor = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 9: planCoverageIdentifier = (java.lang.CharSequence)value$; break;
    case 10: policySuffixCode = (java.lang.CharSequence)value$; break;
    case 11: purchasePlanCode = (java.lang.CharSequence)value$; break;
    case 12: purchasePlanIdentifier = (java.lang.CharSequence)value$; break;
    case 13: sharedArrangement = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'businessArrangement' field.
   * @return The value of the 'businessArrangement' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getBusinessArrangement() {
    return businessArrangement;
  }

  /**
   * Sets the value of the 'businessArrangement' field.
   * @param value the value to set.
   */
  public void setBusinessArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.businessArrangement = value;
  }

  /**
   * Gets the value of the 'carrierExternalEntityIdentifers' field.
   * @return The value of the 'carrierExternalEntityIdentifers' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> getCarrierExternalEntityIdentifers() {
    return carrierExternalEntityIdentifers;
  }

  /**
   * Sets the value of the 'carrierExternalEntityIdentifers' field.
   * @param value the value to set.
   */
  public void setCarrierExternalEntityIdentifers(java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> value) {
    this.carrierExternalEntityIdentifers = value;
  }

  /**
   * Gets the value of the 'customerAccountIdentifier' field.
   * @return The value of the 'customerAccountIdentifier' field.
   */
  public java.lang.CharSequence getCustomerAccountIdentifier() {
    return customerAccountIdentifier;
  }

  /**
   * Sets the value of the 'customerAccountIdentifier' field.
   * @param value the value to set.
   */
  public void setCustomerAccountIdentifier(java.lang.CharSequence value) {
    this.customerAccountIdentifier = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'hsaAffirmationIndicator' field.
   * @return Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
   */
  public java.lang.CharSequence getHsaAffirmationIndicator() {
    return hsaAffirmationIndicator;
  }

  /**
   * Sets the value of the 'hsaAffirmationIndicator' field.
   * Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
   * @param value the value to set.
   */
  public void setHsaAffirmationIndicator(java.lang.CharSequence value) {
    this.hsaAffirmationIndicator = value;
  }

  /**
   * Gets the value of the 'hsaElectronicSignatureIndicator' field.
   * @return Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
   */
  public java.lang.CharSequence getHsaElectronicSignatureIndicator() {
    return hsaElectronicSignatureIndicator;
  }

  /**
   * Sets the value of the 'hsaElectronicSignatureIndicator' field.
   * Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
   * @param value the value to set.
   */
  public void setHsaElectronicSignatureIndicator(java.lang.CharSequence value) {
    this.hsaElectronicSignatureIndicator = value;
  }

  /**
   * Gets the value of the 'hsaWetSignatureIndicator' field.
   * @return Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
   */
  public java.lang.CharSequence getHsaWetSignatureIndicator() {
    return hsaWetSignatureIndicator;
  }

  /**
   * Sets the value of the 'hsaWetSignatureIndicator' field.
   * Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
   * @param value the value to set.
   */
  public void setHsaWetSignatureIndicator(java.lang.CharSequence value) {
    this.hsaWetSignatureIndicator = value;
  }

  /**
   * Gets the value of the 'lineOfBusiness' field.
   * @return The customer account line of business. E.g., EI, MR, CS, Global.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getLineOfBusiness() {
    return lineOfBusiness;
  }

  /**
   * Sets the value of the 'lineOfBusiness' field.
   * The customer account line of business. E.g., EI, MR, CS, Global.
   * @param value the value to set.
   */
  public void setLineOfBusiness(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.lineOfBusiness = value;
  }

  /**
   * Gets the value of the 'obligor' field.
   * @return The value of the 'obligor' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getObligor() {
    return obligor;
  }

  /**
   * Sets the value of the 'obligor' field.
   * @param value the value to set.
   */
  public void setObligor(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.obligor = value;
  }

  /**
   * Gets the value of the 'planCoverageIdentifier' field.
   * @return The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
   */
  public java.lang.CharSequence getPlanCoverageIdentifier() {
    return planCoverageIdentifier;
  }

  /**
   * Sets the value of the 'planCoverageIdentifier' field.
   * The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
   * @param value the value to set.
   */
  public void setPlanCoverageIdentifier(java.lang.CharSequence value) {
    this.planCoverageIdentifier = value;
  }

  /**
   * Gets the value of the 'policySuffixCode' field.
   * @return The value of the 'policySuffixCode' field.
   */
  public java.lang.CharSequence getPolicySuffixCode() {
    return policySuffixCode;
  }

  /**
   * Sets the value of the 'policySuffixCode' field.
   * @param value the value to set.
   */
  public void setPolicySuffixCode(java.lang.CharSequence value) {
    this.policySuffixCode = value;
  }

  /**
   * Gets the value of the 'purchasePlanCode' field.
   * @return The plan code for this membership record.
   */
  public java.lang.CharSequence getPurchasePlanCode() {
    return purchasePlanCode;
  }

  /**
   * Sets the value of the 'purchasePlanCode' field.
   * The plan code for this membership record.
   * @param value the value to set.
   */
  public void setPurchasePlanCode(java.lang.CharSequence value) {
    this.purchasePlanCode = value;
  }

  /**
   * Gets the value of the 'purchasePlanIdentifier' field.
   * @return The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
   */
  public java.lang.CharSequence getPurchasePlanIdentifier() {
    return purchasePlanIdentifier;
  }

  /**
   * Sets the value of the 'purchasePlanIdentifier' field.
   * The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
   * @param value the value to set.
   */
  public void setPurchasePlanIdentifier(java.lang.CharSequence value) {
    this.purchasePlanIdentifier = value;
  }

  /**
   * Gets the value of the 'sharedArrangement' field.
   * @return The value of the 'sharedArrangement' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getSharedArrangement() {
    return sharedArrangement;
  }

  /**
   * Sets the value of the 'sharedArrangement' field.
   * @param value the value to set.
   */
  public void setSharedArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.sharedArrangement = value;
  }

  /**
   * Creates a new CustomerAccount RecordBuilder.
   * @return A new CustomerAccount RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.CustomerAccount.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.CustomerAccount.Builder();
  }

  /**
   * Creates a new CustomerAccount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerAccount RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.CustomerAccount.Builder newBuilder(com.uhc.schema.model.eligibility.CustomerAccount.Builder other) {
    return new com.uhc.schema.model.eligibility.CustomerAccount.Builder(other);
  }

  /**
   * Creates a new CustomerAccount RecordBuilder by copying an existing CustomerAccount instance.
   * @param other The existing instance to copy.
   * @return A new CustomerAccount RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.CustomerAccount.Builder newBuilder(com.uhc.schema.model.eligibility.CustomerAccount other) {
    return new com.uhc.schema.model.eligibility.CustomerAccount.Builder(other);
  }

  /**
   * RecordBuilder for CustomerAccount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerAccount>
    implements org.apache.avro.data.RecordBuilder<CustomerAccount> {

    private com.uhc.schema.model.eligibility.common.DescriptionType businessArrangement;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder businessArrangementBuilder;
    private java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> carrierExternalEntityIdentifers;
    private java.lang.CharSequence customerAccountIdentifier;
    private java.lang.CharSequence description;
    /** Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf. */
    private java.lang.CharSequence hsaAffirmationIndicator;
    /** Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf. */
    private java.lang.CharSequence hsaElectronicSignatureIndicator;
    /** Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf. */
    private java.lang.CharSequence hsaWetSignatureIndicator;
    /** The customer account line of business. E.g., EI, MR, CS, Global. */
    private com.uhc.schema.model.eligibility.common.DescriptionType lineOfBusiness;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder lineOfBusinessBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType obligor;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder obligorBuilder;
    /** The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical. */
    private java.lang.CharSequence planCoverageIdentifier;
    private java.lang.CharSequence policySuffixCode;
    /** The plan code for this membership record. */
    private java.lang.CharSequence purchasePlanCode;
    /** The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical. */
    private java.lang.CharSequence purchasePlanIdentifier;
    private com.uhc.schema.model.eligibility.common.DescriptionType sharedArrangement;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder sharedArrangementBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.CustomerAccount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.businessArrangement)) {
        this.businessArrangement = data().deepCopy(fields()[0].schema(), other.businessArrangement);
        fieldSetFlags()[0] = true;
      }
      if (other.hasBusinessArrangementBuilder()) {
        this.businessArrangementBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getBusinessArrangementBuilder());
      }
      if (isValidValue(fields()[1], other.carrierExternalEntityIdentifers)) {
        this.carrierExternalEntityIdentifers = data().deepCopy(fields()[1].schema(), other.carrierExternalEntityIdentifers);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerAccountIdentifier)) {
        this.customerAccountIdentifier = data().deepCopy(fields()[2].schema(), other.customerAccountIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hsaAffirmationIndicator)) {
        this.hsaAffirmationIndicator = data().deepCopy(fields()[4].schema(), other.hsaAffirmationIndicator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hsaElectronicSignatureIndicator)) {
        this.hsaElectronicSignatureIndicator = data().deepCopy(fields()[5].schema(), other.hsaElectronicSignatureIndicator);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hsaWetSignatureIndicator)) {
        this.hsaWetSignatureIndicator = data().deepCopy(fields()[6].schema(), other.hsaWetSignatureIndicator);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lineOfBusiness)) {
        this.lineOfBusiness = data().deepCopy(fields()[7].schema(), other.lineOfBusiness);
        fieldSetFlags()[7] = true;
      }
      if (other.hasLineOfBusinessBuilder()) {
        this.lineOfBusinessBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getLineOfBusinessBuilder());
      }
      if (isValidValue(fields()[8], other.obligor)) {
        this.obligor = data().deepCopy(fields()[8].schema(), other.obligor);
        fieldSetFlags()[8] = true;
      }
      if (other.hasObligorBuilder()) {
        this.obligorBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getObligorBuilder());
      }
      if (isValidValue(fields()[9], other.planCoverageIdentifier)) {
        this.planCoverageIdentifier = data().deepCopy(fields()[9].schema(), other.planCoverageIdentifier);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.policySuffixCode)) {
        this.policySuffixCode = data().deepCopy(fields()[10].schema(), other.policySuffixCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.purchasePlanCode)) {
        this.purchasePlanCode = data().deepCopy(fields()[11].schema(), other.purchasePlanCode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.purchasePlanIdentifier)) {
        this.purchasePlanIdentifier = data().deepCopy(fields()[12].schema(), other.purchasePlanIdentifier);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sharedArrangement)) {
        this.sharedArrangement = data().deepCopy(fields()[13].schema(), other.sharedArrangement);
        fieldSetFlags()[13] = true;
      }
      if (other.hasSharedArrangementBuilder()) {
        this.sharedArrangementBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getSharedArrangementBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerAccount instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.CustomerAccount other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.businessArrangement)) {
        this.businessArrangement = data().deepCopy(fields()[0].schema(), other.businessArrangement);
        fieldSetFlags()[0] = true;
      }
      this.businessArrangementBuilder = null;
      if (isValidValue(fields()[1], other.carrierExternalEntityIdentifers)) {
        this.carrierExternalEntityIdentifers = data().deepCopy(fields()[1].schema(), other.carrierExternalEntityIdentifers);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerAccountIdentifier)) {
        this.customerAccountIdentifier = data().deepCopy(fields()[2].schema(), other.customerAccountIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hsaAffirmationIndicator)) {
        this.hsaAffirmationIndicator = data().deepCopy(fields()[4].schema(), other.hsaAffirmationIndicator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hsaElectronicSignatureIndicator)) {
        this.hsaElectronicSignatureIndicator = data().deepCopy(fields()[5].schema(), other.hsaElectronicSignatureIndicator);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hsaWetSignatureIndicator)) {
        this.hsaWetSignatureIndicator = data().deepCopy(fields()[6].schema(), other.hsaWetSignatureIndicator);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lineOfBusiness)) {
        this.lineOfBusiness = data().deepCopy(fields()[7].schema(), other.lineOfBusiness);
        fieldSetFlags()[7] = true;
      }
      this.lineOfBusinessBuilder = null;
      if (isValidValue(fields()[8], other.obligor)) {
        this.obligor = data().deepCopy(fields()[8].schema(), other.obligor);
        fieldSetFlags()[8] = true;
      }
      this.obligorBuilder = null;
      if (isValidValue(fields()[9], other.planCoverageIdentifier)) {
        this.planCoverageIdentifier = data().deepCopy(fields()[9].schema(), other.planCoverageIdentifier);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.policySuffixCode)) {
        this.policySuffixCode = data().deepCopy(fields()[10].schema(), other.policySuffixCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.purchasePlanCode)) {
        this.purchasePlanCode = data().deepCopy(fields()[11].schema(), other.purchasePlanCode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.purchasePlanIdentifier)) {
        this.purchasePlanIdentifier = data().deepCopy(fields()[12].schema(), other.purchasePlanIdentifier);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sharedArrangement)) {
        this.sharedArrangement = data().deepCopy(fields()[13].schema(), other.sharedArrangement);
        fieldSetFlags()[13] = true;
      }
      this.sharedArrangementBuilder = null;
    }

    /**
      * Gets the value of the 'businessArrangement' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getBusinessArrangement() {
      return businessArrangement;
    }

    /**
      * Sets the value of the 'businessArrangement' field.
      * @param value The value of 'businessArrangement'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setBusinessArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[0], value);
      this.businessArrangementBuilder = null;
      this.businessArrangement = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'businessArrangement' field has been set.
      * @return True if the 'businessArrangement' field has been set, false otherwise.
      */
    public boolean hasBusinessArrangement() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'businessArrangement' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getBusinessArrangementBuilder() {
      if (businessArrangementBuilder == null) {
        if (hasBusinessArrangement()) {
          setBusinessArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(businessArrangement));
        } else {
          setBusinessArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return businessArrangementBuilder;
    }

    /**
     * Sets the Builder instance for the 'businessArrangement' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setBusinessArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearBusinessArrangement();
      businessArrangementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'businessArrangement' field has an active Builder instance
     * @return True if the 'businessArrangement' field has an active Builder instance
     */
    public boolean hasBusinessArrangementBuilder() {
      return businessArrangementBuilder != null;
    }

    /**
      * Clears the value of the 'businessArrangement' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearBusinessArrangement() {
      businessArrangement = null;
      businessArrangementBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'carrierExternalEntityIdentifers' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> getCarrierExternalEntityIdentifers() {
      return carrierExternalEntityIdentifers;
    }

    /**
      * Sets the value of the 'carrierExternalEntityIdentifers' field.
      * @param value The value of 'carrierExternalEntityIdentifers'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setCarrierExternalEntityIdentifers(java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier> value) {
      validate(fields()[1], value);
      this.carrierExternalEntityIdentifers = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'carrierExternalEntityIdentifers' field has been set.
      * @return True if the 'carrierExternalEntityIdentifers' field has been set, false otherwise.
      */
    public boolean hasCarrierExternalEntityIdentifers() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'carrierExternalEntityIdentifers' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearCarrierExternalEntityIdentifers() {
      carrierExternalEntityIdentifers = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerAccountIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerAccountIdentifier() {
      return customerAccountIdentifier;
    }

    /**
      * Sets the value of the 'customerAccountIdentifier' field.
      * @param value The value of 'customerAccountIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setCustomerAccountIdentifier(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customerAccountIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerAccountIdentifier' field has been set.
      * @return True if the 'customerAccountIdentifier' field has been set, false otherwise.
      */
    public boolean hasCustomerAccountIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerAccountIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearCustomerAccountIdentifier() {
      customerAccountIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.description = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearDescription() {
      description = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsaAffirmationIndicator' field.
      * Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
      * @return The value.
      */
    public java.lang.CharSequence getHsaAffirmationIndicator() {
      return hsaAffirmationIndicator;
    }

    /**
      * Sets the value of the 'hsaAffirmationIndicator' field.
      * Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
      * @param value The value of 'hsaAffirmationIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setHsaAffirmationIndicator(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.hsaAffirmationIndicator = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hsaAffirmationIndicator' field has been set.
      * Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
      * @return True if the 'hsaAffirmationIndicator' field has been set, false otherwise.
      */
    public boolean hasHsaAffirmationIndicator() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hsaAffirmationIndicator' field.
      * Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearHsaAffirmationIndicator() {
      hsaAffirmationIndicator = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsaElectronicSignatureIndicator' field.
      * Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
      * @return The value.
      */
    public java.lang.CharSequence getHsaElectronicSignatureIndicator() {
      return hsaElectronicSignatureIndicator;
    }

    /**
      * Sets the value of the 'hsaElectronicSignatureIndicator' field.
      * Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
      * @param value The value of 'hsaElectronicSignatureIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setHsaElectronicSignatureIndicator(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.hsaElectronicSignatureIndicator = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hsaElectronicSignatureIndicator' field has been set.
      * Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
      * @return True if the 'hsaElectronicSignatureIndicator' field has been set, false otherwise.
      */
    public boolean hasHsaElectronicSignatureIndicator() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hsaElectronicSignatureIndicator' field.
      * Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearHsaElectronicSignatureIndicator() {
      hsaElectronicSignatureIndicator = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsaWetSignatureIndicator' field.
      * Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
      * @return The value.
      */
    public java.lang.CharSequence getHsaWetSignatureIndicator() {
      return hsaWetSignatureIndicator;
    }

    /**
      * Sets the value of the 'hsaWetSignatureIndicator' field.
      * Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
      * @param value The value of 'hsaWetSignatureIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setHsaWetSignatureIndicator(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.hsaWetSignatureIndicator = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hsaWetSignatureIndicator' field has been set.
      * Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
      * @return True if the 'hsaWetSignatureIndicator' field has been set, false otherwise.
      */
    public boolean hasHsaWetSignatureIndicator() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hsaWetSignatureIndicator' field.
      * Used only if an employer is authorized by Exante Bank to capture a wet (physical) signature on its behalf.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearHsaWetSignatureIndicator() {
      hsaWetSignatureIndicator = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineOfBusiness' field.
      * The customer account line of business. E.g., EI, MR, CS, Global.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getLineOfBusiness() {
      return lineOfBusiness;
    }

    /**
      * Sets the value of the 'lineOfBusiness' field.
      * The customer account line of business. E.g., EI, MR, CS, Global.
      * @param value The value of 'lineOfBusiness'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setLineOfBusiness(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[7], value);
      this.lineOfBusinessBuilder = null;
      this.lineOfBusiness = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lineOfBusiness' field has been set.
      * The customer account line of business. E.g., EI, MR, CS, Global.
      * @return True if the 'lineOfBusiness' field has been set, false otherwise.
      */
    public boolean hasLineOfBusiness() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'lineOfBusiness' field and creates one if it doesn't exist yet.
     * The customer account line of business. E.g., EI, MR, CS, Global.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getLineOfBusinessBuilder() {
      if (lineOfBusinessBuilder == null) {
        if (hasLineOfBusiness()) {
          setLineOfBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(lineOfBusiness));
        } else {
          setLineOfBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return lineOfBusinessBuilder;
    }

    /**
     * Sets the Builder instance for the 'lineOfBusiness' field
     * The customer account line of business. E.g., EI, MR, CS, Global.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setLineOfBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearLineOfBusiness();
      lineOfBusinessBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lineOfBusiness' field has an active Builder instance
     * The customer account line of business. E.g., EI, MR, CS, Global.
     * @return True if the 'lineOfBusiness' field has an active Builder instance
     */
    public boolean hasLineOfBusinessBuilder() {
      return lineOfBusinessBuilder != null;
    }

    /**
      * Clears the value of the 'lineOfBusiness' field.
      * The customer account line of business. E.g., EI, MR, CS, Global.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearLineOfBusiness() {
      lineOfBusiness = null;
      lineOfBusinessBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'obligor' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getObligor() {
      return obligor;
    }

    /**
      * Sets the value of the 'obligor' field.
      * @param value The value of 'obligor'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setObligor(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[8], value);
      this.obligorBuilder = null;
      this.obligor = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'obligor' field has been set.
      * @return True if the 'obligor' field has been set, false otherwise.
      */
    public boolean hasObligor() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'obligor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getObligorBuilder() {
      if (obligorBuilder == null) {
        if (hasObligor()) {
          setObligorBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(obligor));
        } else {
          setObligorBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return obligorBuilder;
    }

    /**
     * Sets the Builder instance for the 'obligor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setObligorBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearObligor();
      obligorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'obligor' field has an active Builder instance
     * @return True if the 'obligor' field has an active Builder instance
     */
    public boolean hasObligorBuilder() {
      return obligorBuilder != null;
    }

    /**
      * Clears the value of the 'obligor' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearObligor() {
      obligor = null;
      obligorBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCoverageIdentifier' field.
      * The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
      * @return The value.
      */
    public java.lang.CharSequence getPlanCoverageIdentifier() {
      return planCoverageIdentifier;
    }

    /**
      * Sets the value of the 'planCoverageIdentifier' field.
      * The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
      * @param value The value of 'planCoverageIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setPlanCoverageIdentifier(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.planCoverageIdentifier = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'planCoverageIdentifier' field has been set.
      * The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
      * @return True if the 'planCoverageIdentifier' field has been set, false otherwise.
      */
    public boolean hasPlanCoverageIdentifier() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'planCoverageIdentifier' field.
      * The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearPlanCoverageIdentifier() {
      planCoverageIdentifier = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'policySuffixCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPolicySuffixCode() {
      return policySuffixCode;
    }

    /**
      * Sets the value of the 'policySuffixCode' field.
      * @param value The value of 'policySuffixCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setPolicySuffixCode(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.policySuffixCode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'policySuffixCode' field has been set.
      * @return True if the 'policySuffixCode' field has been set, false otherwise.
      */
    public boolean hasPolicySuffixCode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'policySuffixCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearPolicySuffixCode() {
      policySuffixCode = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchasePlanCode' field.
      * The plan code for this membership record.
      * @return The value.
      */
    public java.lang.CharSequence getPurchasePlanCode() {
      return purchasePlanCode;
    }

    /**
      * Sets the value of the 'purchasePlanCode' field.
      * The plan code for this membership record.
      * @param value The value of 'purchasePlanCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setPurchasePlanCode(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.purchasePlanCode = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'purchasePlanCode' field has been set.
      * The plan code for this membership record.
      * @return True if the 'purchasePlanCode' field has been set, false otherwise.
      */
    public boolean hasPurchasePlanCode() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'purchasePlanCode' field.
      * The plan code for this membership record.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearPurchasePlanCode() {
      purchasePlanCode = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchasePlanIdentifier' field.
      * The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
      * @return The value.
      */
    public java.lang.CharSequence getPurchasePlanIdentifier() {
      return purchasePlanIdentifier;
    }

    /**
      * Sets the value of the 'purchasePlanIdentifier' field.
      * The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
      * @param value The value of 'purchasePlanIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setPurchasePlanIdentifier(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.purchasePlanIdentifier = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'purchasePlanIdentifier' field has been set.
      * The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
      * @return True if the 'purchasePlanIdentifier' field has been set, false otherwise.
      */
    public boolean hasPurchasePlanIdentifier() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'purchasePlanIdentifier' field.
      * The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearPurchasePlanIdentifier() {
      purchasePlanIdentifier = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'sharedArrangement' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getSharedArrangement() {
      return sharedArrangement;
    }

    /**
      * Sets the value of the 'sharedArrangement' field.
      * @param value The value of 'sharedArrangement'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setSharedArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[13], value);
      this.sharedArrangementBuilder = null;
      this.sharedArrangement = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'sharedArrangement' field has been set.
      * @return True if the 'sharedArrangement' field has been set, false otherwise.
      */
    public boolean hasSharedArrangement() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'sharedArrangement' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getSharedArrangementBuilder() {
      if (sharedArrangementBuilder == null) {
        if (hasSharedArrangement()) {
          setSharedArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(sharedArrangement));
        } else {
          setSharedArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return sharedArrangementBuilder;
    }

    /**
     * Sets the Builder instance for the 'sharedArrangement' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder setSharedArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearSharedArrangement();
      sharedArrangementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sharedArrangement' field has an active Builder instance
     * @return True if the 'sharedArrangement' field has an active Builder instance
     */
    public boolean hasSharedArrangementBuilder() {
      return sharedArrangementBuilder != null;
    }

    /**
      * Clears the value of the 'sharedArrangement' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder clearSharedArrangement() {
      sharedArrangement = null;
      sharedArrangementBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CustomerAccount build() {
      try {
        CustomerAccount record = new CustomerAccount();
        if (businessArrangementBuilder != null) {
          record.businessArrangement = this.businessArrangementBuilder.build();
        } else {
          record.businessArrangement = fieldSetFlags()[0] ? this.businessArrangement : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[0]);
        }
        record.carrierExternalEntityIdentifers = fieldSetFlags()[1] ? this.carrierExternalEntityIdentifers : (java.util.List<com.uhc.schema.model.eligibility.customeraccount.CarrierExternalEntityIdentifier>) defaultValue(fields()[1]);
        record.customerAccountIdentifier = fieldSetFlags()[2] ? this.customerAccountIdentifier : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.description = fieldSetFlags()[3] ? this.description : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.hsaAffirmationIndicator = fieldSetFlags()[4] ? this.hsaAffirmationIndicator : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.hsaElectronicSignatureIndicator = fieldSetFlags()[5] ? this.hsaElectronicSignatureIndicator : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.hsaWetSignatureIndicator = fieldSetFlags()[6] ? this.hsaWetSignatureIndicator : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (lineOfBusinessBuilder != null) {
          record.lineOfBusiness = this.lineOfBusinessBuilder.build();
        } else {
          record.lineOfBusiness = fieldSetFlags()[7] ? this.lineOfBusiness : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[7]);
        }
        if (obligorBuilder != null) {
          record.obligor = this.obligorBuilder.build();
        } else {
          record.obligor = fieldSetFlags()[8] ? this.obligor : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[8]);
        }
        record.planCoverageIdentifier = fieldSetFlags()[9] ? this.planCoverageIdentifier : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.policySuffixCode = fieldSetFlags()[10] ? this.policySuffixCode : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.purchasePlanCode = fieldSetFlags()[11] ? this.purchasePlanCode : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.purchasePlanIdentifier = fieldSetFlags()[12] ? this.purchasePlanIdentifier : (java.lang.CharSequence) defaultValue(fields()[12]);
        if (sharedArrangementBuilder != null) {
          record.sharedArrangement = this.sharedArrangementBuilder.build();
        } else {
          record.sharedArrangement = fieldSetFlags()[13] ? this.sharedArrangement : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[13]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CustomerAccount>
    WRITER$ = (org.apache.avro.io.DatumWriter<CustomerAccount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CustomerAccount>
    READER$ = (org.apache.avro.io.DatumReader<CustomerAccount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
