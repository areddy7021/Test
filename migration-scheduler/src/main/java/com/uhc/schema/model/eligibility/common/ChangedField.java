/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.common;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ChangedField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7924440162179816202L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChangedField\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"deletedArrayElements\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ElementKey\",\"doc\":\"A record describing the primary key of a given array element.\",\"fields\":[{\"name\":\"path\",\"type\":\"string\",\"doc\":\"The (relative) dot-notated path to a primary key field for this array element. e.g. membershipDetail.identifier\",\"default\":\"\"},{\"name\":\"value\",\"type\":\"string\",\"doc\":\"The value for this primary key field.\",\"default\":\"\"}]}}],\"default\":null},{\"name\":\"operationType\",\"type\":\"string\",\"doc\":\"The type of change that occured for this field. One of [ \\\"create\\\", \\\"update\\\", \\\"delete\\\" ]. A \\\"delete\\\" with \\\"deletedArrayElements\\\" indicates the field is an array and an array element was removed.\",\"default\":\"\"},{\"name\":\"path\",\"type\":\"string\",\"doc\":\"The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChangedField> ENCODER =
      new BinaryMessageEncoder<ChangedField>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChangedField> DECODER =
      new BinaryMessageDecoder<ChangedField>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ChangedField> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ChangedField> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ChangedField>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ChangedField to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ChangedField from a ByteBuffer. */
  public static ChangedField fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> deletedArrayElements;
  /** The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed. */
  @Deprecated public java.lang.CharSequence operationType;
  /** The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[] */
  @Deprecated public java.lang.CharSequence path;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChangedField() {}

  /**
   * All-args constructor.
   * @param deletedArrayElements The new value for deletedArrayElements
   * @param operationType The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
   * @param path The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
   */
  public ChangedField(java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> deletedArrayElements, java.lang.CharSequence operationType, java.lang.CharSequence path) {
    this.deletedArrayElements = deletedArrayElements;
    this.operationType = operationType;
    this.path = path;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return deletedArrayElements;
    case 1: return operationType;
    case 2: return path;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: deletedArrayElements = (java.util.List<com.uhc.schema.model.eligibility.common.ElementKey>)value$; break;
    case 1: operationType = (java.lang.CharSequence)value$; break;
    case 2: path = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'deletedArrayElements' field.
   * @return The value of the 'deletedArrayElements' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> getDeletedArrayElements() {
    return deletedArrayElements;
  }

  /**
   * Sets the value of the 'deletedArrayElements' field.
   * @param value the value to set.
   */
  public void setDeletedArrayElements(java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> value) {
    this.deletedArrayElements = value;
  }

  /**
   * Gets the value of the 'operationType' field.
   * @return The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
   */
  public java.lang.CharSequence getOperationType() {
    return operationType;
  }

  /**
   * Sets the value of the 'operationType' field.
   * The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
   * @param value the value to set.
   */
  public void setOperationType(java.lang.CharSequence value) {
    this.operationType = value;
  }

  /**
   * Gets the value of the 'path' field.
   * @return The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
   */
  public java.lang.CharSequence getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
   * @param value the value to set.
   */
  public void setPath(java.lang.CharSequence value) {
    this.path = value;
  }

  /**
   * Creates a new ChangedField RecordBuilder.
   * @return A new ChangedField RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.ChangedField.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.common.ChangedField.Builder();
  }

  /**
   * Creates a new ChangedField RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChangedField RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.ChangedField.Builder newBuilder(com.uhc.schema.model.eligibility.common.ChangedField.Builder other) {
    return new com.uhc.schema.model.eligibility.common.ChangedField.Builder(other);
  }

  /**
   * Creates a new ChangedField RecordBuilder by copying an existing ChangedField instance.
   * @param other The existing instance to copy.
   * @return A new ChangedField RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.ChangedField.Builder newBuilder(com.uhc.schema.model.eligibility.common.ChangedField other) {
    return new com.uhc.schema.model.eligibility.common.ChangedField.Builder(other);
  }

  /**
   * RecordBuilder for ChangedField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChangedField>
    implements org.apache.avro.data.RecordBuilder<ChangedField> {

    private java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> deletedArrayElements;
    /** The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed. */
    private java.lang.CharSequence operationType;
    /** The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[] */
    private java.lang.CharSequence path;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.common.ChangedField.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deletedArrayElements)) {
        this.deletedArrayElements = data().deepCopy(fields()[0].schema(), other.deletedArrayElements);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operationType)) {
        this.operationType = data().deepCopy(fields()[1].schema(), other.operationType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.path)) {
        this.path = data().deepCopy(fields()[2].schema(), other.path);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ChangedField instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.common.ChangedField other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.deletedArrayElements)) {
        this.deletedArrayElements = data().deepCopy(fields()[0].schema(), other.deletedArrayElements);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operationType)) {
        this.operationType = data().deepCopy(fields()[1].schema(), other.operationType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.path)) {
        this.path = data().deepCopy(fields()[2].schema(), other.path);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'deletedArrayElements' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> getDeletedArrayElements() {
      return deletedArrayElements;
    }

    /**
      * Sets the value of the 'deletedArrayElements' field.
      * @param value The value of 'deletedArrayElements'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.ChangedField.Builder setDeletedArrayElements(java.util.List<com.uhc.schema.model.eligibility.common.ElementKey> value) {
      validate(fields()[0], value);
      this.deletedArrayElements = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'deletedArrayElements' field has been set.
      * @return True if the 'deletedArrayElements' field has been set, false otherwise.
      */
    public boolean hasDeletedArrayElements() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'deletedArrayElements' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.ChangedField.Builder clearDeletedArrayElements() {
      deletedArrayElements = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'operationType' field.
      * The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
      * @return The value.
      */
    public java.lang.CharSequence getOperationType() {
      return operationType;
    }

    /**
      * Sets the value of the 'operationType' field.
      * The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
      * @param value The value of 'operationType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.ChangedField.Builder setOperationType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.operationType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'operationType' field has been set.
      * The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
      * @return True if the 'operationType' field has been set, false otherwise.
      */
    public boolean hasOperationType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'operationType' field.
      * The type of change that occured for this field. One of [ "create", "update", "delete" ]. A "delete" with "deletedArrayElements" indicates the field is an array and an array element was removed.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.ChangedField.Builder clearOperationType() {
      operationType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'path' field.
      * The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
      * @return The value.
      */
    public java.lang.CharSequence getPath() {
      return path;
    }

    /**
      * Sets the value of the 'path' field.
      * The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
      * @param value The value of 'path'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.ChangedField.Builder setPath(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.path = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'path' field has been set.
      * The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
      * @return True if the 'path' field has been set, false otherwise.
      */
    public boolean hasPath() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'path' field.
      * The dot-notated path to the field that changed on this record. e.g. member.addresses[0].city or memberships[]
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.ChangedField.Builder clearPath() {
      path = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChangedField build() {
      try {
        ChangedField record = new ChangedField();
        record.deletedArrayElements = fieldSetFlags()[0] ? this.deletedArrayElements : (java.util.List<com.uhc.schema.model.eligibility.common.ElementKey>) defaultValue(fields()[0]);
        record.operationType = fieldSetFlags()[1] ? this.operationType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.path = fieldSetFlags()[2] ? this.path : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChangedField>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChangedField>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChangedField>
    READER$ = (org.apache.avro.io.DatumReader<ChangedField>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
