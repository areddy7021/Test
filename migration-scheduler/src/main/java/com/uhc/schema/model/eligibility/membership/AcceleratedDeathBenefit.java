/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AcceleratedDeathBenefit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5304247685664359453L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AcceleratedDeathBenefit\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"payoutAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AcceleratedDeathBenefit> ENCODER =
      new BinaryMessageEncoder<AcceleratedDeathBenefit>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AcceleratedDeathBenefit> DECODER =
      new BinaryMessageDecoder<AcceleratedDeathBenefit>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AcceleratedDeathBenefit> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AcceleratedDeathBenefit> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AcceleratedDeathBenefit>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AcceleratedDeathBenefit to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AcceleratedDeathBenefit from a ByteBuffer. */
  public static AcceleratedDeathBenefit fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence effectiveDate;
  @Deprecated public java.lang.CharSequence payoutAmount;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AcceleratedDeathBenefit() {}

  /**
   * All-args constructor.
   * @param effectiveDate Date format: CCYY-MM-DD
   * @param payoutAmount The new value for payoutAmount
   * @param status The new value for status
   */
  public AcceleratedDeathBenefit(java.lang.CharSequence effectiveDate, java.lang.CharSequence payoutAmount, com.uhc.schema.model.eligibility.common.DescriptionType status) {
    this.effectiveDate = effectiveDate;
    this.payoutAmount = payoutAmount;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return effectiveDate;
    case 1: return payoutAmount;
    case 2: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: effectiveDate = (java.lang.CharSequence)value$; break;
    case 1: payoutAmount = (java.lang.CharSequence)value$; break;
    case 2: status = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'effectiveDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effectiveDate;
  }

  /**
   * Sets the value of the 'effectiveDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effectiveDate = value;
  }

  /**
   * Gets the value of the 'payoutAmount' field.
   * @return The value of the 'payoutAmount' field.
   */
  public java.lang.CharSequence getPayoutAmount() {
    return payoutAmount;
  }

  /**
   * Sets the value of the 'payoutAmount' field.
   * @param value the value to set.
   */
  public void setPayoutAmount(java.lang.CharSequence value) {
    this.payoutAmount = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.status = value;
  }

  /**
   * Creates a new AcceleratedDeathBenefit RecordBuilder.
   * @return A new AcceleratedDeathBenefit RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder();
  }

  /**
   * Creates a new AcceleratedDeathBenefit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AcceleratedDeathBenefit RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder newBuilder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder(other);
  }

  /**
   * Creates a new AcceleratedDeathBenefit RecordBuilder by copying an existing AcceleratedDeathBenefit instance.
   * @param other The existing instance to copy.
   * @return A new AcceleratedDeathBenefit RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder newBuilder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit other) {
    return new com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder(other);
  }

  /**
   * RecordBuilder for AcceleratedDeathBenefit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AcceleratedDeathBenefit>
    implements org.apache.avro.data.RecordBuilder<AcceleratedDeathBenefit> {

    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence effectiveDate;
    private java.lang.CharSequence payoutAmount;
    private com.uhc.schema.model.eligibility.common.DescriptionType status;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder statusBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[0].schema(), other.effectiveDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payoutAmount)) {
        this.payoutAmount = data().deepCopy(fields()[1].schema(), other.payoutAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (other.hasStatusBuilder()) {
        this.statusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getStatusBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AcceleratedDeathBenefit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[0].schema(), other.effectiveDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payoutAmount)) {
        this.payoutAmount = data().deepCopy(fields()[1].schema(), other.payoutAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      this.statusBuilder = null;
    }

    /**
      * Gets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effectiveDate;
    }

    /**
      * Sets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'effectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.effectiveDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'effectiveDate' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder clearEffectiveDate() {
      effectiveDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payoutAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getPayoutAmount() {
      return payoutAmount;
    }

    /**
      * Sets the value of the 'payoutAmount' field.
      * @param value The value of 'payoutAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder setPayoutAmount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.payoutAmount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payoutAmount' field has been set.
      * @return True if the 'payoutAmount' field has been set, false otherwise.
      */
    public boolean hasPayoutAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payoutAmount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder clearPayoutAmount() {
      payoutAmount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder setStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[2], value);
      this.statusBuilder = null;
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'status' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getStatusBuilder() {
      if (statusBuilder == null) {
        if (hasStatus()) {
          setStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(status));
        } else {
          setStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return statusBuilder;
    }

    /**
     * Sets the Builder instance for the 'status' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder setStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearStatus();
      statusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'status' field has an active Builder instance
     * @return True if the 'status' field has an active Builder instance
     */
    public boolean hasStatusBuilder() {
      return statusBuilder != null;
    }

    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder clearStatus() {
      status = null;
      statusBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AcceleratedDeathBenefit build() {
      try {
        AcceleratedDeathBenefit record = new AcceleratedDeathBenefit();
        record.effectiveDate = fieldSetFlags()[0] ? this.effectiveDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.payoutAmount = fieldSetFlags()[1] ? this.payoutAmount : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (statusBuilder != null) {
          record.status = this.statusBuilder.build();
        } else {
          record.status = fieldSetFlags()[2] ? this.status : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AcceleratedDeathBenefit>
    WRITER$ = (org.apache.avro.io.DatumWriter<AcceleratedDeathBenefit>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AcceleratedDeathBenefit>
    READER$ = (org.apache.avro.io.DatumReader<AcceleratedDeathBenefit>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
