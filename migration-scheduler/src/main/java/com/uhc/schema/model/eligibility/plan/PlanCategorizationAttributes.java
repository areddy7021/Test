/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.plan;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlanCategorizationAttributes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3336712477797984269L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanCategorizationAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.plan\",\"fields\":[{\"name\":\"attributeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the attribute.\",\"default\":null},{\"name\":\"attributeValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Value for the attribute.\",\"default\":null},{\"name\":\"benefitPeriodCalculationBasis\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Effective date for the attribute. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Expiration date for the attribute. Date format: CCYY-MM-DD\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlanCategorizationAttributes> ENCODER =
      new BinaryMessageEncoder<PlanCategorizationAttributes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanCategorizationAttributes> DECODER =
      new BinaryMessageDecoder<PlanCategorizationAttributes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PlanCategorizationAttributes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PlanCategorizationAttributes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PlanCategorizationAttributes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PlanCategorizationAttributes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PlanCategorizationAttributes from a ByteBuffer. */
  public static PlanCategorizationAttributes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of the attribute. */
  @Deprecated public java.lang.CharSequence attributeName;
  /** Value for the attribute. */
  @Deprecated public java.lang.CharSequence attributeValue;
  /** Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal */
  @Deprecated public java.lang.CharSequence benefitPeriodCalculationBasis;
  /** Effective date for the attribute. Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence effectiveDate;
  /** Expiration date for the attribute. Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence expirationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanCategorizationAttributes() {}

  /**
   * All-args constructor.
   * @param attributeName Name of the attribute.
   * @param attributeValue Value for the attribute.
   * @param benefitPeriodCalculationBasis Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
   * @param effectiveDate Effective date for the attribute. Date format: CCYY-MM-DD
   * @param expirationDate Expiration date for the attribute. Date format: CCYY-MM-DD
   */
  public PlanCategorizationAttributes(java.lang.CharSequence attributeName, java.lang.CharSequence attributeValue, java.lang.CharSequence benefitPeriodCalculationBasis, java.lang.CharSequence effectiveDate, java.lang.CharSequence expirationDate) {
    this.attributeName = attributeName;
    this.attributeValue = attributeValue;
    this.benefitPeriodCalculationBasis = benefitPeriodCalculationBasis;
    this.effectiveDate = effectiveDate;
    this.expirationDate = expirationDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return attributeName;
    case 1: return attributeValue;
    case 2: return benefitPeriodCalculationBasis;
    case 3: return effectiveDate;
    case 4: return expirationDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: attributeName = (java.lang.CharSequence)value$; break;
    case 1: attributeValue = (java.lang.CharSequence)value$; break;
    case 2: benefitPeriodCalculationBasis = (java.lang.CharSequence)value$; break;
    case 3: effectiveDate = (java.lang.CharSequence)value$; break;
    case 4: expirationDate = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'attributeName' field.
   * @return Name of the attribute.
   */
  public java.lang.CharSequence getAttributeName() {
    return attributeName;
  }

  /**
   * Sets the value of the 'attributeName' field.
   * Name of the attribute.
   * @param value the value to set.
   */
  public void setAttributeName(java.lang.CharSequence value) {
    this.attributeName = value;
  }

  /**
   * Gets the value of the 'attributeValue' field.
   * @return Value for the attribute.
   */
  public java.lang.CharSequence getAttributeValue() {
    return attributeValue;
  }

  /**
   * Sets the value of the 'attributeValue' field.
   * Value for the attribute.
   * @param value the value to set.
   */
  public void setAttributeValue(java.lang.CharSequence value) {
    this.attributeValue = value;
  }

  /**
   * Gets the value of the 'benefitPeriodCalculationBasis' field.
   * @return Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
   */
  public java.lang.CharSequence getBenefitPeriodCalculationBasis() {
    return benefitPeriodCalculationBasis;
  }

  /**
   * Sets the value of the 'benefitPeriodCalculationBasis' field.
   * Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
   * @param value the value to set.
   */
  public void setBenefitPeriodCalculationBasis(java.lang.CharSequence value) {
    this.benefitPeriodCalculationBasis = value;
  }

  /**
   * Gets the value of the 'effectiveDate' field.
   * @return Effective date for the attribute. Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effectiveDate;
  }

  /**
   * Sets the value of the 'effectiveDate' field.
   * Effective date for the attribute. Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effectiveDate = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   * @return Expiration date for the attribute. Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getExpirationDate() {
    return expirationDate;
  }

  /**
   * Sets the value of the 'expirationDate' field.
   * Expiration date for the attribute. Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setExpirationDate(java.lang.CharSequence value) {
    this.expirationDate = value;
  }

  /**
   * Creates a new PlanCategorizationAttributes RecordBuilder.
   * @return A new PlanCategorizationAttributes RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder();
  }

  /**
   * Creates a new PlanCategorizationAttributes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanCategorizationAttributes RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder newBuilder(com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder other) {
    return new com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder(other);
  }

  /**
   * Creates a new PlanCategorizationAttributes RecordBuilder by copying an existing PlanCategorizationAttributes instance.
   * @param other The existing instance to copy.
   * @return A new PlanCategorizationAttributes RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder newBuilder(com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes other) {
    return new com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder(other);
  }

  /**
   * RecordBuilder for PlanCategorizationAttributes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanCategorizationAttributes>
    implements org.apache.avro.data.RecordBuilder<PlanCategorizationAttributes> {

    /** Name of the attribute. */
    private java.lang.CharSequence attributeName;
    /** Value for the attribute. */
    private java.lang.CharSequence attributeValue;
    /** Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal */
    private java.lang.CharSequence benefitPeriodCalculationBasis;
    /** Effective date for the attribute. Date format: CCYY-MM-DD */
    private java.lang.CharSequence effectiveDate;
    /** Expiration date for the attribute. Date format: CCYY-MM-DD */
    private java.lang.CharSequence expirationDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.attributeName)) {
        this.attributeName = data().deepCopy(fields()[0].schema(), other.attributeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.attributeValue)) {
        this.attributeValue = data().deepCopy(fields()[1].schema(), other.attributeValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.benefitPeriodCalculationBasis)) {
        this.benefitPeriodCalculationBasis = data().deepCopy(fields()[2].schema(), other.benefitPeriodCalculationBasis);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[3].schema(), other.effectiveDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[4].schema(), other.expirationDate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PlanCategorizationAttributes instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.attributeName)) {
        this.attributeName = data().deepCopy(fields()[0].schema(), other.attributeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.attributeValue)) {
        this.attributeValue = data().deepCopy(fields()[1].schema(), other.attributeValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.benefitPeriodCalculationBasis)) {
        this.benefitPeriodCalculationBasis = data().deepCopy(fields()[2].schema(), other.benefitPeriodCalculationBasis);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[3].schema(), other.effectiveDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[4].schema(), other.expirationDate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'attributeName' field.
      * Name of the attribute.
      * @return The value.
      */
    public java.lang.CharSequence getAttributeName() {
      return attributeName;
    }

    /**
      * Sets the value of the 'attributeName' field.
      * Name of the attribute.
      * @param value The value of 'attributeName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder setAttributeName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.attributeName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeName' field has been set.
      * Name of the attribute.
      * @return True if the 'attributeName' field has been set, false otherwise.
      */
    public boolean hasAttributeName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'attributeName' field.
      * Name of the attribute.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder clearAttributeName() {
      attributeName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeValue' field.
      * Value for the attribute.
      * @return The value.
      */
    public java.lang.CharSequence getAttributeValue() {
      return attributeValue;
    }

    /**
      * Sets the value of the 'attributeValue' field.
      * Value for the attribute.
      * @param value The value of 'attributeValue'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder setAttributeValue(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.attributeValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeValue' field has been set.
      * Value for the attribute.
      * @return True if the 'attributeValue' field has been set, false otherwise.
      */
    public boolean hasAttributeValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'attributeValue' field.
      * Value for the attribute.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder clearAttributeValue() {
      attributeValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'benefitPeriodCalculationBasis' field.
      * Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
      * @return The value.
      */
    public java.lang.CharSequence getBenefitPeriodCalculationBasis() {
      return benefitPeriodCalculationBasis;
    }

    /**
      * Sets the value of the 'benefitPeriodCalculationBasis' field.
      * Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
      * @param value The value of 'benefitPeriodCalculationBasis'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder setBenefitPeriodCalculationBasis(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.benefitPeriodCalculationBasis = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'benefitPeriodCalculationBasis' field has been set.
      * Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
      * @return True if the 'benefitPeriodCalculationBasis' field has been set, false otherwise.
      */
    public boolean hasBenefitPeriodCalculationBasis() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'benefitPeriodCalculationBasis' field.
      * Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder clearBenefitPeriodCalculationBasis() {
      benefitPeriodCalculationBasis = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'effectiveDate' field.
      * Effective date for the attribute. Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effectiveDate;
    }

    /**
      * Sets the value of the 'effectiveDate' field.
      * Effective date for the attribute. Date format: CCYY-MM-DD
      * @param value The value of 'effectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.effectiveDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDate' field has been set.
      * Effective date for the attribute. Date format: CCYY-MM-DD
      * @return True if the 'effectiveDate' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'effectiveDate' field.
      * Effective date for the attribute. Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder clearEffectiveDate() {
      effectiveDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'expirationDate' field.
      * Expiration date for the attribute. Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getExpirationDate() {
      return expirationDate;
    }

    /**
      * Sets the value of the 'expirationDate' field.
      * Expiration date for the attribute. Date format: CCYY-MM-DD
      * @param value The value of 'expirationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder setExpirationDate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.expirationDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'expirationDate' field has been set.
      * Expiration date for the attribute. Date format: CCYY-MM-DD
      * @return True if the 'expirationDate' field has been set, false otherwise.
      */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'expirationDate' field.
      * Expiration date for the attribute. Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes.Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanCategorizationAttributes build() {
      try {
        PlanCategorizationAttributes record = new PlanCategorizationAttributes();
        record.attributeName = fieldSetFlags()[0] ? this.attributeName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.attributeValue = fieldSetFlags()[1] ? this.attributeValue : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.benefitPeriodCalculationBasis = fieldSetFlags()[2] ? this.benefitPeriodCalculationBasis : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.effectiveDate = fieldSetFlags()[3] ? this.effectiveDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.expirationDate = fieldSetFlags()[4] ? this.expirationDate : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanCategorizationAttributes>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanCategorizationAttributes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanCategorizationAttributes>
    READER$ = (org.apache.avro.io.DatumReader<PlanCategorizationAttributes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
