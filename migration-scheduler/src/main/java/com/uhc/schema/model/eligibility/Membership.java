/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Membership extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3102482563179657732L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Membership\",\"namespace\":\"com.uhc.schema.model.eligibility\",\"fields\":[{\"name\":\"active\",\"type\":\"boolean\",\"default\":false},{\"name\":\"applicationIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"areaGroup\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"benefitStatus\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.\",\"default\":null},{\"name\":\"billingSubgroupNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The billing subgroup number for this membership record.\",\"default\":null},{\"name\":\"bookOfBusiness\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).\",\"default\":null},{\"name\":\"brandIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"brandingEntity\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the membership branding entity.\",\"default\":null},{\"name\":\"brandName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bundleOptionPlans\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BundleOptionPlan\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"bundleOptionPlanType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the bundle option plan type. E.g., Utilization, Service.\",\"default\":null},{\"name\":\"designatedVirtualClinicNetworkIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the plan is in a designated virtual clinic network.\",\"default\":null},{\"name\":\"pcpRequiredIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if a Primary Care Physician selection in required.\",\"default\":null},{\"name\":\"planCategory\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"A categorization for a plan.\",\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"doc\":\"The identifier for a plan.\",\"default\":null},{\"name\":\"planExternalIdentifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanExternalIdentifier\",\"fields\":[{\"name\":\"externalEntityIdentifer\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the external entity.\",\"default\":null},{\"name\":\"externalPlanIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the external plan.\",\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the plan entity type.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"planFunctions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanFunction\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"planFunctionCode\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the plan function.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"planIncentives\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanIncentive\",\"fields\":[{\"name\":\"annualMaxRewardAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Maximun annual reward amount for the incentive.\",\"default\":null},{\"name\":\"dailyMaxRewardAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Maximum daily reward amount for the incentive.\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"incentiveCalculationBasis\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description describing the calculation basis for the incentive.\",\"default\":null},{\"name\":\"incentiveRewardMethod\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description describing the reward method for the incentive.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"planLanguageText\",\"type\":[\"null\",\"string\"],\"doc\":\"Text language for the plan.\",\"default\":null},{\"name\":\"planLongDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"Description for the plan.\",\"default\":null},{\"name\":\"planName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the plan.\",\"default\":null},{\"name\":\"planVendorCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Code for the plan vendor.\",\"default\":null},{\"name\":\"planVendorName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the plan vendor.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"business\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Highest level business entity. E.g., Optum or UHC.\",\"default\":null},{\"name\":\"businessSegment\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"calap\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CALAP\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"doc\":\"California Language Assistance Program\",\"fields\":[{\"name\":\"calapIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the Policy for this membership record is impacted by the CA Language Assistance Program.  Y or N.\",\"default\":null},{\"name\":\"externalHealthPlanIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the Health Plan for this membership record is external.  Y or N.\",\"default\":null},{\"name\":\"hmoPlanIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the Policy for this membership record is an HMO.  Y or N.\",\"default\":null},{\"name\":\"sourceSytemCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Source system code for the source of CALAP information.\",\"default\":null}]}],\"default\":null},{\"name\":\"cancelReasonType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Reason coverage was cancelled.\",\"default\":null},{\"name\":\"claimSystemType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"coverageLevel\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"coveragePaidThruDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"coveragePaidThruReason\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"coverageStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"creationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"customerAccount\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CustomerAccount\",\"fields\":[{\"name\":\"businessArrangement\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"carrierExternalEntityIdentifers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CarrierExternalEntityIdentifier\",\"namespace\":\"com.uhc.schema.model.eligibility.customeraccount\",\"fields\":[{\"name\":\"externalEntityIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The identifier for an entity.\",\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the carrier entity type.\",\"default\":null}]}}],\"default\":null},{\"name\":\"customerAccountIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"hsaAffirmationIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates that the employee has provided a wet signature. Used only if an employer is authorized by Exante Bank to capture a wet signature on its behalf.\",\"default\":null},{\"name\":\"hsaElectronicSignatureIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Used only if an employer is authorized by Exante Bank to capture an electronic signature on its behalf.\",\"default\":null},{\"name\":\"hsaWetSignatureIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Used only if an employer is authorized by Exante Bank to capture a wet (physi","cal) signature on its behalf.\",\"default\":null},{\"name\":\"lineOfBusiness\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"The customer account line of business. E.g., EI, MR, CS, Global.\",\"default\":null},{\"name\":\"obligor\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"planCoverageIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The plan coverage identifier for this membership record, used to link to the PLAN COVERAGE canonical.\",\"default\":null},{\"name\":\"policySuffixCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"purchasePlanCode\",\"type\":[\"null\",\"string\"],\"doc\":\"The plan code for this membership record.\",\"default\":null},{\"name\":\"purchasePlanIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The plan purchase identifier for this membership record, used to link to the PLAN PURCHASE canonical.\",\"default\":null},{\"name\":\"sharedArrangement\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null}]}],\"default\":null},{\"name\":\"customerAccountIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"customerPurchaseEffectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"customerPurchaseIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"customerPurchaseOptionIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for a group of plan purchases.\",\"default\":null},{\"name\":\"customerPurchaseStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.\",\"default\":null},{\"name\":\"customerPurchaseTerminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"customerPurchaseType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.\",\"default\":null},{\"name\":\"customerPurchaseVersionNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Current version number of the Customer Purchase for this membership record.\",\"default\":null},{\"name\":\"differentFamilyMemberAddressIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates that this member's address is different from the rest of the family.\",\"default\":null},{\"name\":\"divisionCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"distributionChannel\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"eligibilityGracePeriodThruDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"eligibilitySystemType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"employerIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"enrolleeMemberFacingIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.\",\"default\":null},{\"name\":\"enrolleeSourceCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"enrolleeSourceId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"erisaIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Employee Retirement Income Security Act (ERISA) Indicator.\",\"default\":null},{\"name\":\"familyLastUpdatedTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"financialAccount\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FinancialAccount\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"benefitStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"customerId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"financePolicyNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"financePolicySuffixCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"hsaIndicator\",\"type\":\"boolean\",\"default\":false},{\"name\":\"iPlanIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"postDeductibleAccountSequenceNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Post-deductible order of Accounts. Indicates the payment hierarchy order, post-deductible.\",\"default\":null},{\"name\":\"preDeductibleAccountSequenceNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Pre-deductible order of Accounts. Indicates the payment hierarchy order, pre-deductible.\",\"default\":null},{\"name\":\"productSubcategoryType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"raiderOnlyIndicator\",\"type\":\"boolean\",\"default\":false},{\"name\":\"relationshipSequenceNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies a unique member within a family. Currently used as the member identifier in communication between CES and Medco.\",\"default\":null}]}],\"default\":null},{\"name\":\"hContractId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"healthPlanCode\",\"type\":[\"null\",\"string\"],\"doc\":\"The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.\",\"default\":null},{\"name\":\"healthProgramCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"holdReason\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"HoldReason\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The start date for the hold.\",\"default\":null},{\"name\":\"holdLevel\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies which domain the hold applies to. Ex: member, group, organization, etc.\",\"default\":null},{\"name\":\"holdNote\",\"type\":[\"null\",\"string\"],\"doc\":\"Free form text allowing user to describe the reason or other pertinent information for the hold.\",\"default\":null},{\"name\":\"holdReasonRestriction\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"HoldReasonRestriction\",\"fields\":[{\"name\":\"restrictionIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"A boolean value indication whether the restriction is true or false.\",\"default\":null},{\"name\":\"restrictionType\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"holdType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.\",\"default\":null},{\"name\":\"lastUpdated\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LastUpdated\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"doc\":\"Information about the last update made to a given entity.\",\"fields\":[{\"name\":\"sourceSystemTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"sourceTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",\"string\"],\"doc\":\"The last person or application to update the entity.\",\"default\":null}]}],\"default\":null},{\"name\":\"terminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The end date for the hold.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"indivi","dualIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)\",\"default\":null},{\"name\":\"individualTerminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"lastPremiumPaidDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"lastUpdated\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.LastUpdated\"],\"default\":null},{\"name\":\"lateEnrollCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"legacyAttributes\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MembershipLegacyAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"cancelReasonType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"coverageLevel\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"governmentProgramType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"railRoadBenefitGroupChoiceTxt\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"railRoadBenefitGroupNumberId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"railRoadBranchRepresentativeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"railRoadOptOutPlanIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"railRoadUnionCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"stateIssueCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"travelBenefitIndicator\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"lifeAndDisability\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LifeAndDisability\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"acceleratedDeathBenefit\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AcceleratedDeathBenefit\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"payoutAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null}]}],\"default\":null},{\"name\":\"ageReductionAppliedAge\",\"type\":[\"null\",\"string\"],\"doc\":\"Last age achieved when reduction was applied.\",\"default\":null},{\"name\":\"ageReductionAppliedPercent\",\"type\":[\"null\",\"string\"],\"doc\":\"Percent used to reduce benefit when age reduction is met.\",\"default\":null},{\"name\":\"approvedAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Subscriber's maximum approved benefit amount at plan level.\",\"default\":null},{\"name\":\"coverageStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"evidenceOfInsurabilityStatusCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"evidenceOfInsurabilityStatusDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"insuredAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lateEntrantStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"premiumAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Total premium amount.\",\"default\":null},{\"name\":\"requestedAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Amount the member is requesting.\",\"default\":null},{\"name\":\"salaryBenefitMultiplierFactor\",\"type\":[\"null\",\"string\"],\"doc\":\"Selected valid amounts associated with plan code.\",\"default\":null},{\"name\":\"waiverOfPremiumEffectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"waiverOfPremiumIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates a member has been approved for a waiver of premium.\",\"default\":null},{\"name\":\"waiverOfPremiumTerminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}],\"default\":null},{\"name\":\"marketSegment\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Market segment for the coverage.\",\"default\":null},{\"name\":\"marketType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"medicareAndRetirementMembershipProfiles\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MedicareAndRetirementMembershipProfile\",\"namespace\":\"com.uhc.schema.model.eligibility.medicareandretirement\",\"fields\":[{\"name\":\"copayCategory\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"credibleCoverageIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"familyIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lepChangeReasonName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lepReconsiderLetterDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lowIncomePremiumSubsidyPct\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"netLepAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"profileDates\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DateRangeType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}],\"default\":null},{\"name\":\"subsidySource\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"uncoveredMonthDates\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DateRangeType\"],\"default\":null},{\"name\":\"uncoveredMonths\",\"type\":[\"null\",\"int\"],\"default\":null}]}}],\"default\":null},{\"name\":\"medicareAndRetirementPassportProfiles\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MedicareAndRetirementPassportProfile\",\"namespace\":\"com.uhc.schema.model.eligibility.medicareandretirement\",\"fields\":[{\"name\":\"passportDates\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DateRangeType\"],\"default\":null}]}}],\"default\":null},{\"name\":\"memberDeliveryPreferences\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MemberDeliveryPreference\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"deliveryType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"fulfillmentIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastModifiedDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date Member Delivery Preference was modified. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"lastModifiedUser\",\"type\":[\"null\",\"string\"],\"doc\":\"User name of the user modifying Member Delivery Preference.\",\"default\":null},{\"name\":\"preferenceDates\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DateRangeType\"],\"default\":null}]}}],\"default\":null},{\"name\":\"memberEnrollmentOtherIdentifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MemberEnrollmentOtherIdentifier\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"active\",\"type\":\"boolean\",\"default\":false},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"terminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"typeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"memberGroupContractPlanOptionId\",\"type\":[\"null\",\"string\"],\"doc\":\"Cirrus Member Group Contract Plan Option identifier.\",\"default\":null},{\"name\":\"memberMarketNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"membershipGroupData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MembershipGroupData\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"effectiveDates\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DateRangeType\"],\"default\":null},{\"name\":\"groupName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"groupNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"masterGroup\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"membershipGroupType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"","doc\":\"Identifies the group type for the membership group data.\",\"default\":null},{\"name\":\"sourceSystem\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"membershipIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)\",\"default\":null},{\"name\":\"organization\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Organization\",\"doc\":\"Employer information on the account\",\"fields\":[{\"name\":\"organizationIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planVariationCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"reportingCode\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"organizationIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"organizationPopulationGroupNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"packageBenefitPlanCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"packageOptionDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"Benefit Bundle Option Description.\",\"default\":null},{\"name\":\"packageOptionId\",\"type\":[\"null\",\"string\"],\"doc\":\"Package Option Identifier.\",\"default\":null},{\"name\":\"panelNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"passportGroupNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"parentMembershipIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pcpMedicalDirectorApprovalIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Override to allow specialist to be primary physician.\",\"default\":null},{\"name\":\"plan\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Plan\",\"fields\":[{\"name\":\"dentalRewardsIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.\",\"default\":null},{\"name\":\"designatedNetwork\",\"type\":[\"null\",\"string\"],\"doc\":\"The default healthcare network assigned to the plan.\",\"default\":null},{\"name\":\"designatedVirtualClinicalNetworkBenefitIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the plan has a benefit which is in a designated virtual clinic network.\",\"default\":null},{\"name\":\"employerGroupIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fundingArrangement\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Identifies the financial arrangements between UHG and Customers.\",\"default\":null},{\"name\":\"hasRxBenefitIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the plan has an RX benefit. Ex: Y, N.\",\"default\":null},{\"name\":\"isEHBPlan\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies plan as an Essential Health Benefit plan. Ex: Y, N.\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"networkProviderRelationshipIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.\",\"default\":null},{\"name\":\"networkScheduleAlternateIdentifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NetworkScheduleAlternateIdentifier\",\"namespace\":\"com.uhc.schema.model.eligibility.plan\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identifier\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"doc\":\"A list of alteranate network schedule identfiers as defined by their source systems.\",\"default\":null},{\"name\":\"networkScheduleIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies the network schedule used by the benefit bundle option.\",\"default\":null},{\"name\":\"optionDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"Description for the plan option.\",\"default\":null},{\"name\":\"optionId\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier of the plan option.\",\"default\":null},{\"name\":\"planCategorizationAttributes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanCategorizationAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.plan\",\"fields\":[{\"name\":\"attributeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the attribute.\",\"default\":null},{\"name\":\"attributeValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Value for the attribute.\",\"default\":null},{\"name\":\"benefitPeriodCalculationBasis\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Effective date for the attribute. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Expiration date for the attribute. Date format: CCYY-MM-DD\",\"default\":null}]}}],\"doc\":\"A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.\",\"default\":null},{\"name\":\"planCategoryName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planSubCategoryName\",\"type\":[\"null\",\"string\"],\"doc\":\"The subcategory name for the member's Plan.\",\"default\":null},{\"name\":\"planTypeDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planTypeIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planTypeName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"riderBit\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"security\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Security\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"securitySourceSystemCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"securityPermission\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SecurityPermission\",\"fields\":[{\"name\":\"securityPermissionValue\",\"type\":[\"null\",\"string\"],\"doc\":\"A security attribute identifying the secure class under which the record instance is administered.\",\"default\":null}]}}],\"doc\":\"Superset of Security permissions\",\"default\":null},{\"name\":\"securityPermissionAny\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"SecurityPermission\"}],\"doc\":\"Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.\",\"default\":null}]}],\"default\":null},{\"name\":\"sourceSystemCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"versionNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the plan.\",\"default\":null}]}],\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"priorHealthCoverageMonths\",\"type\":[\"null\",\"string\"],\"doc\":\"The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).\",\"default\":null},{\"name\":\"product\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"businessLineTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"categoryType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"healthCoverageType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"productCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"serviceType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"subCategoryTypes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"com.uhc.schema.model.eligibility.common.DescriptionType\"}],\"doc\":\"Defines the subcategory types for a Product.\",\"default\":null},{\"name\":\"versionNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the product.\",\"default\":null}]}],\"default\":null},{\"name\":\"productCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"qmcsoIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if a Qualified Medical Child Support Order exists for this membership.\",\"default\":null},{\"name\":\"recordType\",\"type\":[\"null\",\"string\"],\"doc\":\"The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]\",\"default\":null},{\"name\":\"relationshipType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"revenueArrangement\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility",".common.DescriptionType\"],\"doc\":\"Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.\",\"default\":null},{\"name\":\"riskGroupId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"riskGroupName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"salesAgentIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"security\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.Security\"],\"default\":null},{\"name\":\"segmentId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"site\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"situsState\",\"type\":[\"null\",\"string\"],\"doc\":\"The state that the insurance product/policy is based out of for a particular employer.\",\"default\":null},{\"name\":\"sourceSystemAttributes\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MembershipSourceSystemAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"doc\":\"source-specific attributes about a membership\",\"fields\":[{\"name\":\"boss\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BossMembershipSourceSystemAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.boss\",\"fields\":[{\"name\":\"customerAccountIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"The customerAccountIdentifier as stored in BOSS (ie. padded with leading zeroes to minimum length of 9)\",\"default\":null}]}],\"default\":null},{\"name\":\"cdb\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CdbMembershipSourceSystemAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.cdb\",\"fields\":[{\"name\":\"cesGroupNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"legacyProductCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"legacyProductId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nonCs\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"NonCsMembershipSourceSystemAttributes\",\"fields\":[{\"name\":\"legalEntityName\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"referenceData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CdbMembershipReferenceData\",\"fields\":[{\"name\":\"coverageLevelTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"coveragePaidThruReasonCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"coverageTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"healthServiceProductCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"healthServiceProductLineCode\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"cirrus\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CirrusMembershipSourceSystemAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.cirrus\",\"fields\":[{\"name\":\"coverageLevelHistory\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CoverageLevelHistory\",\"fields\":[{\"name\":\"coverageLevel\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"terminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}}],\"default\":null},{\"name\":\"originalEffectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Cirrus specific Effective Date for the membership record. Date format: CCYY-MM-DD\",\"default\":null}]}],\"default\":null},{\"name\":\"crossCarrier\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CrossCarrierMembershipSourceSystemAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.crosscarrier\",\"fields\":[{\"name\":\"carrierName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fileName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pKey\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"medicareAndRetirement\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MedicareAndRetirementMembershipSourceSystemAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.medicareandretirement\",\"fields\":[{\"name\":\"conservationReason\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"electionType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"enrollmentSource\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"marketProductName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"regionPlanIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"terminationReason\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"sourceSystemCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sourceTerminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The date that the Consumer Plan is no longer active.\",\"default\":null},{\"name\":\"subscriberEnrolleeSourceId\",\"type\":[\"null\",\"string\"],\"doc\":\"The enrollee id for the subscriber on the membership record.\",\"default\":null},{\"name\":\"subscriberIndividualIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subscriberMemberFacingIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.\",\"default\":null},{\"name\":\"subscriberSocialSecurityNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Social Security Number of the plan subscriber.\",\"default\":null},{\"name\":\"subsidizedInsuredPlans\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SubsidizedInsuredPlan\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"branchIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subsidizedInsuredPlanDates\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DateRangeType\"],\"default\":null},{\"name\":\"subsidizedInsuredPlanIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"terminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"terminationReason\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"The reason the membership was terminated.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Membership> ENCODER =
      new BinaryMessageEncoder<Membership>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Membership> DECODER =
      new BinaryMessageDecoder<Membership>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Membership> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Membership> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Membership>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Membership to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Membership from a ByteBuffer. */
  public static Membership fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public boolean active;
  @Deprecated public java.lang.CharSequence applicationIdentifier;
  @Deprecated public java.lang.CharSequence areaGroup;
  /** The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType benefitStatus;
  /** The billing subgroup number for this membership record. */
  @Deprecated public java.lang.CharSequence billingSubgroupNumber;
  /** A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.). */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType bookOfBusiness;
  @Deprecated public java.lang.CharSequence brandIdentifier;
  /** Code and description for the membership branding entity. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType brandingEntity;
  @Deprecated public java.lang.CharSequence brandName;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> bundleOptionPlans;
  /** Highest level business entity. E.g., Optum or UHC. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType business;
  @Deprecated public java.lang.CharSequence businessSegment;
  @Deprecated public com.uhc.schema.model.eligibility.membership.CALAP calap;
  /** Reason coverage was cancelled. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType cancelReasonType;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType claimSystemType;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType coverageLevel;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence coveragePaidThruDate;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType coveragePaidThruReason;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType coverageStatus;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence creationDate;
  @Deprecated public com.uhc.schema.model.eligibility.CustomerAccount customerAccount;
  @Deprecated public java.lang.CharSequence customerAccountIdentifier;
  /** Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence customerPurchaseEffectiveDate;
  @Deprecated public java.lang.CharSequence customerPurchaseIdentifier;
  /** Identifier for a group of plan purchases. */
  @Deprecated public java.lang.CharSequence customerPurchaseOptionIdentifier;
  /** Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType customerPurchaseStatus;
  /** Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence customerPurchaseTerminationDate;
  /** Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType customerPurchaseType;
  /** Current version number of the Customer Purchase for this membership record. */
  @Deprecated public java.lang.CharSequence customerPurchaseVersionNumber;
  /** Indicates that this member's address is different from the rest of the family. */
  @Deprecated public java.lang.CharSequence differentFamilyMemberAddressIndicator;
  @Deprecated public java.lang.CharSequence divisionCode;
  /** A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType distributionChannel;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence effectiveDate;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence eligibilityGracePeriodThruDate;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType eligibilitySystemType;
  @Deprecated public java.lang.CharSequence employerIdentifier;
  /** External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee. */
  @Deprecated public java.lang.CharSequence enrolleeMemberFacingIdentifier;
  @Deprecated public java.lang.CharSequence enrolleeSourceCode;
  @Deprecated public java.lang.CharSequence enrolleeSourceId;
  /** Employee Retirement Income Security Act (ERISA) Indicator. */
  @Deprecated public java.lang.CharSequence erisaIndicator;
  /** The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ */
  @Deprecated public java.lang.CharSequence familyLastUpdatedTimestamp;
  @Deprecated public com.uhc.schema.model.eligibility.membership.FinancialAccount financialAccount;
  @Deprecated public java.lang.CharSequence hContractId;
  /** The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan. */
  @Deprecated public java.lang.CharSequence healthPlanCode;
  @Deprecated public java.lang.CharSequence healthProgramCode;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> holdReason;
  /** The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID) */
  @Deprecated public java.lang.CharSequence individualIdentifier;
  /** Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence individualTerminationDate;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence lastPremiumPaidDate;
  @Deprecated public com.uhc.schema.model.eligibility.common.LastUpdated lastUpdated;
  @Deprecated public java.lang.CharSequence lateEnrollCode;
  @Deprecated public com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes legacyAttributes;
  @Deprecated public com.uhc.schema.model.eligibility.membership.LifeAndDisability lifeAndDisability;
  /** Market segment for the coverage. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType marketSegment;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType marketType;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> medicareAndRetirementMembershipProfiles;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> medicareAndRetirementPassportProfiles;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> memberDeliveryPreferences;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> memberEnrollmentOtherIdentifiers;
  /** Cirrus Member Group Contract Plan Option identifier. */
  @Deprecated public java.lang.CharSequence memberGroupContractPlanOptionId;
  @Deprecated public java.lang.CharSequence memberMarketNumber;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> membershipGroupData;
  /** The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE) */
  @Deprecated public java.lang.CharSequence membershipIdentifier;
  @Deprecated public com.uhc.schema.model.eligibility.Organization organization;
  @Deprecated public java.lang.CharSequence organizationIdentifier;
  @Deprecated public java.lang.CharSequence organizationPopulationGroupNumber;
  @Deprecated public java.lang.CharSequence packageBenefitPlanCode;
  /** Benefit Bundle Option Description. */
  @Deprecated public java.lang.CharSequence packageOptionDescription;
  /** Package Option Identifier. */
  @Deprecated public java.lang.CharSequence packageOptionId;
  @Deprecated public java.lang.CharSequence panelNumber;
  @Deprecated public java.lang.CharSequence passportGroupNumber;
  @Deprecated public java.lang.CharSequence parentMembershipIdentifier;
  /** Override to allow specialist to be primary physician. */
  @Deprecated public java.lang.CharSequence pcpMedicalDirectorApprovalIndicator;
  @Deprecated public com.uhc.schema.model.eligibility.Plan plan;
  @Deprecated public java.lang.CharSequence planCode;
  /** The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA). */
  @Deprecated public java.lang.CharSequence priorHealthCoverageMonths;
  @Deprecated public com.uhc.schema.model.eligibility.Product product;
  @Deprecated public java.lang.CharSequence productCode;
  /** Indicates if a Qualified Medical Child Support Order exists for this membership. */
  @Deprecated public java.lang.CharSequence qmcsoIndicator;
  /** The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ] */
  @Deprecated public java.lang.CharSequence recordType;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType relationshipType;
  /** Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType revenueArrangement;
  @Deprecated public java.lang.CharSequence riskGroupId;
  @Deprecated public java.lang.CharSequence riskGroupName;
  @Deprecated public java.lang.CharSequence salesAgentIdentifier;
  @Deprecated public com.uhc.schema.model.eligibility.common.Security security;
  @Deprecated public java.lang.CharSequence segmentId;
  @Deprecated public java.lang.CharSequence site;
  /** The state that the insurance product/policy is based out of for a particular employer. */
  @Deprecated public java.lang.CharSequence situsState;
  @Deprecated public com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes sourceSystemAttributes;
  @Deprecated public java.lang.CharSequence sourceSystemCode;
  /** The date that the Consumer Plan is no longer active. */
  @Deprecated public java.lang.CharSequence sourceTerminationDate;
  /** The enrollee id for the subscriber on the membership record. */
  @Deprecated public java.lang.CharSequence subscriberEnrolleeSourceId;
  @Deprecated public java.lang.CharSequence subscriberIndividualIdentifier;
  /** External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee. */
  @Deprecated public java.lang.CharSequence subscriberMemberFacingIdentifier;
  /** Social Security Number of the plan subscriber. */
  @Deprecated public java.lang.CharSequence subscriberSocialSecurityNumber;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> subsidizedInsuredPlans;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence terminationDate;
  /** The reason the membership was terminated. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType terminationReason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Membership() {}

  /**
   * All-args constructor.
   * @param active The new value for active
   * @param applicationIdentifier The new value for applicationIdentifier
   * @param areaGroup The new value for areaGroup
   * @param benefitStatus The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
   * @param billingSubgroupNumber The billing subgroup number for this membership record.
   * @param bookOfBusiness A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
   * @param brandIdentifier The new value for brandIdentifier
   * @param brandingEntity Code and description for the membership branding entity.
   * @param brandName The new value for brandName
   * @param bundleOptionPlans The new value for bundleOptionPlans
   * @param business Highest level business entity. E.g., Optum or UHC.
   * @param businessSegment The new value for businessSegment
   * @param calap The new value for calap
   * @param cancelReasonType Reason coverage was cancelled.
   * @param claimSystemType The new value for claimSystemType
   * @param coverageLevel The new value for coverageLevel
   * @param coveragePaidThruDate Date format: CCYY-MM-DD
   * @param coveragePaidThruReason The new value for coveragePaidThruReason
   * @param coverageStatus The new value for coverageStatus
   * @param creationDate Date format: CCYY-MM-DD
   * @param customerAccount The new value for customerAccount
   * @param customerAccountIdentifier The new value for customerAccountIdentifier
   * @param customerPurchaseEffectiveDate Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
   * @param customerPurchaseIdentifier The new value for customerPurchaseIdentifier
   * @param customerPurchaseOptionIdentifier Identifier for a group of plan purchases.
   * @param customerPurchaseStatus Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
   * @param customerPurchaseTerminationDate Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
   * @param customerPurchaseType Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
   * @param customerPurchaseVersionNumber Current version number of the Customer Purchase for this membership record.
   * @param differentFamilyMemberAddressIndicator Indicates that this member's address is different from the rest of the family.
   * @param divisionCode The new value for divisionCode
   * @param distributionChannel A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
   * @param effectiveDate Date format: CCYY-MM-DD
   * @param eligibilityGracePeriodThruDate Date format: CCYY-MM-DD
   * @param eligibilitySystemType The new value for eligibilitySystemType
   * @param employerIdentifier The new value for employerIdentifier
   * @param enrolleeMemberFacingIdentifier External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
   * @param enrolleeSourceCode The new value for enrolleeSourceCode
   * @param enrolleeSourceId The new value for enrolleeSourceId
   * @param erisaIndicator Employee Retirement Income Security Act (ERISA) Indicator.
   * @param familyLastUpdatedTimestamp The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   * @param financialAccount The new value for financialAccount
   * @param hContractId The new value for hContractId
   * @param healthPlanCode The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
   * @param healthProgramCode The new value for healthProgramCode
   * @param holdReason The new value for holdReason
   * @param individualIdentifier The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
   * @param individualTerminationDate Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
   * @param lastPremiumPaidDate Date format: CCYY-MM-DD
   * @param lastUpdated The new value for lastUpdated
   * @param lateEnrollCode The new value for lateEnrollCode
   * @param legacyAttributes The new value for legacyAttributes
   * @param lifeAndDisability The new value for lifeAndDisability
   * @param marketSegment Market segment for the coverage.
   * @param marketType The new value for marketType
   * @param medicareAndRetirementMembershipProfiles The new value for medicareAndRetirementMembershipProfiles
   * @param medicareAndRetirementPassportProfiles The new value for medicareAndRetirementPassportProfiles
   * @param memberDeliveryPreferences The new value for memberDeliveryPreferences
   * @param memberEnrollmentOtherIdentifiers The new value for memberEnrollmentOtherIdentifiers
   * @param memberGroupContractPlanOptionId Cirrus Member Group Contract Plan Option identifier.
   * @param memberMarketNumber The new value for memberMarketNumber
   * @param membershipGroupData The new value for membershipGroupData
   * @param membershipIdentifier The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
   * @param organization The new value for organization
   * @param organizationIdentifier The new value for organizationIdentifier
   * @param organizationPopulationGroupNumber The new value for organizationPopulationGroupNumber
   * @param packageBenefitPlanCode The new value for packageBenefitPlanCode
   * @param packageOptionDescription Benefit Bundle Option Description.
   * @param packageOptionId Package Option Identifier.
   * @param panelNumber The new value for panelNumber
   * @param passportGroupNumber The new value for passportGroupNumber
   * @param parentMembershipIdentifier The new value for parentMembershipIdentifier
   * @param pcpMedicalDirectorApprovalIndicator Override to allow specialist to be primary physician.
   * @param plan The new value for plan
   * @param planCode The new value for planCode
   * @param priorHealthCoverageMonths The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
   * @param product The new value for product
   * @param productCode The new value for productCode
   * @param qmcsoIndicator Indicates if a Qualified Medical Child Support Order exists for this membership.
   * @param recordType The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
   * @param relationshipType The new value for relationshipType
   * @param revenueArrangement Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
   * @param riskGroupId The new value for riskGroupId
   * @param riskGroupName The new value for riskGroupName
   * @param salesAgentIdentifier The new value for salesAgentIdentifier
   * @param security The new value for security
   * @param segmentId The new value for segmentId
   * @param site The new value for site
   * @param situsState The state that the insurance product/policy is based out of for a particular employer.
   * @param sourceSystemAttributes The new value for sourceSystemAttributes
   * @param sourceSystemCode The new value for sourceSystemCode
   * @param sourceTerminationDate The date that the Consumer Plan is no longer active.
   * @param subscriberEnrolleeSourceId The enrollee id for the subscriber on the membership record.
   * @param subscriberIndividualIdentifier The new value for subscriberIndividualIdentifier
   * @param subscriberMemberFacingIdentifier External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
   * @param subscriberSocialSecurityNumber Social Security Number of the plan subscriber.
   * @param subsidizedInsuredPlans The new value for subsidizedInsuredPlans
   * @param terminationDate Date format: CCYY-MM-DD
   * @param terminationReason The reason the membership was terminated.
   */
  public Membership(java.lang.Boolean active, java.lang.CharSequence applicationIdentifier, java.lang.CharSequence areaGroup, com.uhc.schema.model.eligibility.common.DescriptionType benefitStatus, java.lang.CharSequence billingSubgroupNumber, com.uhc.schema.model.eligibility.common.DescriptionType bookOfBusiness, java.lang.CharSequence brandIdentifier, com.uhc.schema.model.eligibility.common.DescriptionType brandingEntity, java.lang.CharSequence brandName, java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> bundleOptionPlans, com.uhc.schema.model.eligibility.common.DescriptionType business, java.lang.CharSequence businessSegment, com.uhc.schema.model.eligibility.membership.CALAP calap, com.uhc.schema.model.eligibility.common.DescriptionType cancelReasonType, com.uhc.schema.model.eligibility.common.DescriptionType claimSystemType, com.uhc.schema.model.eligibility.common.DescriptionType coverageLevel, java.lang.CharSequence coveragePaidThruDate, com.uhc.schema.model.eligibility.common.DescriptionType coveragePaidThruReason, com.uhc.schema.model.eligibility.common.DescriptionType coverageStatus, java.lang.CharSequence creationDate, com.uhc.schema.model.eligibility.CustomerAccount customerAccount, java.lang.CharSequence customerAccountIdentifier, java.lang.CharSequence customerPurchaseEffectiveDate, java.lang.CharSequence customerPurchaseIdentifier, java.lang.CharSequence customerPurchaseOptionIdentifier, com.uhc.schema.model.eligibility.common.DescriptionType customerPurchaseStatus, java.lang.CharSequence customerPurchaseTerminationDate, com.uhc.schema.model.eligibility.common.DescriptionType customerPurchaseType, java.lang.CharSequence customerPurchaseVersionNumber, java.lang.CharSequence differentFamilyMemberAddressIndicator, java.lang.CharSequence divisionCode, com.uhc.schema.model.eligibility.common.DescriptionType distributionChannel, java.lang.CharSequence effectiveDate, java.lang.CharSequence eligibilityGracePeriodThruDate, com.uhc.schema.model.eligibility.common.DescriptionType eligibilitySystemType, java.lang.CharSequence employerIdentifier, java.lang.CharSequence enrolleeMemberFacingIdentifier, java.lang.CharSequence enrolleeSourceCode, java.lang.CharSequence enrolleeSourceId, java.lang.CharSequence erisaIndicator, java.lang.CharSequence familyLastUpdatedTimestamp, com.uhc.schema.model.eligibility.membership.FinancialAccount financialAccount, java.lang.CharSequence hContractId, java.lang.CharSequence healthPlanCode, java.lang.CharSequence healthProgramCode, java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> holdReason, java.lang.CharSequence individualIdentifier, java.lang.CharSequence individualTerminationDate, java.lang.CharSequence lastPremiumPaidDate, com.uhc.schema.model.eligibility.common.LastUpdated lastUpdated, java.lang.CharSequence lateEnrollCode, com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes legacyAttributes, com.uhc.schema.model.eligibility.membership.LifeAndDisability lifeAndDisability, com.uhc.schema.model.eligibility.common.DescriptionType marketSegment, com.uhc.schema.model.eligibility.common.DescriptionType marketType, java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> medicareAndRetirementMembershipProfiles, java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> medicareAndRetirementPassportProfiles, java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> memberDeliveryPreferences, java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> memberEnrollmentOtherIdentifiers, java.lang.CharSequence memberGroupContractPlanOptionId, java.lang.CharSequence memberMarketNumber, java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> membershipGroupData, java.lang.CharSequence membershipIdentifier, com.uhc.schema.model.eligibility.Organization organization, java.lang.CharSequence organizationIdentifier, java.lang.CharSequence organizationPopulationGroupNumber, java.lang.CharSequence packageBenefitPlanCode, java.lang.CharSequence packageOptionDescription, java.lang.CharSequence packageOptionId, java.lang.CharSequence panelNumber, java.lang.CharSequence passportGroupNumber, java.lang.CharSequence parentMembershipIdentifier, java.lang.CharSequence pcpMedicalDirectorApprovalIndicator, com.uhc.schema.model.eligibility.Plan plan, java.lang.CharSequence planCode, java.lang.CharSequence priorHealthCoverageMonths, com.uhc.schema.model.eligibility.Product product, java.lang.CharSequence productCode, java.lang.CharSequence qmcsoIndicator, java.lang.CharSequence recordType, com.uhc.schema.model.eligibility.common.DescriptionType relationshipType, com.uhc.schema.model.eligibility.common.DescriptionType revenueArrangement, java.lang.CharSequence riskGroupId, java.lang.CharSequence riskGroupName, java.lang.CharSequence salesAgentIdentifier, com.uhc.schema.model.eligibility.common.Security security, java.lang.CharSequence segmentId, java.lang.CharSequence site, java.lang.CharSequence situsState, com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes sourceSystemAttributes, java.lang.CharSequence sourceSystemCode, java.lang.CharSequence sourceTerminationDate, java.lang.CharSequence subscriberEnrolleeSourceId, java.lang.CharSequence subscriberIndividualIdentifier, java.lang.CharSequence subscriberMemberFacingIdentifier, java.lang.CharSequence subscriberSocialSecurityNumber, java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> subsidizedInsuredPlans, java.lang.CharSequence terminationDate, com.uhc.schema.model.eligibility.common.DescriptionType terminationReason) {
    this.active = active;
    this.applicationIdentifier = applicationIdentifier;
    this.areaGroup = areaGroup;
    this.benefitStatus = benefitStatus;
    this.billingSubgroupNumber = billingSubgroupNumber;
    this.bookOfBusiness = bookOfBusiness;
    this.brandIdentifier = brandIdentifier;
    this.brandingEntity = brandingEntity;
    this.brandName = brandName;
    this.bundleOptionPlans = bundleOptionPlans;
    this.business = business;
    this.businessSegment = businessSegment;
    this.calap = calap;
    this.cancelReasonType = cancelReasonType;
    this.claimSystemType = claimSystemType;
    this.coverageLevel = coverageLevel;
    this.coveragePaidThruDate = coveragePaidThruDate;
    this.coveragePaidThruReason = coveragePaidThruReason;
    this.coverageStatus = coverageStatus;
    this.creationDate = creationDate;
    this.customerAccount = customerAccount;
    this.customerAccountIdentifier = customerAccountIdentifier;
    this.customerPurchaseEffectiveDate = customerPurchaseEffectiveDate;
    this.customerPurchaseIdentifier = customerPurchaseIdentifier;
    this.customerPurchaseOptionIdentifier = customerPurchaseOptionIdentifier;
    this.customerPurchaseStatus = customerPurchaseStatus;
    this.customerPurchaseTerminationDate = customerPurchaseTerminationDate;
    this.customerPurchaseType = customerPurchaseType;
    this.customerPurchaseVersionNumber = customerPurchaseVersionNumber;
    this.differentFamilyMemberAddressIndicator = differentFamilyMemberAddressIndicator;
    this.divisionCode = divisionCode;
    this.distributionChannel = distributionChannel;
    this.effectiveDate = effectiveDate;
    this.eligibilityGracePeriodThruDate = eligibilityGracePeriodThruDate;
    this.eligibilitySystemType = eligibilitySystemType;
    this.employerIdentifier = employerIdentifier;
    this.enrolleeMemberFacingIdentifier = enrolleeMemberFacingIdentifier;
    this.enrolleeSourceCode = enrolleeSourceCode;
    this.enrolleeSourceId = enrolleeSourceId;
    this.erisaIndicator = erisaIndicator;
    this.familyLastUpdatedTimestamp = familyLastUpdatedTimestamp;
    this.financialAccount = financialAccount;
    this.hContractId = hContractId;
    this.healthPlanCode = healthPlanCode;
    this.healthProgramCode = healthProgramCode;
    this.holdReason = holdReason;
    this.individualIdentifier = individualIdentifier;
    this.individualTerminationDate = individualTerminationDate;
    this.lastPremiumPaidDate = lastPremiumPaidDate;
    this.lastUpdated = lastUpdated;
    this.lateEnrollCode = lateEnrollCode;
    this.legacyAttributes = legacyAttributes;
    this.lifeAndDisability = lifeAndDisability;
    this.marketSegment = marketSegment;
    this.marketType = marketType;
    this.medicareAndRetirementMembershipProfiles = medicareAndRetirementMembershipProfiles;
    this.medicareAndRetirementPassportProfiles = medicareAndRetirementPassportProfiles;
    this.memberDeliveryPreferences = memberDeliveryPreferences;
    this.memberEnrollmentOtherIdentifiers = memberEnrollmentOtherIdentifiers;
    this.memberGroupContractPlanOptionId = memberGroupContractPlanOptionId;
    this.memberMarketNumber = memberMarketNumber;
    this.membershipGroupData = membershipGroupData;
    this.membershipIdentifier = membershipIdentifier;
    this.organization = organization;
    this.organizationIdentifier = organizationIdentifier;
    this.organizationPopulationGroupNumber = organizationPopulationGroupNumber;
    this.packageBenefitPlanCode = packageBenefitPlanCode;
    this.packageOptionDescription = packageOptionDescription;
    this.packageOptionId = packageOptionId;
    this.panelNumber = panelNumber;
    this.passportGroupNumber = passportGroupNumber;
    this.parentMembershipIdentifier = parentMembershipIdentifier;
    this.pcpMedicalDirectorApprovalIndicator = pcpMedicalDirectorApprovalIndicator;
    this.plan = plan;
    this.planCode = planCode;
    this.priorHealthCoverageMonths = priorHealthCoverageMonths;
    this.product = product;
    this.productCode = productCode;
    this.qmcsoIndicator = qmcsoIndicator;
    this.recordType = recordType;
    this.relationshipType = relationshipType;
    this.revenueArrangement = revenueArrangement;
    this.riskGroupId = riskGroupId;
    this.riskGroupName = riskGroupName;
    this.salesAgentIdentifier = salesAgentIdentifier;
    this.security = security;
    this.segmentId = segmentId;
    this.site = site;
    this.situsState = situsState;
    this.sourceSystemAttributes = sourceSystemAttributes;
    this.sourceSystemCode = sourceSystemCode;
    this.sourceTerminationDate = sourceTerminationDate;
    this.subscriberEnrolleeSourceId = subscriberEnrolleeSourceId;
    this.subscriberIndividualIdentifier = subscriberIndividualIdentifier;
    this.subscriberMemberFacingIdentifier = subscriberMemberFacingIdentifier;
    this.subscriberSocialSecurityNumber = subscriberSocialSecurityNumber;
    this.subsidizedInsuredPlans = subsidizedInsuredPlans;
    this.terminationDate = terminationDate;
    this.terminationReason = terminationReason;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return active;
    case 1: return applicationIdentifier;
    case 2: return areaGroup;
    case 3: return benefitStatus;
    case 4: return billingSubgroupNumber;
    case 5: return bookOfBusiness;
    case 6: return brandIdentifier;
    case 7: return brandingEntity;
    case 8: return brandName;
    case 9: return bundleOptionPlans;
    case 10: return business;
    case 11: return businessSegment;
    case 12: return calap;
    case 13: return cancelReasonType;
    case 14: return claimSystemType;
    case 15: return coverageLevel;
    case 16: return coveragePaidThruDate;
    case 17: return coveragePaidThruReason;
    case 18: return coverageStatus;
    case 19: return creationDate;
    case 20: return customerAccount;
    case 21: return customerAccountIdentifier;
    case 22: return customerPurchaseEffectiveDate;
    case 23: return customerPurchaseIdentifier;
    case 24: return customerPurchaseOptionIdentifier;
    case 25: return customerPurchaseStatus;
    case 26: return customerPurchaseTerminationDate;
    case 27: return customerPurchaseType;
    case 28: return customerPurchaseVersionNumber;
    case 29: return differentFamilyMemberAddressIndicator;
    case 30: return divisionCode;
    case 31: return distributionChannel;
    case 32: return effectiveDate;
    case 33: return eligibilityGracePeriodThruDate;
    case 34: return eligibilitySystemType;
    case 35: return employerIdentifier;
    case 36: return enrolleeMemberFacingIdentifier;
    case 37: return enrolleeSourceCode;
    case 38: return enrolleeSourceId;
    case 39: return erisaIndicator;
    case 40: return familyLastUpdatedTimestamp;
    case 41: return financialAccount;
    case 42: return hContractId;
    case 43: return healthPlanCode;
    case 44: return healthProgramCode;
    case 45: return holdReason;
    case 46: return individualIdentifier;
    case 47: return individualTerminationDate;
    case 48: return lastPremiumPaidDate;
    case 49: return lastUpdated;
    case 50: return lateEnrollCode;
    case 51: return legacyAttributes;
    case 52: return lifeAndDisability;
    case 53: return marketSegment;
    case 54: return marketType;
    case 55: return medicareAndRetirementMembershipProfiles;
    case 56: return medicareAndRetirementPassportProfiles;
    case 57: return memberDeliveryPreferences;
    case 58: return memberEnrollmentOtherIdentifiers;
    case 59: return memberGroupContractPlanOptionId;
    case 60: return memberMarketNumber;
    case 61: return membershipGroupData;
    case 62: return membershipIdentifier;
    case 63: return organization;
    case 64: return organizationIdentifier;
    case 65: return organizationPopulationGroupNumber;
    case 66: return packageBenefitPlanCode;
    case 67: return packageOptionDescription;
    case 68: return packageOptionId;
    case 69: return panelNumber;
    case 70: return passportGroupNumber;
    case 71: return parentMembershipIdentifier;
    case 72: return pcpMedicalDirectorApprovalIndicator;
    case 73: return plan;
    case 74: return planCode;
    case 75: return priorHealthCoverageMonths;
    case 76: return product;
    case 77: return productCode;
    case 78: return qmcsoIndicator;
    case 79: return recordType;
    case 80: return relationshipType;
    case 81: return revenueArrangement;
    case 82: return riskGroupId;
    case 83: return riskGroupName;
    case 84: return salesAgentIdentifier;
    case 85: return security;
    case 86: return segmentId;
    case 87: return site;
    case 88: return situsState;
    case 89: return sourceSystemAttributes;
    case 90: return sourceSystemCode;
    case 91: return sourceTerminationDate;
    case 92: return subscriberEnrolleeSourceId;
    case 93: return subscriberIndividualIdentifier;
    case 94: return subscriberMemberFacingIdentifier;
    case 95: return subscriberSocialSecurityNumber;
    case 96: return subsidizedInsuredPlans;
    case 97: return terminationDate;
    case 98: return terminationReason;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: active = (java.lang.Boolean)value$; break;
    case 1: applicationIdentifier = (java.lang.CharSequence)value$; break;
    case 2: areaGroup = (java.lang.CharSequence)value$; break;
    case 3: benefitStatus = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 4: billingSubgroupNumber = (java.lang.CharSequence)value$; break;
    case 5: bookOfBusiness = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 6: brandIdentifier = (java.lang.CharSequence)value$; break;
    case 7: brandingEntity = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 8: brandName = (java.lang.CharSequence)value$; break;
    case 9: bundleOptionPlans = (java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan>)value$; break;
    case 10: business = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 11: businessSegment = (java.lang.CharSequence)value$; break;
    case 12: calap = (com.uhc.schema.model.eligibility.membership.CALAP)value$; break;
    case 13: cancelReasonType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 14: claimSystemType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 15: coverageLevel = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 16: coveragePaidThruDate = (java.lang.CharSequence)value$; break;
    case 17: coveragePaidThruReason = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 18: coverageStatus = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 19: creationDate = (java.lang.CharSequence)value$; break;
    case 20: customerAccount = (com.uhc.schema.model.eligibility.CustomerAccount)value$; break;
    case 21: customerAccountIdentifier = (java.lang.CharSequence)value$; break;
    case 22: customerPurchaseEffectiveDate = (java.lang.CharSequence)value$; break;
    case 23: customerPurchaseIdentifier = (java.lang.CharSequence)value$; break;
    case 24: customerPurchaseOptionIdentifier = (java.lang.CharSequence)value$; break;
    case 25: customerPurchaseStatus = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 26: customerPurchaseTerminationDate = (java.lang.CharSequence)value$; break;
    case 27: customerPurchaseType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 28: customerPurchaseVersionNumber = (java.lang.CharSequence)value$; break;
    case 29: differentFamilyMemberAddressIndicator = (java.lang.CharSequence)value$; break;
    case 30: divisionCode = (java.lang.CharSequence)value$; break;
    case 31: distributionChannel = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 32: effectiveDate = (java.lang.CharSequence)value$; break;
    case 33: eligibilityGracePeriodThruDate = (java.lang.CharSequence)value$; break;
    case 34: eligibilitySystemType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 35: employerIdentifier = (java.lang.CharSequence)value$; break;
    case 36: enrolleeMemberFacingIdentifier = (java.lang.CharSequence)value$; break;
    case 37: enrolleeSourceCode = (java.lang.CharSequence)value$; break;
    case 38: enrolleeSourceId = (java.lang.CharSequence)value$; break;
    case 39: erisaIndicator = (java.lang.CharSequence)value$; break;
    case 40: familyLastUpdatedTimestamp = (java.lang.CharSequence)value$; break;
    case 41: financialAccount = (com.uhc.schema.model.eligibility.membership.FinancialAccount)value$; break;
    case 42: hContractId = (java.lang.CharSequence)value$; break;
    case 43: healthPlanCode = (java.lang.CharSequence)value$; break;
    case 44: healthProgramCode = (java.lang.CharSequence)value$; break;
    case 45: holdReason = (java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason>)value$; break;
    case 46: individualIdentifier = (java.lang.CharSequence)value$; break;
    case 47: individualTerminationDate = (java.lang.CharSequence)value$; break;
    case 48: lastPremiumPaidDate = (java.lang.CharSequence)value$; break;
    case 49: lastUpdated = (com.uhc.schema.model.eligibility.common.LastUpdated)value$; break;
    case 50: lateEnrollCode = (java.lang.CharSequence)value$; break;
    case 51: legacyAttributes = (com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes)value$; break;
    case 52: lifeAndDisability = (com.uhc.schema.model.eligibility.membership.LifeAndDisability)value$; break;
    case 53: marketSegment = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 54: marketType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 55: medicareAndRetirementMembershipProfiles = (java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile>)value$; break;
    case 56: medicareAndRetirementPassportProfiles = (java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile>)value$; break;
    case 57: memberDeliveryPreferences = (java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference>)value$; break;
    case 58: memberEnrollmentOtherIdentifiers = (java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier>)value$; break;
    case 59: memberGroupContractPlanOptionId = (java.lang.CharSequence)value$; break;
    case 60: memberMarketNumber = (java.lang.CharSequence)value$; break;
    case 61: membershipGroupData = (java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData>)value$; break;
    case 62: membershipIdentifier = (java.lang.CharSequence)value$; break;
    case 63: organization = (com.uhc.schema.model.eligibility.Organization)value$; break;
    case 64: organizationIdentifier = (java.lang.CharSequence)value$; break;
    case 65: organizationPopulationGroupNumber = (java.lang.CharSequence)value$; break;
    case 66: packageBenefitPlanCode = (java.lang.CharSequence)value$; break;
    case 67: packageOptionDescription = (java.lang.CharSequence)value$; break;
    case 68: packageOptionId = (java.lang.CharSequence)value$; break;
    case 69: panelNumber = (java.lang.CharSequence)value$; break;
    case 70: passportGroupNumber = (java.lang.CharSequence)value$; break;
    case 71: parentMembershipIdentifier = (java.lang.CharSequence)value$; break;
    case 72: pcpMedicalDirectorApprovalIndicator = (java.lang.CharSequence)value$; break;
    case 73: plan = (com.uhc.schema.model.eligibility.Plan)value$; break;
    case 74: planCode = (java.lang.CharSequence)value$; break;
    case 75: priorHealthCoverageMonths = (java.lang.CharSequence)value$; break;
    case 76: product = (com.uhc.schema.model.eligibility.Product)value$; break;
    case 77: productCode = (java.lang.CharSequence)value$; break;
    case 78: qmcsoIndicator = (java.lang.CharSequence)value$; break;
    case 79: recordType = (java.lang.CharSequence)value$; break;
    case 80: relationshipType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 81: revenueArrangement = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 82: riskGroupId = (java.lang.CharSequence)value$; break;
    case 83: riskGroupName = (java.lang.CharSequence)value$; break;
    case 84: salesAgentIdentifier = (java.lang.CharSequence)value$; break;
    case 85: security = (com.uhc.schema.model.eligibility.common.Security)value$; break;
    case 86: segmentId = (java.lang.CharSequence)value$; break;
    case 87: site = (java.lang.CharSequence)value$; break;
    case 88: situsState = (java.lang.CharSequence)value$; break;
    case 89: sourceSystemAttributes = (com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes)value$; break;
    case 90: sourceSystemCode = (java.lang.CharSequence)value$; break;
    case 91: sourceTerminationDate = (java.lang.CharSequence)value$; break;
    case 92: subscriberEnrolleeSourceId = (java.lang.CharSequence)value$; break;
    case 93: subscriberIndividualIdentifier = (java.lang.CharSequence)value$; break;
    case 94: subscriberMemberFacingIdentifier = (java.lang.CharSequence)value$; break;
    case 95: subscriberSocialSecurityNumber = (java.lang.CharSequence)value$; break;
    case 96: subsidizedInsuredPlans = (java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan>)value$; break;
    case 97: terminationDate = (java.lang.CharSequence)value$; break;
    case 98: terminationReason = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public java.lang.Boolean getActive() {
    return active;
  }

  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'applicationIdentifier' field.
   * @return The value of the 'applicationIdentifier' field.
   */
  public java.lang.CharSequence getApplicationIdentifier() {
    return applicationIdentifier;
  }

  /**
   * Sets the value of the 'applicationIdentifier' field.
   * @param value the value to set.
   */
  public void setApplicationIdentifier(java.lang.CharSequence value) {
    this.applicationIdentifier = value;
  }

  /**
   * Gets the value of the 'areaGroup' field.
   * @return The value of the 'areaGroup' field.
   */
  public java.lang.CharSequence getAreaGroup() {
    return areaGroup;
  }

  /**
   * Sets the value of the 'areaGroup' field.
   * @param value the value to set.
   */
  public void setAreaGroup(java.lang.CharSequence value) {
    this.areaGroup = value;
  }

  /**
   * Gets the value of the 'benefitStatus' field.
   * @return The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getBenefitStatus() {
    return benefitStatus;
  }

  /**
   * Sets the value of the 'benefitStatus' field.
   * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
   * @param value the value to set.
   */
  public void setBenefitStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.benefitStatus = value;
  }

  /**
   * Gets the value of the 'billingSubgroupNumber' field.
   * @return The billing subgroup number for this membership record.
   */
  public java.lang.CharSequence getBillingSubgroupNumber() {
    return billingSubgroupNumber;
  }

  /**
   * Sets the value of the 'billingSubgroupNumber' field.
   * The billing subgroup number for this membership record.
   * @param value the value to set.
   */
  public void setBillingSubgroupNumber(java.lang.CharSequence value) {
    this.billingSubgroupNumber = value;
  }

  /**
   * Gets the value of the 'bookOfBusiness' field.
   * @return A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getBookOfBusiness() {
    return bookOfBusiness;
  }

  /**
   * Sets the value of the 'bookOfBusiness' field.
   * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
   * @param value the value to set.
   */
  public void setBookOfBusiness(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.bookOfBusiness = value;
  }

  /**
   * Gets the value of the 'brandIdentifier' field.
   * @return The value of the 'brandIdentifier' field.
   */
  public java.lang.CharSequence getBrandIdentifier() {
    return brandIdentifier;
  }

  /**
   * Sets the value of the 'brandIdentifier' field.
   * @param value the value to set.
   */
  public void setBrandIdentifier(java.lang.CharSequence value) {
    this.brandIdentifier = value;
  }

  /**
   * Gets the value of the 'brandingEntity' field.
   * @return Code and description for the membership branding entity.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getBrandingEntity() {
    return brandingEntity;
  }

  /**
   * Sets the value of the 'brandingEntity' field.
   * Code and description for the membership branding entity.
   * @param value the value to set.
   */
  public void setBrandingEntity(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.brandingEntity = value;
  }

  /**
   * Gets the value of the 'brandName' field.
   * @return The value of the 'brandName' field.
   */
  public java.lang.CharSequence getBrandName() {
    return brandName;
  }

  /**
   * Sets the value of the 'brandName' field.
   * @param value the value to set.
   */
  public void setBrandName(java.lang.CharSequence value) {
    this.brandName = value;
  }

  /**
   * Gets the value of the 'bundleOptionPlans' field.
   * @return The value of the 'bundleOptionPlans' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> getBundleOptionPlans() {
    return bundleOptionPlans;
  }

  /**
   * Sets the value of the 'bundleOptionPlans' field.
   * @param value the value to set.
   */
  public void setBundleOptionPlans(java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> value) {
    this.bundleOptionPlans = value;
  }

  /**
   * Gets the value of the 'business' field.
   * @return Highest level business entity. E.g., Optum or UHC.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getBusiness() {
    return business;
  }

  /**
   * Sets the value of the 'business' field.
   * Highest level business entity. E.g., Optum or UHC.
   * @param value the value to set.
   */
  public void setBusiness(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.business = value;
  }

  /**
   * Gets the value of the 'businessSegment' field.
   * @return The value of the 'businessSegment' field.
   */
  public java.lang.CharSequence getBusinessSegment() {
    return businessSegment;
  }

  /**
   * Sets the value of the 'businessSegment' field.
   * @param value the value to set.
   */
  public void setBusinessSegment(java.lang.CharSequence value) {
    this.businessSegment = value;
  }

  /**
   * Gets the value of the 'calap' field.
   * @return The value of the 'calap' field.
   */
  public com.uhc.schema.model.eligibility.membership.CALAP getCalap() {
    return calap;
  }

  /**
   * Sets the value of the 'calap' field.
   * @param value the value to set.
   */
  public void setCalap(com.uhc.schema.model.eligibility.membership.CALAP value) {
    this.calap = value;
  }

  /**
   * Gets the value of the 'cancelReasonType' field.
   * @return Reason coverage was cancelled.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCancelReasonType() {
    return cancelReasonType;
  }

  /**
   * Sets the value of the 'cancelReasonType' field.
   * Reason coverage was cancelled.
   * @param value the value to set.
   */
  public void setCancelReasonType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.cancelReasonType = value;
  }

  /**
   * Gets the value of the 'claimSystemType' field.
   * @return The value of the 'claimSystemType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getClaimSystemType() {
    return claimSystemType;
  }

  /**
   * Sets the value of the 'claimSystemType' field.
   * @param value the value to set.
   */
  public void setClaimSystemType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.claimSystemType = value;
  }

  /**
   * Gets the value of the 'coverageLevel' field.
   * @return The value of the 'coverageLevel' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCoverageLevel() {
    return coverageLevel;
  }

  /**
   * Sets the value of the 'coverageLevel' field.
   * @param value the value to set.
   */
  public void setCoverageLevel(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.coverageLevel = value;
  }

  /**
   * Gets the value of the 'coveragePaidThruDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getCoveragePaidThruDate() {
    return coveragePaidThruDate;
  }

  /**
   * Sets the value of the 'coveragePaidThruDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setCoveragePaidThruDate(java.lang.CharSequence value) {
    this.coveragePaidThruDate = value;
  }

  /**
   * Gets the value of the 'coveragePaidThruReason' field.
   * @return The value of the 'coveragePaidThruReason' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCoveragePaidThruReason() {
    return coveragePaidThruReason;
  }

  /**
   * Sets the value of the 'coveragePaidThruReason' field.
   * @param value the value to set.
   */
  public void setCoveragePaidThruReason(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.coveragePaidThruReason = value;
  }

  /**
   * Gets the value of the 'coverageStatus' field.
   * @return The value of the 'coverageStatus' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCoverageStatus() {
    return coverageStatus;
  }

  /**
   * Sets the value of the 'coverageStatus' field.
   * @param value the value to set.
   */
  public void setCoverageStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.coverageStatus = value;
  }

  /**
   * Gets the value of the 'creationDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getCreationDate() {
    return creationDate;
  }

  /**
   * Sets the value of the 'creationDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setCreationDate(java.lang.CharSequence value) {
    this.creationDate = value;
  }

  /**
   * Gets the value of the 'customerAccount' field.
   * @return The value of the 'customerAccount' field.
   */
  public com.uhc.schema.model.eligibility.CustomerAccount getCustomerAccount() {
    return customerAccount;
  }

  /**
   * Sets the value of the 'customerAccount' field.
   * @param value the value to set.
   */
  public void setCustomerAccount(com.uhc.schema.model.eligibility.CustomerAccount value) {
    this.customerAccount = value;
  }

  /**
   * Gets the value of the 'customerAccountIdentifier' field.
   * @return The value of the 'customerAccountIdentifier' field.
   */
  public java.lang.CharSequence getCustomerAccountIdentifier() {
    return customerAccountIdentifier;
  }

  /**
   * Sets the value of the 'customerAccountIdentifier' field.
   * @param value the value to set.
   */
  public void setCustomerAccountIdentifier(java.lang.CharSequence value) {
    this.customerAccountIdentifier = value;
  }

  /**
   * Gets the value of the 'customerPurchaseEffectiveDate' field.
   * @return Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getCustomerPurchaseEffectiveDate() {
    return customerPurchaseEffectiveDate;
  }

  /**
   * Sets the value of the 'customerPurchaseEffectiveDate' field.
   * Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setCustomerPurchaseEffectiveDate(java.lang.CharSequence value) {
    this.customerPurchaseEffectiveDate = value;
  }

  /**
   * Gets the value of the 'customerPurchaseIdentifier' field.
   * @return The value of the 'customerPurchaseIdentifier' field.
   */
  public java.lang.CharSequence getCustomerPurchaseIdentifier() {
    return customerPurchaseIdentifier;
  }

  /**
   * Sets the value of the 'customerPurchaseIdentifier' field.
   * @param value the value to set.
   */
  public void setCustomerPurchaseIdentifier(java.lang.CharSequence value) {
    this.customerPurchaseIdentifier = value;
  }

  /**
   * Gets the value of the 'customerPurchaseOptionIdentifier' field.
   * @return Identifier for a group of plan purchases.
   */
  public java.lang.CharSequence getCustomerPurchaseOptionIdentifier() {
    return customerPurchaseOptionIdentifier;
  }

  /**
   * Sets the value of the 'customerPurchaseOptionIdentifier' field.
   * Identifier for a group of plan purchases.
   * @param value the value to set.
   */
  public void setCustomerPurchaseOptionIdentifier(java.lang.CharSequence value) {
    this.customerPurchaseOptionIdentifier = value;
  }

  /**
   * Gets the value of the 'customerPurchaseStatus' field.
   * @return Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCustomerPurchaseStatus() {
    return customerPurchaseStatus;
  }

  /**
   * Sets the value of the 'customerPurchaseStatus' field.
   * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
   * @param value the value to set.
   */
  public void setCustomerPurchaseStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.customerPurchaseStatus = value;
  }

  /**
   * Gets the value of the 'customerPurchaseTerminationDate' field.
   * @return Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getCustomerPurchaseTerminationDate() {
    return customerPurchaseTerminationDate;
  }

  /**
   * Sets the value of the 'customerPurchaseTerminationDate' field.
   * Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setCustomerPurchaseTerminationDate(java.lang.CharSequence value) {
    this.customerPurchaseTerminationDate = value;
  }

  /**
   * Gets the value of the 'customerPurchaseType' field.
   * @return Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCustomerPurchaseType() {
    return customerPurchaseType;
  }

  /**
   * Sets the value of the 'customerPurchaseType' field.
   * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
   * @param value the value to set.
   */
  public void setCustomerPurchaseType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.customerPurchaseType = value;
  }

  /**
   * Gets the value of the 'customerPurchaseVersionNumber' field.
   * @return Current version number of the Customer Purchase for this membership record.
   */
  public java.lang.CharSequence getCustomerPurchaseVersionNumber() {
    return customerPurchaseVersionNumber;
  }

  /**
   * Sets the value of the 'customerPurchaseVersionNumber' field.
   * Current version number of the Customer Purchase for this membership record.
   * @param value the value to set.
   */
  public void setCustomerPurchaseVersionNumber(java.lang.CharSequence value) {
    this.customerPurchaseVersionNumber = value;
  }

  /**
   * Gets the value of the 'differentFamilyMemberAddressIndicator' field.
   * @return Indicates that this member's address is different from the rest of the family.
   */
  public java.lang.CharSequence getDifferentFamilyMemberAddressIndicator() {
    return differentFamilyMemberAddressIndicator;
  }

  /**
   * Sets the value of the 'differentFamilyMemberAddressIndicator' field.
   * Indicates that this member's address is different from the rest of the family.
   * @param value the value to set.
   */
  public void setDifferentFamilyMemberAddressIndicator(java.lang.CharSequence value) {
    this.differentFamilyMemberAddressIndicator = value;
  }

  /**
   * Gets the value of the 'divisionCode' field.
   * @return The value of the 'divisionCode' field.
   */
  public java.lang.CharSequence getDivisionCode() {
    return divisionCode;
  }

  /**
   * Sets the value of the 'divisionCode' field.
   * @param value the value to set.
   */
  public void setDivisionCode(java.lang.CharSequence value) {
    this.divisionCode = value;
  }

  /**
   * Gets the value of the 'distributionChannel' field.
   * @return A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getDistributionChannel() {
    return distributionChannel;
  }

  /**
   * Sets the value of the 'distributionChannel' field.
   * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
   * @param value the value to set.
   */
  public void setDistributionChannel(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.distributionChannel = value;
  }

  /**
   * Gets the value of the 'effectiveDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effectiveDate;
  }

  /**
   * Sets the value of the 'effectiveDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effectiveDate = value;
  }

  /**
   * Gets the value of the 'eligibilityGracePeriodThruDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEligibilityGracePeriodThruDate() {
    return eligibilityGracePeriodThruDate;
  }

  /**
   * Sets the value of the 'eligibilityGracePeriodThruDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEligibilityGracePeriodThruDate(java.lang.CharSequence value) {
    this.eligibilityGracePeriodThruDate = value;
  }

  /**
   * Gets the value of the 'eligibilitySystemType' field.
   * @return The value of the 'eligibilitySystemType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getEligibilitySystemType() {
    return eligibilitySystemType;
  }

  /**
   * Sets the value of the 'eligibilitySystemType' field.
   * @param value the value to set.
   */
  public void setEligibilitySystemType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.eligibilitySystemType = value;
  }

  /**
   * Gets the value of the 'employerIdentifier' field.
   * @return The value of the 'employerIdentifier' field.
   */
  public java.lang.CharSequence getEmployerIdentifier() {
    return employerIdentifier;
  }

  /**
   * Sets the value of the 'employerIdentifier' field.
   * @param value the value to set.
   */
  public void setEmployerIdentifier(java.lang.CharSequence value) {
    this.employerIdentifier = value;
  }

  /**
   * Gets the value of the 'enrolleeMemberFacingIdentifier' field.
   * @return External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
   */
  public java.lang.CharSequence getEnrolleeMemberFacingIdentifier() {
    return enrolleeMemberFacingIdentifier;
  }

  /**
   * Sets the value of the 'enrolleeMemberFacingIdentifier' field.
   * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
   * @param value the value to set.
   */
  public void setEnrolleeMemberFacingIdentifier(java.lang.CharSequence value) {
    this.enrolleeMemberFacingIdentifier = value;
  }

  /**
   * Gets the value of the 'enrolleeSourceCode' field.
   * @return The value of the 'enrolleeSourceCode' field.
   */
  public java.lang.CharSequence getEnrolleeSourceCode() {
    return enrolleeSourceCode;
  }

  /**
   * Sets the value of the 'enrolleeSourceCode' field.
   * @param value the value to set.
   */
  public void setEnrolleeSourceCode(java.lang.CharSequence value) {
    this.enrolleeSourceCode = value;
  }

  /**
   * Gets the value of the 'enrolleeSourceId' field.
   * @return The value of the 'enrolleeSourceId' field.
   */
  public java.lang.CharSequence getEnrolleeSourceId() {
    return enrolleeSourceId;
  }

  /**
   * Sets the value of the 'enrolleeSourceId' field.
   * @param value the value to set.
   */
  public void setEnrolleeSourceId(java.lang.CharSequence value) {
    this.enrolleeSourceId = value;
  }

  /**
   * Gets the value of the 'erisaIndicator' field.
   * @return Employee Retirement Income Security Act (ERISA) Indicator.
   */
  public java.lang.CharSequence getErisaIndicator() {
    return erisaIndicator;
  }

  /**
   * Sets the value of the 'erisaIndicator' field.
   * Employee Retirement Income Security Act (ERISA) Indicator.
   * @param value the value to set.
   */
  public void setErisaIndicator(java.lang.CharSequence value) {
    this.erisaIndicator = value;
  }

  /**
   * Gets the value of the 'familyLastUpdatedTimestamp' field.
   * @return The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   */
  public java.lang.CharSequence getFamilyLastUpdatedTimestamp() {
    return familyLastUpdatedTimestamp;
  }

  /**
   * Sets the value of the 'familyLastUpdatedTimestamp' field.
   * The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   * @param value the value to set.
   */
  public void setFamilyLastUpdatedTimestamp(java.lang.CharSequence value) {
    this.familyLastUpdatedTimestamp = value;
  }

  /**
   * Gets the value of the 'financialAccount' field.
   * @return The value of the 'financialAccount' field.
   */
  public com.uhc.schema.model.eligibility.membership.FinancialAccount getFinancialAccount() {
    return financialAccount;
  }

  /**
   * Sets the value of the 'financialAccount' field.
   * @param value the value to set.
   */
  public void setFinancialAccount(com.uhc.schema.model.eligibility.membership.FinancialAccount value) {
    this.financialAccount = value;
  }

  /**
   * Gets the value of the 'hContractId' field.
   * @return The value of the 'hContractId' field.
   */
  public java.lang.CharSequence getHContractId() {
    return hContractId;
  }

  /**
   * Sets the value of the 'hContractId' field.
   * @param value the value to set.
   */
  public void setHContractId(java.lang.CharSequence value) {
    this.hContractId = value;
  }

  /**
   * Gets the value of the 'healthPlanCode' field.
   * @return The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
   */
  public java.lang.CharSequence getHealthPlanCode() {
    return healthPlanCode;
  }

  /**
   * Sets the value of the 'healthPlanCode' field.
   * The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
   * @param value the value to set.
   */
  public void setHealthPlanCode(java.lang.CharSequence value) {
    this.healthPlanCode = value;
  }

  /**
   * Gets the value of the 'healthProgramCode' field.
   * @return The value of the 'healthProgramCode' field.
   */
  public java.lang.CharSequence getHealthProgramCode() {
    return healthProgramCode;
  }

  /**
   * Sets the value of the 'healthProgramCode' field.
   * @param value the value to set.
   */
  public void setHealthProgramCode(java.lang.CharSequence value) {
    this.healthProgramCode = value;
  }

  /**
   * Gets the value of the 'holdReason' field.
   * @return The value of the 'holdReason' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> getHoldReason() {
    return holdReason;
  }

  /**
   * Sets the value of the 'holdReason' field.
   * @param value the value to set.
   */
  public void setHoldReason(java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> value) {
    this.holdReason = value;
  }

  /**
   * Gets the value of the 'individualIdentifier' field.
   * @return The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
   */
  public java.lang.CharSequence getIndividualIdentifier() {
    return individualIdentifier;
  }

  /**
   * Sets the value of the 'individualIdentifier' field.
   * The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
   * @param value the value to set.
   */
  public void setIndividualIdentifier(java.lang.CharSequence value) {
    this.individualIdentifier = value;
  }

  /**
   * Gets the value of the 'individualTerminationDate' field.
   * @return Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getIndividualTerminationDate() {
    return individualTerminationDate;
  }

  /**
   * Sets the value of the 'individualTerminationDate' field.
   * Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setIndividualTerminationDate(java.lang.CharSequence value) {
    this.individualTerminationDate = value;
  }

  /**
   * Gets the value of the 'lastPremiumPaidDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getLastPremiumPaidDate() {
    return lastPremiumPaidDate;
  }

  /**
   * Sets the value of the 'lastPremiumPaidDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setLastPremiumPaidDate(java.lang.CharSequence value) {
    this.lastPremiumPaidDate = value;
  }

  /**
   * Gets the value of the 'lastUpdated' field.
   * @return The value of the 'lastUpdated' field.
   */
  public com.uhc.schema.model.eligibility.common.LastUpdated getLastUpdated() {
    return lastUpdated;
  }

  /**
   * Sets the value of the 'lastUpdated' field.
   * @param value the value to set.
   */
  public void setLastUpdated(com.uhc.schema.model.eligibility.common.LastUpdated value) {
    this.lastUpdated = value;
  }

  /**
   * Gets the value of the 'lateEnrollCode' field.
   * @return The value of the 'lateEnrollCode' field.
   */
  public java.lang.CharSequence getLateEnrollCode() {
    return lateEnrollCode;
  }

  /**
   * Sets the value of the 'lateEnrollCode' field.
   * @param value the value to set.
   */
  public void setLateEnrollCode(java.lang.CharSequence value) {
    this.lateEnrollCode = value;
  }

  /**
   * Gets the value of the 'legacyAttributes' field.
   * @return The value of the 'legacyAttributes' field.
   */
  public com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes getLegacyAttributes() {
    return legacyAttributes;
  }

  /**
   * Sets the value of the 'legacyAttributes' field.
   * @param value the value to set.
   */
  public void setLegacyAttributes(com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes value) {
    this.legacyAttributes = value;
  }

  /**
   * Gets the value of the 'lifeAndDisability' field.
   * @return The value of the 'lifeAndDisability' field.
   */
  public com.uhc.schema.model.eligibility.membership.LifeAndDisability getLifeAndDisability() {
    return lifeAndDisability;
  }

  /**
   * Sets the value of the 'lifeAndDisability' field.
   * @param value the value to set.
   */
  public void setLifeAndDisability(com.uhc.schema.model.eligibility.membership.LifeAndDisability value) {
    this.lifeAndDisability = value;
  }

  /**
   * Gets the value of the 'marketSegment' field.
   * @return Market segment for the coverage.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getMarketSegment() {
    return marketSegment;
  }

  /**
   * Sets the value of the 'marketSegment' field.
   * Market segment for the coverage.
   * @param value the value to set.
   */
  public void setMarketSegment(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.marketSegment = value;
  }

  /**
   * Gets the value of the 'marketType' field.
   * @return The value of the 'marketType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getMarketType() {
    return marketType;
  }

  /**
   * Sets the value of the 'marketType' field.
   * @param value the value to set.
   */
  public void setMarketType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.marketType = value;
  }

  /**
   * Gets the value of the 'medicareAndRetirementMembershipProfiles' field.
   * @return The value of the 'medicareAndRetirementMembershipProfiles' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> getMedicareAndRetirementMembershipProfiles() {
    return medicareAndRetirementMembershipProfiles;
  }

  /**
   * Sets the value of the 'medicareAndRetirementMembershipProfiles' field.
   * @param value the value to set.
   */
  public void setMedicareAndRetirementMembershipProfiles(java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> value) {
    this.medicareAndRetirementMembershipProfiles = value;
  }

  /**
   * Gets the value of the 'medicareAndRetirementPassportProfiles' field.
   * @return The value of the 'medicareAndRetirementPassportProfiles' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> getMedicareAndRetirementPassportProfiles() {
    return medicareAndRetirementPassportProfiles;
  }

  /**
   * Sets the value of the 'medicareAndRetirementPassportProfiles' field.
   * @param value the value to set.
   */
  public void setMedicareAndRetirementPassportProfiles(java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> value) {
    this.medicareAndRetirementPassportProfiles = value;
  }

  /**
   * Gets the value of the 'memberDeliveryPreferences' field.
   * @return The value of the 'memberDeliveryPreferences' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> getMemberDeliveryPreferences() {
    return memberDeliveryPreferences;
  }

  /**
   * Sets the value of the 'memberDeliveryPreferences' field.
   * @param value the value to set.
   */
  public void setMemberDeliveryPreferences(java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> value) {
    this.memberDeliveryPreferences = value;
  }

  /**
   * Gets the value of the 'memberEnrollmentOtherIdentifiers' field.
   * @return The value of the 'memberEnrollmentOtherIdentifiers' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> getMemberEnrollmentOtherIdentifiers() {
    return memberEnrollmentOtherIdentifiers;
  }

  /**
   * Sets the value of the 'memberEnrollmentOtherIdentifiers' field.
   * @param value the value to set.
   */
  public void setMemberEnrollmentOtherIdentifiers(java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> value) {
    this.memberEnrollmentOtherIdentifiers = value;
  }

  /**
   * Gets the value of the 'memberGroupContractPlanOptionId' field.
   * @return Cirrus Member Group Contract Plan Option identifier.
   */
  public java.lang.CharSequence getMemberGroupContractPlanOptionId() {
    return memberGroupContractPlanOptionId;
  }

  /**
   * Sets the value of the 'memberGroupContractPlanOptionId' field.
   * Cirrus Member Group Contract Plan Option identifier.
   * @param value the value to set.
   */
  public void setMemberGroupContractPlanOptionId(java.lang.CharSequence value) {
    this.memberGroupContractPlanOptionId = value;
  }

  /**
   * Gets the value of the 'memberMarketNumber' field.
   * @return The value of the 'memberMarketNumber' field.
   */
  public java.lang.CharSequence getMemberMarketNumber() {
    return memberMarketNumber;
  }

  /**
   * Sets the value of the 'memberMarketNumber' field.
   * @param value the value to set.
   */
  public void setMemberMarketNumber(java.lang.CharSequence value) {
    this.memberMarketNumber = value;
  }

  /**
   * Gets the value of the 'membershipGroupData' field.
   * @return The value of the 'membershipGroupData' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> getMembershipGroupData() {
    return membershipGroupData;
  }

  /**
   * Sets the value of the 'membershipGroupData' field.
   * @param value the value to set.
   */
  public void setMembershipGroupData(java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> value) {
    this.membershipGroupData = value;
  }

  /**
   * Gets the value of the 'membershipIdentifier' field.
   * @return The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
   */
  public java.lang.CharSequence getMembershipIdentifier() {
    return membershipIdentifier;
  }

  /**
   * Sets the value of the 'membershipIdentifier' field.
   * The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
   * @param value the value to set.
   */
  public void setMembershipIdentifier(java.lang.CharSequence value) {
    this.membershipIdentifier = value;
  }

  /**
   * Gets the value of the 'organization' field.
   * @return The value of the 'organization' field.
   */
  public com.uhc.schema.model.eligibility.Organization getOrganization() {
    return organization;
  }

  /**
   * Sets the value of the 'organization' field.
   * @param value the value to set.
   */
  public void setOrganization(com.uhc.schema.model.eligibility.Organization value) {
    this.organization = value;
  }

  /**
   * Gets the value of the 'organizationIdentifier' field.
   * @return The value of the 'organizationIdentifier' field.
   */
  public java.lang.CharSequence getOrganizationIdentifier() {
    return organizationIdentifier;
  }

  /**
   * Sets the value of the 'organizationIdentifier' field.
   * @param value the value to set.
   */
  public void setOrganizationIdentifier(java.lang.CharSequence value) {
    this.organizationIdentifier = value;
  }

  /**
   * Gets the value of the 'organizationPopulationGroupNumber' field.
   * @return The value of the 'organizationPopulationGroupNumber' field.
   */
  public java.lang.CharSequence getOrganizationPopulationGroupNumber() {
    return organizationPopulationGroupNumber;
  }

  /**
   * Sets the value of the 'organizationPopulationGroupNumber' field.
   * @param value the value to set.
   */
  public void setOrganizationPopulationGroupNumber(java.lang.CharSequence value) {
    this.organizationPopulationGroupNumber = value;
  }

  /**
   * Gets the value of the 'packageBenefitPlanCode' field.
   * @return The value of the 'packageBenefitPlanCode' field.
   */
  public java.lang.CharSequence getPackageBenefitPlanCode() {
    return packageBenefitPlanCode;
  }

  /**
   * Sets the value of the 'packageBenefitPlanCode' field.
   * @param value the value to set.
   */
  public void setPackageBenefitPlanCode(java.lang.CharSequence value) {
    this.packageBenefitPlanCode = value;
  }

  /**
   * Gets the value of the 'packageOptionDescription' field.
   * @return Benefit Bundle Option Description.
   */
  public java.lang.CharSequence getPackageOptionDescription() {
    return packageOptionDescription;
  }

  /**
   * Sets the value of the 'packageOptionDescription' field.
   * Benefit Bundle Option Description.
   * @param value the value to set.
   */
  public void setPackageOptionDescription(java.lang.CharSequence value) {
    this.packageOptionDescription = value;
  }

  /**
   * Gets the value of the 'packageOptionId' field.
   * @return Package Option Identifier.
   */
  public java.lang.CharSequence getPackageOptionId() {
    return packageOptionId;
  }

  /**
   * Sets the value of the 'packageOptionId' field.
   * Package Option Identifier.
   * @param value the value to set.
   */
  public void setPackageOptionId(java.lang.CharSequence value) {
    this.packageOptionId = value;
  }

  /**
   * Gets the value of the 'panelNumber' field.
   * @return The value of the 'panelNumber' field.
   */
  public java.lang.CharSequence getPanelNumber() {
    return panelNumber;
  }

  /**
   * Sets the value of the 'panelNumber' field.
   * @param value the value to set.
   */
  public void setPanelNumber(java.lang.CharSequence value) {
    this.panelNumber = value;
  }

  /**
   * Gets the value of the 'passportGroupNumber' field.
   * @return The value of the 'passportGroupNumber' field.
   */
  public java.lang.CharSequence getPassportGroupNumber() {
    return passportGroupNumber;
  }

  /**
   * Sets the value of the 'passportGroupNumber' field.
   * @param value the value to set.
   */
  public void setPassportGroupNumber(java.lang.CharSequence value) {
    this.passportGroupNumber = value;
  }

  /**
   * Gets the value of the 'parentMembershipIdentifier' field.
   * @return The value of the 'parentMembershipIdentifier' field.
   */
  public java.lang.CharSequence getParentMembershipIdentifier() {
    return parentMembershipIdentifier;
  }

  /**
   * Sets the value of the 'parentMembershipIdentifier' field.
   * @param value the value to set.
   */
  public void setParentMembershipIdentifier(java.lang.CharSequence value) {
    this.parentMembershipIdentifier = value;
  }

  /**
   * Gets the value of the 'pcpMedicalDirectorApprovalIndicator' field.
   * @return Override to allow specialist to be primary physician.
   */
  public java.lang.CharSequence getPcpMedicalDirectorApprovalIndicator() {
    return pcpMedicalDirectorApprovalIndicator;
  }

  /**
   * Sets the value of the 'pcpMedicalDirectorApprovalIndicator' field.
   * Override to allow specialist to be primary physician.
   * @param value the value to set.
   */
  public void setPcpMedicalDirectorApprovalIndicator(java.lang.CharSequence value) {
    this.pcpMedicalDirectorApprovalIndicator = value;
  }

  /**
   * Gets the value of the 'plan' field.
   * @return The value of the 'plan' field.
   */
  public com.uhc.schema.model.eligibility.Plan getPlan() {
    return plan;
  }

  /**
   * Sets the value of the 'plan' field.
   * @param value the value to set.
   */
  public void setPlan(com.uhc.schema.model.eligibility.Plan value) {
    this.plan = value;
  }

  /**
   * Gets the value of the 'planCode' field.
   * @return The value of the 'planCode' field.
   */
  public java.lang.CharSequence getPlanCode() {
    return planCode;
  }

  /**
   * Sets the value of the 'planCode' field.
   * @param value the value to set.
   */
  public void setPlanCode(java.lang.CharSequence value) {
    this.planCode = value;
  }

  /**
   * Gets the value of the 'priorHealthCoverageMonths' field.
   * @return The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
   */
  public java.lang.CharSequence getPriorHealthCoverageMonths() {
    return priorHealthCoverageMonths;
  }

  /**
   * Sets the value of the 'priorHealthCoverageMonths' field.
   * The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
   * @param value the value to set.
   */
  public void setPriorHealthCoverageMonths(java.lang.CharSequence value) {
    this.priorHealthCoverageMonths = value;
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public com.uhc.schema.model.eligibility.Product getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(com.uhc.schema.model.eligibility.Product value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'productCode' field.
   * @return The value of the 'productCode' field.
   */
  public java.lang.CharSequence getProductCode() {
    return productCode;
  }

  /**
   * Sets the value of the 'productCode' field.
   * @param value the value to set.
   */
  public void setProductCode(java.lang.CharSequence value) {
    this.productCode = value;
  }

  /**
   * Gets the value of the 'qmcsoIndicator' field.
   * @return Indicates if a Qualified Medical Child Support Order exists for this membership.
   */
  public java.lang.CharSequence getQmcsoIndicator() {
    return qmcsoIndicator;
  }

  /**
   * Sets the value of the 'qmcsoIndicator' field.
   * Indicates if a Qualified Medical Child Support Order exists for this membership.
   * @param value the value to set.
   */
  public void setQmcsoIndicator(java.lang.CharSequence value) {
    this.qmcsoIndicator = value;
  }

  /**
   * Gets the value of the 'recordType' field.
   * @return The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
   */
  public java.lang.CharSequence getRecordType() {
    return recordType;
  }

  /**
   * Sets the value of the 'recordType' field.
   * The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
   * @param value the value to set.
   */
  public void setRecordType(java.lang.CharSequence value) {
    this.recordType = value;
  }

  /**
   * Gets the value of the 'relationshipType' field.
   * @return The value of the 'relationshipType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getRelationshipType() {
    return relationshipType;
  }

  /**
   * Sets the value of the 'relationshipType' field.
   * @param value the value to set.
   */
  public void setRelationshipType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.relationshipType = value;
  }

  /**
   * Gets the value of the 'revenueArrangement' field.
   * @return Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getRevenueArrangement() {
    return revenueArrangement;
  }

  /**
   * Sets the value of the 'revenueArrangement' field.
   * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
   * @param value the value to set.
   */
  public void setRevenueArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.revenueArrangement = value;
  }

  /**
   * Gets the value of the 'riskGroupId' field.
   * @return The value of the 'riskGroupId' field.
   */
  public java.lang.CharSequence getRiskGroupId() {
    return riskGroupId;
  }

  /**
   * Sets the value of the 'riskGroupId' field.
   * @param value the value to set.
   */
  public void setRiskGroupId(java.lang.CharSequence value) {
    this.riskGroupId = value;
  }

  /**
   * Gets the value of the 'riskGroupName' field.
   * @return The value of the 'riskGroupName' field.
   */
  public java.lang.CharSequence getRiskGroupName() {
    return riskGroupName;
  }

  /**
   * Sets the value of the 'riskGroupName' field.
   * @param value the value to set.
   */
  public void setRiskGroupName(java.lang.CharSequence value) {
    this.riskGroupName = value;
  }

  /**
   * Gets the value of the 'salesAgentIdentifier' field.
   * @return The value of the 'salesAgentIdentifier' field.
   */
  public java.lang.CharSequence getSalesAgentIdentifier() {
    return salesAgentIdentifier;
  }

  /**
   * Sets the value of the 'salesAgentIdentifier' field.
   * @param value the value to set.
   */
  public void setSalesAgentIdentifier(java.lang.CharSequence value) {
    this.salesAgentIdentifier = value;
  }

  /**
   * Gets the value of the 'security' field.
   * @return The value of the 'security' field.
   */
  public com.uhc.schema.model.eligibility.common.Security getSecurity() {
    return security;
  }

  /**
   * Sets the value of the 'security' field.
   * @param value the value to set.
   */
  public void setSecurity(com.uhc.schema.model.eligibility.common.Security value) {
    this.security = value;
  }

  /**
   * Gets the value of the 'segmentId' field.
   * @return The value of the 'segmentId' field.
   */
  public java.lang.CharSequence getSegmentId() {
    return segmentId;
  }

  /**
   * Sets the value of the 'segmentId' field.
   * @param value the value to set.
   */
  public void setSegmentId(java.lang.CharSequence value) {
    this.segmentId = value;
  }

  /**
   * Gets the value of the 'site' field.
   * @return The value of the 'site' field.
   */
  public java.lang.CharSequence getSite() {
    return site;
  }

  /**
   * Sets the value of the 'site' field.
   * @param value the value to set.
   */
  public void setSite(java.lang.CharSequence value) {
    this.site = value;
  }

  /**
   * Gets the value of the 'situsState' field.
   * @return The state that the insurance product/policy is based out of for a particular employer.
   */
  public java.lang.CharSequence getSitusState() {
    return situsState;
  }

  /**
   * Sets the value of the 'situsState' field.
   * The state that the insurance product/policy is based out of for a particular employer.
   * @param value the value to set.
   */
  public void setSitusState(java.lang.CharSequence value) {
    this.situsState = value;
  }

  /**
   * Gets the value of the 'sourceSystemAttributes' field.
   * @return The value of the 'sourceSystemAttributes' field.
   */
  public com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes getSourceSystemAttributes() {
    return sourceSystemAttributes;
  }

  /**
   * Sets the value of the 'sourceSystemAttributes' field.
   * @param value the value to set.
   */
  public void setSourceSystemAttributes(com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes value) {
    this.sourceSystemAttributes = value;
  }

  /**
   * Gets the value of the 'sourceSystemCode' field.
   * @return The value of the 'sourceSystemCode' field.
   */
  public java.lang.CharSequence getSourceSystemCode() {
    return sourceSystemCode;
  }

  /**
   * Sets the value of the 'sourceSystemCode' field.
   * @param value the value to set.
   */
  public void setSourceSystemCode(java.lang.CharSequence value) {
    this.sourceSystemCode = value;
  }

  /**
   * Gets the value of the 'sourceTerminationDate' field.
   * @return The date that the Consumer Plan is no longer active.
   */
  public java.lang.CharSequence getSourceTerminationDate() {
    return sourceTerminationDate;
  }

  /**
   * Sets the value of the 'sourceTerminationDate' field.
   * The date that the Consumer Plan is no longer active.
   * @param value the value to set.
   */
  public void setSourceTerminationDate(java.lang.CharSequence value) {
    this.sourceTerminationDate = value;
  }

  /**
   * Gets the value of the 'subscriberEnrolleeSourceId' field.
   * @return The enrollee id for the subscriber on the membership record.
   */
  public java.lang.CharSequence getSubscriberEnrolleeSourceId() {
    return subscriberEnrolleeSourceId;
  }

  /**
   * Sets the value of the 'subscriberEnrolleeSourceId' field.
   * The enrollee id for the subscriber on the membership record.
   * @param value the value to set.
   */
  public void setSubscriberEnrolleeSourceId(java.lang.CharSequence value) {
    this.subscriberEnrolleeSourceId = value;
  }

  /**
   * Gets the value of the 'subscriberIndividualIdentifier' field.
   * @return The value of the 'subscriberIndividualIdentifier' field.
   */
  public java.lang.CharSequence getSubscriberIndividualIdentifier() {
    return subscriberIndividualIdentifier;
  }

  /**
   * Sets the value of the 'subscriberIndividualIdentifier' field.
   * @param value the value to set.
   */
  public void setSubscriberIndividualIdentifier(java.lang.CharSequence value) {
    this.subscriberIndividualIdentifier = value;
  }

  /**
   * Gets the value of the 'subscriberMemberFacingIdentifier' field.
   * @return External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
   */
  public java.lang.CharSequence getSubscriberMemberFacingIdentifier() {
    return subscriberMemberFacingIdentifier;
  }

  /**
   * Sets the value of the 'subscriberMemberFacingIdentifier' field.
   * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
   * @param value the value to set.
   */
  public void setSubscriberMemberFacingIdentifier(java.lang.CharSequence value) {
    this.subscriberMemberFacingIdentifier = value;
  }

  /**
   * Gets the value of the 'subscriberSocialSecurityNumber' field.
   * @return Social Security Number of the plan subscriber.
   */
  public java.lang.CharSequence getSubscriberSocialSecurityNumber() {
    return subscriberSocialSecurityNumber;
  }

  /**
   * Sets the value of the 'subscriberSocialSecurityNumber' field.
   * Social Security Number of the plan subscriber.
   * @param value the value to set.
   */
  public void setSubscriberSocialSecurityNumber(java.lang.CharSequence value) {
    this.subscriberSocialSecurityNumber = value;
  }

  /**
   * Gets the value of the 'subsidizedInsuredPlans' field.
   * @return The value of the 'subsidizedInsuredPlans' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> getSubsidizedInsuredPlans() {
    return subsidizedInsuredPlans;
  }

  /**
   * Sets the value of the 'subsidizedInsuredPlans' field.
   * @param value the value to set.
   */
  public void setSubsidizedInsuredPlans(java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> value) {
    this.subsidizedInsuredPlans = value;
  }

  /**
   * Gets the value of the 'terminationDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getTerminationDate() {
    return terminationDate;
  }

  /**
   * Sets the value of the 'terminationDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setTerminationDate(java.lang.CharSequence value) {
    this.terminationDate = value;
  }

  /**
   * Gets the value of the 'terminationReason' field.
   * @return The reason the membership was terminated.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getTerminationReason() {
    return terminationReason;
  }

  /**
   * Sets the value of the 'terminationReason' field.
   * The reason the membership was terminated.
   * @param value the value to set.
   */
  public void setTerminationReason(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.terminationReason = value;
  }

  /**
   * Creates a new Membership RecordBuilder.
   * @return A new Membership RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Membership.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.Membership.Builder();
  }

  /**
   * Creates a new Membership RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Membership RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Membership.Builder newBuilder(com.uhc.schema.model.eligibility.Membership.Builder other) {
    return new com.uhc.schema.model.eligibility.Membership.Builder(other);
  }

  /**
   * Creates a new Membership RecordBuilder by copying an existing Membership instance.
   * @param other The existing instance to copy.
   * @return A new Membership RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Membership.Builder newBuilder(com.uhc.schema.model.eligibility.Membership other) {
    return new com.uhc.schema.model.eligibility.Membership.Builder(other);
  }

  /**
   * RecordBuilder for Membership instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Membership>
    implements org.apache.avro.data.RecordBuilder<Membership> {

    private boolean active;
    private java.lang.CharSequence applicationIdentifier;
    private java.lang.CharSequence areaGroup;
    /** The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc. */
    private com.uhc.schema.model.eligibility.common.DescriptionType benefitStatus;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder benefitStatusBuilder;
    /** The billing subgroup number for this membership record. */
    private java.lang.CharSequence billingSubgroupNumber;
    /** A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.). */
    private com.uhc.schema.model.eligibility.common.DescriptionType bookOfBusiness;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder bookOfBusinessBuilder;
    private java.lang.CharSequence brandIdentifier;
    /** Code and description for the membership branding entity. */
    private com.uhc.schema.model.eligibility.common.DescriptionType brandingEntity;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder brandingEntityBuilder;
    private java.lang.CharSequence brandName;
    private java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> bundleOptionPlans;
    /** Highest level business entity. E.g., Optum or UHC. */
    private com.uhc.schema.model.eligibility.common.DescriptionType business;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder businessBuilder;
    private java.lang.CharSequence businessSegment;
    private com.uhc.schema.model.eligibility.membership.CALAP calap;
    private com.uhc.schema.model.eligibility.membership.CALAP.Builder calapBuilder;
    /** Reason coverage was cancelled. */
    private com.uhc.schema.model.eligibility.common.DescriptionType cancelReasonType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder cancelReasonTypeBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType claimSystemType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder claimSystemTypeBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType coverageLevel;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder coverageLevelBuilder;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence coveragePaidThruDate;
    private com.uhc.schema.model.eligibility.common.DescriptionType coveragePaidThruReason;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder coveragePaidThruReasonBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType coverageStatus;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder coverageStatusBuilder;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence creationDate;
    private com.uhc.schema.model.eligibility.CustomerAccount customerAccount;
    private com.uhc.schema.model.eligibility.CustomerAccount.Builder customerAccountBuilder;
    private java.lang.CharSequence customerAccountIdentifier;
    /** Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD */
    private java.lang.CharSequence customerPurchaseEffectiveDate;
    private java.lang.CharSequence customerPurchaseIdentifier;
    /** Identifier for a group of plan purchases. */
    private java.lang.CharSequence customerPurchaseOptionIdentifier;
    /** Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc. */
    private com.uhc.schema.model.eligibility.common.DescriptionType customerPurchaseStatus;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder customerPurchaseStatusBuilder;
    /** Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD */
    private java.lang.CharSequence customerPurchaseTerminationDate;
    /** Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc. */
    private com.uhc.schema.model.eligibility.common.DescriptionType customerPurchaseType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder customerPurchaseTypeBuilder;
    /** Current version number of the Customer Purchase for this membership record. */
    private java.lang.CharSequence customerPurchaseVersionNumber;
    /** Indicates that this member's address is different from the rest of the family. */
    private java.lang.CharSequence differentFamilyMemberAddressIndicator;
    private java.lang.CharSequence divisionCode;
    /** A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership */
    private com.uhc.schema.model.eligibility.common.DescriptionType distributionChannel;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder distributionChannelBuilder;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence effectiveDate;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence eligibilityGracePeriodThruDate;
    private com.uhc.schema.model.eligibility.common.DescriptionType eligibilitySystemType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder eligibilitySystemTypeBuilder;
    private java.lang.CharSequence employerIdentifier;
    /** External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee. */
    private java.lang.CharSequence enrolleeMemberFacingIdentifier;
    private java.lang.CharSequence enrolleeSourceCode;
    private java.lang.CharSequence enrolleeSourceId;
    /** Employee Retirement Income Security Act (ERISA) Indicator. */
    private java.lang.CharSequence erisaIndicator;
    /** The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ */
    private java.lang.CharSequence familyLastUpdatedTimestamp;
    private com.uhc.schema.model.eligibility.membership.FinancialAccount financialAccount;
    private com.uhc.schema.model.eligibility.membership.FinancialAccount.Builder financialAccountBuilder;
    private java.lang.CharSequence hContractId;
    /** The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan. */
    private java.lang.CharSequence healthPlanCode;
    private java.lang.CharSequence healthProgramCode;
    private java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> holdReason;
    /** The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID) */
    private java.lang.CharSequence individualIdentifier;
    /** Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD */
    private java.lang.CharSequence individualTerminationDate;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence lastPremiumPaidDate;
    private com.uhc.schema.model.eligibility.common.LastUpdated lastUpdated;
    private com.uhc.schema.model.eligibility.common.LastUpdated.Builder lastUpdatedBuilder;
    private java.lang.CharSequence lateEnrollCode;
    private com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes legacyAttributes;
    private com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes.Builder legacyAttributesBuilder;
    private com.uhc.schema.model.eligibility.membership.LifeAndDisability lifeAndDisability;
    private com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder lifeAndDisabilityBuilder;
    /** Market segment for the coverage. */
    private com.uhc.schema.model.eligibility.common.DescriptionType marketSegment;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder marketSegmentBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType marketType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder marketTypeBuilder;
    private java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> medicareAndRetirementMembershipProfiles;
    private java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> medicareAndRetirementPassportProfiles;
    private java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> memberDeliveryPreferences;
    private java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> memberEnrollmentOtherIdentifiers;
    /** Cirrus Member Group Contract Plan Option identifier. */
    private java.lang.CharSequence memberGroupContractPlanOptionId;
    private java.lang.CharSequence memberMarketNumber;
    private java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> membershipGroupData;
    /** The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE) */
    private java.lang.CharSequence membershipIdentifier;
    private com.uhc.schema.model.eligibility.Organization organization;
    private com.uhc.schema.model.eligibility.Organization.Builder organizationBuilder;
    private java.lang.CharSequence organizationIdentifier;
    private java.lang.CharSequence organizationPopulationGroupNumber;
    private java.lang.CharSequence packageBenefitPlanCode;
    /** Benefit Bundle Option Description. */
    private java.lang.CharSequence packageOptionDescription;
    /** Package Option Identifier. */
    private java.lang.CharSequence packageOptionId;
    private java.lang.CharSequence panelNumber;
    private java.lang.CharSequence passportGroupNumber;
    private java.lang.CharSequence parentMembershipIdentifier;
    /** Override to allow specialist to be primary physician. */
    private java.lang.CharSequence pcpMedicalDirectorApprovalIndicator;
    private com.uhc.schema.model.eligibility.Plan plan;
    private com.uhc.schema.model.eligibility.Plan.Builder planBuilder;
    private java.lang.CharSequence planCode;
    /** The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA). */
    private java.lang.CharSequence priorHealthCoverageMonths;
    private com.uhc.schema.model.eligibility.Product product;
    private com.uhc.schema.model.eligibility.Product.Builder productBuilder;
    private java.lang.CharSequence productCode;
    /** Indicates if a Qualified Medical Child Support Order exists for this membership. */
    private java.lang.CharSequence qmcsoIndicator;
    /** The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ] */
    private java.lang.CharSequence recordType;
    private com.uhc.schema.model.eligibility.common.DescriptionType relationshipType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder relationshipTypeBuilder;
    /** Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy. */
    private com.uhc.schema.model.eligibility.common.DescriptionType revenueArrangement;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder revenueArrangementBuilder;
    private java.lang.CharSequence riskGroupId;
    private java.lang.CharSequence riskGroupName;
    private java.lang.CharSequence salesAgentIdentifier;
    private com.uhc.schema.model.eligibility.common.Security security;
    private com.uhc.schema.model.eligibility.common.Security.Builder securityBuilder;
    private java.lang.CharSequence segmentId;
    private java.lang.CharSequence site;
    /** The state that the insurance product/policy is based out of for a particular employer. */
    private java.lang.CharSequence situsState;
    private com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes sourceSystemAttributes;
    private com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes.Builder sourceSystemAttributesBuilder;
    private java.lang.CharSequence sourceSystemCode;
    /** The date that the Consumer Plan is no longer active. */
    private java.lang.CharSequence sourceTerminationDate;
    /** The enrollee id for the subscriber on the membership record. */
    private java.lang.CharSequence subscriberEnrolleeSourceId;
    private java.lang.CharSequence subscriberIndividualIdentifier;
    /** External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee. */
    private java.lang.CharSequence subscriberMemberFacingIdentifier;
    /** Social Security Number of the plan subscriber. */
    private java.lang.CharSequence subscriberSocialSecurityNumber;
    private java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> subsidizedInsuredPlans;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence terminationDate;
    /** The reason the membership was terminated. */
    private com.uhc.schema.model.eligibility.common.DescriptionType terminationReason;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder terminationReasonBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.Membership.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.active)) {
        this.active = data().deepCopy(fields()[0].schema(), other.active);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.applicationIdentifier)) {
        this.applicationIdentifier = data().deepCopy(fields()[1].schema(), other.applicationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.areaGroup)) {
        this.areaGroup = data().deepCopy(fields()[2].schema(), other.areaGroup);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.benefitStatus)) {
        this.benefitStatus = data().deepCopy(fields()[3].schema(), other.benefitStatus);
        fieldSetFlags()[3] = true;
      }
      if (other.hasBenefitStatusBuilder()) {
        this.benefitStatusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getBenefitStatusBuilder());
      }
      if (isValidValue(fields()[4], other.billingSubgroupNumber)) {
        this.billingSubgroupNumber = data().deepCopy(fields()[4].schema(), other.billingSubgroupNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bookOfBusiness)) {
        this.bookOfBusiness = data().deepCopy(fields()[5].schema(), other.bookOfBusiness);
        fieldSetFlags()[5] = true;
      }
      if (other.hasBookOfBusinessBuilder()) {
        this.bookOfBusinessBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getBookOfBusinessBuilder());
      }
      if (isValidValue(fields()[6], other.brandIdentifier)) {
        this.brandIdentifier = data().deepCopy(fields()[6].schema(), other.brandIdentifier);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.brandingEntity)) {
        this.brandingEntity = data().deepCopy(fields()[7].schema(), other.brandingEntity);
        fieldSetFlags()[7] = true;
      }
      if (other.hasBrandingEntityBuilder()) {
        this.brandingEntityBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getBrandingEntityBuilder());
      }
      if (isValidValue(fields()[8], other.brandName)) {
        this.brandName = data().deepCopy(fields()[8].schema(), other.brandName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bundleOptionPlans)) {
        this.bundleOptionPlans = data().deepCopy(fields()[9].schema(), other.bundleOptionPlans);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.business)) {
        this.business = data().deepCopy(fields()[10].schema(), other.business);
        fieldSetFlags()[10] = true;
      }
      if (other.hasBusinessBuilder()) {
        this.businessBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getBusinessBuilder());
      }
      if (isValidValue(fields()[11], other.businessSegment)) {
        this.businessSegment = data().deepCopy(fields()[11].schema(), other.businessSegment);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.calap)) {
        this.calap = data().deepCopy(fields()[12].schema(), other.calap);
        fieldSetFlags()[12] = true;
      }
      if (other.hasCalapBuilder()) {
        this.calapBuilder = com.uhc.schema.model.eligibility.membership.CALAP.newBuilder(other.getCalapBuilder());
      }
      if (isValidValue(fields()[13], other.cancelReasonType)) {
        this.cancelReasonType = data().deepCopy(fields()[13].schema(), other.cancelReasonType);
        fieldSetFlags()[13] = true;
      }
      if (other.hasCancelReasonTypeBuilder()) {
        this.cancelReasonTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCancelReasonTypeBuilder());
      }
      if (isValidValue(fields()[14], other.claimSystemType)) {
        this.claimSystemType = data().deepCopy(fields()[14].schema(), other.claimSystemType);
        fieldSetFlags()[14] = true;
      }
      if (other.hasClaimSystemTypeBuilder()) {
        this.claimSystemTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getClaimSystemTypeBuilder());
      }
      if (isValidValue(fields()[15], other.coverageLevel)) {
        this.coverageLevel = data().deepCopy(fields()[15].schema(), other.coverageLevel);
        fieldSetFlags()[15] = true;
      }
      if (other.hasCoverageLevelBuilder()) {
        this.coverageLevelBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCoverageLevelBuilder());
      }
      if (isValidValue(fields()[16], other.coveragePaidThruDate)) {
        this.coveragePaidThruDate = data().deepCopy(fields()[16].schema(), other.coveragePaidThruDate);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.coveragePaidThruReason)) {
        this.coveragePaidThruReason = data().deepCopy(fields()[17].schema(), other.coveragePaidThruReason);
        fieldSetFlags()[17] = true;
      }
      if (other.hasCoveragePaidThruReasonBuilder()) {
        this.coveragePaidThruReasonBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCoveragePaidThruReasonBuilder());
      }
      if (isValidValue(fields()[18], other.coverageStatus)) {
        this.coverageStatus = data().deepCopy(fields()[18].schema(), other.coverageStatus);
        fieldSetFlags()[18] = true;
      }
      if (other.hasCoverageStatusBuilder()) {
        this.coverageStatusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCoverageStatusBuilder());
      }
      if (isValidValue(fields()[19], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[19].schema(), other.creationDate);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.customerAccount)) {
        this.customerAccount = data().deepCopy(fields()[20].schema(), other.customerAccount);
        fieldSetFlags()[20] = true;
      }
      if (other.hasCustomerAccountBuilder()) {
        this.customerAccountBuilder = com.uhc.schema.model.eligibility.CustomerAccount.newBuilder(other.getCustomerAccountBuilder());
      }
      if (isValidValue(fields()[21], other.customerAccountIdentifier)) {
        this.customerAccountIdentifier = data().deepCopy(fields()[21].schema(), other.customerAccountIdentifier);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.customerPurchaseEffectiveDate)) {
        this.customerPurchaseEffectiveDate = data().deepCopy(fields()[22].schema(), other.customerPurchaseEffectiveDate);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.customerPurchaseIdentifier)) {
        this.customerPurchaseIdentifier = data().deepCopy(fields()[23].schema(), other.customerPurchaseIdentifier);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.customerPurchaseOptionIdentifier)) {
        this.customerPurchaseOptionIdentifier = data().deepCopy(fields()[24].schema(), other.customerPurchaseOptionIdentifier);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.customerPurchaseStatus)) {
        this.customerPurchaseStatus = data().deepCopy(fields()[25].schema(), other.customerPurchaseStatus);
        fieldSetFlags()[25] = true;
      }
      if (other.hasCustomerPurchaseStatusBuilder()) {
        this.customerPurchaseStatusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCustomerPurchaseStatusBuilder());
      }
      if (isValidValue(fields()[26], other.customerPurchaseTerminationDate)) {
        this.customerPurchaseTerminationDate = data().deepCopy(fields()[26].schema(), other.customerPurchaseTerminationDate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.customerPurchaseType)) {
        this.customerPurchaseType = data().deepCopy(fields()[27].schema(), other.customerPurchaseType);
        fieldSetFlags()[27] = true;
      }
      if (other.hasCustomerPurchaseTypeBuilder()) {
        this.customerPurchaseTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCustomerPurchaseTypeBuilder());
      }
      if (isValidValue(fields()[28], other.customerPurchaseVersionNumber)) {
        this.customerPurchaseVersionNumber = data().deepCopy(fields()[28].schema(), other.customerPurchaseVersionNumber);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.differentFamilyMemberAddressIndicator)) {
        this.differentFamilyMemberAddressIndicator = data().deepCopy(fields()[29].schema(), other.differentFamilyMemberAddressIndicator);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.divisionCode)) {
        this.divisionCode = data().deepCopy(fields()[30].schema(), other.divisionCode);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.distributionChannel)) {
        this.distributionChannel = data().deepCopy(fields()[31].schema(), other.distributionChannel);
        fieldSetFlags()[31] = true;
      }
      if (other.hasDistributionChannelBuilder()) {
        this.distributionChannelBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getDistributionChannelBuilder());
      }
      if (isValidValue(fields()[32], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[32].schema(), other.effectiveDate);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.eligibilityGracePeriodThruDate)) {
        this.eligibilityGracePeriodThruDate = data().deepCopy(fields()[33].schema(), other.eligibilityGracePeriodThruDate);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.eligibilitySystemType)) {
        this.eligibilitySystemType = data().deepCopy(fields()[34].schema(), other.eligibilitySystemType);
        fieldSetFlags()[34] = true;
      }
      if (other.hasEligibilitySystemTypeBuilder()) {
        this.eligibilitySystemTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getEligibilitySystemTypeBuilder());
      }
      if (isValidValue(fields()[35], other.employerIdentifier)) {
        this.employerIdentifier = data().deepCopy(fields()[35].schema(), other.employerIdentifier);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.enrolleeMemberFacingIdentifier)) {
        this.enrolleeMemberFacingIdentifier = data().deepCopy(fields()[36].schema(), other.enrolleeMemberFacingIdentifier);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.enrolleeSourceCode)) {
        this.enrolleeSourceCode = data().deepCopy(fields()[37].schema(), other.enrolleeSourceCode);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.enrolleeSourceId)) {
        this.enrolleeSourceId = data().deepCopy(fields()[38].schema(), other.enrolleeSourceId);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.erisaIndicator)) {
        this.erisaIndicator = data().deepCopy(fields()[39].schema(), other.erisaIndicator);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.familyLastUpdatedTimestamp)) {
        this.familyLastUpdatedTimestamp = data().deepCopy(fields()[40].schema(), other.familyLastUpdatedTimestamp);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.financialAccount)) {
        this.financialAccount = data().deepCopy(fields()[41].schema(), other.financialAccount);
        fieldSetFlags()[41] = true;
      }
      if (other.hasFinancialAccountBuilder()) {
        this.financialAccountBuilder = com.uhc.schema.model.eligibility.membership.FinancialAccount.newBuilder(other.getFinancialAccountBuilder());
      }
      if (isValidValue(fields()[42], other.hContractId)) {
        this.hContractId = data().deepCopy(fields()[42].schema(), other.hContractId);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.healthPlanCode)) {
        this.healthPlanCode = data().deepCopy(fields()[43].schema(), other.healthPlanCode);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.healthProgramCode)) {
        this.healthProgramCode = data().deepCopy(fields()[44].schema(), other.healthProgramCode);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.holdReason)) {
        this.holdReason = data().deepCopy(fields()[45].schema(), other.holdReason);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.individualIdentifier)) {
        this.individualIdentifier = data().deepCopy(fields()[46].schema(), other.individualIdentifier);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.individualTerminationDate)) {
        this.individualTerminationDate = data().deepCopy(fields()[47].schema(), other.individualTerminationDate);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.lastPremiumPaidDate)) {
        this.lastPremiumPaidDate = data().deepCopy(fields()[48].schema(), other.lastPremiumPaidDate);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.lastUpdated)) {
        this.lastUpdated = data().deepCopy(fields()[49].schema(), other.lastUpdated);
        fieldSetFlags()[49] = true;
      }
      if (other.hasLastUpdatedBuilder()) {
        this.lastUpdatedBuilder = com.uhc.schema.model.eligibility.common.LastUpdated.newBuilder(other.getLastUpdatedBuilder());
      }
      if (isValidValue(fields()[50], other.lateEnrollCode)) {
        this.lateEnrollCode = data().deepCopy(fields()[50].schema(), other.lateEnrollCode);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.legacyAttributes)) {
        this.legacyAttributes = data().deepCopy(fields()[51].schema(), other.legacyAttributes);
        fieldSetFlags()[51] = true;
      }
      if (other.hasLegacyAttributesBuilder()) {
        this.legacyAttributesBuilder = com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes.newBuilder(other.getLegacyAttributesBuilder());
      }
      if (isValidValue(fields()[52], other.lifeAndDisability)) {
        this.lifeAndDisability = data().deepCopy(fields()[52].schema(), other.lifeAndDisability);
        fieldSetFlags()[52] = true;
      }
      if (other.hasLifeAndDisabilityBuilder()) {
        this.lifeAndDisabilityBuilder = com.uhc.schema.model.eligibility.membership.LifeAndDisability.newBuilder(other.getLifeAndDisabilityBuilder());
      }
      if (isValidValue(fields()[53], other.marketSegment)) {
        this.marketSegment = data().deepCopy(fields()[53].schema(), other.marketSegment);
        fieldSetFlags()[53] = true;
      }
      if (other.hasMarketSegmentBuilder()) {
        this.marketSegmentBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getMarketSegmentBuilder());
      }
      if (isValidValue(fields()[54], other.marketType)) {
        this.marketType = data().deepCopy(fields()[54].schema(), other.marketType);
        fieldSetFlags()[54] = true;
      }
      if (other.hasMarketTypeBuilder()) {
        this.marketTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getMarketTypeBuilder());
      }
      if (isValidValue(fields()[55], other.medicareAndRetirementMembershipProfiles)) {
        this.medicareAndRetirementMembershipProfiles = data().deepCopy(fields()[55].schema(), other.medicareAndRetirementMembershipProfiles);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.medicareAndRetirementPassportProfiles)) {
        this.medicareAndRetirementPassportProfiles = data().deepCopy(fields()[56].schema(), other.medicareAndRetirementPassportProfiles);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.memberDeliveryPreferences)) {
        this.memberDeliveryPreferences = data().deepCopy(fields()[57].schema(), other.memberDeliveryPreferences);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.memberEnrollmentOtherIdentifiers)) {
        this.memberEnrollmentOtherIdentifiers = data().deepCopy(fields()[58].schema(), other.memberEnrollmentOtherIdentifiers);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.memberGroupContractPlanOptionId)) {
        this.memberGroupContractPlanOptionId = data().deepCopy(fields()[59].schema(), other.memberGroupContractPlanOptionId);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.memberMarketNumber)) {
        this.memberMarketNumber = data().deepCopy(fields()[60].schema(), other.memberMarketNumber);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.membershipGroupData)) {
        this.membershipGroupData = data().deepCopy(fields()[61].schema(), other.membershipGroupData);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.membershipIdentifier)) {
        this.membershipIdentifier = data().deepCopy(fields()[62].schema(), other.membershipIdentifier);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.organization)) {
        this.organization = data().deepCopy(fields()[63].schema(), other.organization);
        fieldSetFlags()[63] = true;
      }
      if (other.hasOrganizationBuilder()) {
        this.organizationBuilder = com.uhc.schema.model.eligibility.Organization.newBuilder(other.getOrganizationBuilder());
      }
      if (isValidValue(fields()[64], other.organizationIdentifier)) {
        this.organizationIdentifier = data().deepCopy(fields()[64].schema(), other.organizationIdentifier);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.organizationPopulationGroupNumber)) {
        this.organizationPopulationGroupNumber = data().deepCopy(fields()[65].schema(), other.organizationPopulationGroupNumber);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.packageBenefitPlanCode)) {
        this.packageBenefitPlanCode = data().deepCopy(fields()[66].schema(), other.packageBenefitPlanCode);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.packageOptionDescription)) {
        this.packageOptionDescription = data().deepCopy(fields()[67].schema(), other.packageOptionDescription);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.packageOptionId)) {
        this.packageOptionId = data().deepCopy(fields()[68].schema(), other.packageOptionId);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.panelNumber)) {
        this.panelNumber = data().deepCopy(fields()[69].schema(), other.panelNumber);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.passportGroupNumber)) {
        this.passportGroupNumber = data().deepCopy(fields()[70].schema(), other.passportGroupNumber);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.parentMembershipIdentifier)) {
        this.parentMembershipIdentifier = data().deepCopy(fields()[71].schema(), other.parentMembershipIdentifier);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.pcpMedicalDirectorApprovalIndicator)) {
        this.pcpMedicalDirectorApprovalIndicator = data().deepCopy(fields()[72].schema(), other.pcpMedicalDirectorApprovalIndicator);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.plan)) {
        this.plan = data().deepCopy(fields()[73].schema(), other.plan);
        fieldSetFlags()[73] = true;
      }
      if (other.hasPlanBuilder()) {
        this.planBuilder = com.uhc.schema.model.eligibility.Plan.newBuilder(other.getPlanBuilder());
      }
      if (isValidValue(fields()[74], other.planCode)) {
        this.planCode = data().deepCopy(fields()[74].schema(), other.planCode);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.priorHealthCoverageMonths)) {
        this.priorHealthCoverageMonths = data().deepCopy(fields()[75].schema(), other.priorHealthCoverageMonths);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.product)) {
        this.product = data().deepCopy(fields()[76].schema(), other.product);
        fieldSetFlags()[76] = true;
      }
      if (other.hasProductBuilder()) {
        this.productBuilder = com.uhc.schema.model.eligibility.Product.newBuilder(other.getProductBuilder());
      }
      if (isValidValue(fields()[77], other.productCode)) {
        this.productCode = data().deepCopy(fields()[77].schema(), other.productCode);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.qmcsoIndicator)) {
        this.qmcsoIndicator = data().deepCopy(fields()[78].schema(), other.qmcsoIndicator);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.recordType)) {
        this.recordType = data().deepCopy(fields()[79].schema(), other.recordType);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.relationshipType)) {
        this.relationshipType = data().deepCopy(fields()[80].schema(), other.relationshipType);
        fieldSetFlags()[80] = true;
      }
      if (other.hasRelationshipTypeBuilder()) {
        this.relationshipTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getRelationshipTypeBuilder());
      }
      if (isValidValue(fields()[81], other.revenueArrangement)) {
        this.revenueArrangement = data().deepCopy(fields()[81].schema(), other.revenueArrangement);
        fieldSetFlags()[81] = true;
      }
      if (other.hasRevenueArrangementBuilder()) {
        this.revenueArrangementBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getRevenueArrangementBuilder());
      }
      if (isValidValue(fields()[82], other.riskGroupId)) {
        this.riskGroupId = data().deepCopy(fields()[82].schema(), other.riskGroupId);
        fieldSetFlags()[82] = true;
      }
      if (isValidValue(fields()[83], other.riskGroupName)) {
        this.riskGroupName = data().deepCopy(fields()[83].schema(), other.riskGroupName);
        fieldSetFlags()[83] = true;
      }
      if (isValidValue(fields()[84], other.salesAgentIdentifier)) {
        this.salesAgentIdentifier = data().deepCopy(fields()[84].schema(), other.salesAgentIdentifier);
        fieldSetFlags()[84] = true;
      }
      if (isValidValue(fields()[85], other.security)) {
        this.security = data().deepCopy(fields()[85].schema(), other.security);
        fieldSetFlags()[85] = true;
      }
      if (other.hasSecurityBuilder()) {
        this.securityBuilder = com.uhc.schema.model.eligibility.common.Security.newBuilder(other.getSecurityBuilder());
      }
      if (isValidValue(fields()[86], other.segmentId)) {
        this.segmentId = data().deepCopy(fields()[86].schema(), other.segmentId);
        fieldSetFlags()[86] = true;
      }
      if (isValidValue(fields()[87], other.site)) {
        this.site = data().deepCopy(fields()[87].schema(), other.site);
        fieldSetFlags()[87] = true;
      }
      if (isValidValue(fields()[88], other.situsState)) {
        this.situsState = data().deepCopy(fields()[88].schema(), other.situsState);
        fieldSetFlags()[88] = true;
      }
      if (isValidValue(fields()[89], other.sourceSystemAttributes)) {
        this.sourceSystemAttributes = data().deepCopy(fields()[89].schema(), other.sourceSystemAttributes);
        fieldSetFlags()[89] = true;
      }
      if (other.hasSourceSystemAttributesBuilder()) {
        this.sourceSystemAttributesBuilder = com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes.newBuilder(other.getSourceSystemAttributesBuilder());
      }
      if (isValidValue(fields()[90], other.sourceSystemCode)) {
        this.sourceSystemCode = data().deepCopy(fields()[90].schema(), other.sourceSystemCode);
        fieldSetFlags()[90] = true;
      }
      if (isValidValue(fields()[91], other.sourceTerminationDate)) {
        this.sourceTerminationDate = data().deepCopy(fields()[91].schema(), other.sourceTerminationDate);
        fieldSetFlags()[91] = true;
      }
      if (isValidValue(fields()[92], other.subscriberEnrolleeSourceId)) {
        this.subscriberEnrolleeSourceId = data().deepCopy(fields()[92].schema(), other.subscriberEnrolleeSourceId);
        fieldSetFlags()[92] = true;
      }
      if (isValidValue(fields()[93], other.subscriberIndividualIdentifier)) {
        this.subscriberIndividualIdentifier = data().deepCopy(fields()[93].schema(), other.subscriberIndividualIdentifier);
        fieldSetFlags()[93] = true;
      }
      if (isValidValue(fields()[94], other.subscriberMemberFacingIdentifier)) {
        this.subscriberMemberFacingIdentifier = data().deepCopy(fields()[94].schema(), other.subscriberMemberFacingIdentifier);
        fieldSetFlags()[94] = true;
      }
      if (isValidValue(fields()[95], other.subscriberSocialSecurityNumber)) {
        this.subscriberSocialSecurityNumber = data().deepCopy(fields()[95].schema(), other.subscriberSocialSecurityNumber);
        fieldSetFlags()[95] = true;
      }
      if (isValidValue(fields()[96], other.subsidizedInsuredPlans)) {
        this.subsidizedInsuredPlans = data().deepCopy(fields()[96].schema(), other.subsidizedInsuredPlans);
        fieldSetFlags()[96] = true;
      }
      if (isValidValue(fields()[97], other.terminationDate)) {
        this.terminationDate = data().deepCopy(fields()[97].schema(), other.terminationDate);
        fieldSetFlags()[97] = true;
      }
      if (isValidValue(fields()[98], other.terminationReason)) {
        this.terminationReason = data().deepCopy(fields()[98].schema(), other.terminationReason);
        fieldSetFlags()[98] = true;
      }
      if (other.hasTerminationReasonBuilder()) {
        this.terminationReasonBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getTerminationReasonBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Membership instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.Membership other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.active)) {
        this.active = data().deepCopy(fields()[0].schema(), other.active);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.applicationIdentifier)) {
        this.applicationIdentifier = data().deepCopy(fields()[1].schema(), other.applicationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.areaGroup)) {
        this.areaGroup = data().deepCopy(fields()[2].schema(), other.areaGroup);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.benefitStatus)) {
        this.benefitStatus = data().deepCopy(fields()[3].schema(), other.benefitStatus);
        fieldSetFlags()[3] = true;
      }
      this.benefitStatusBuilder = null;
      if (isValidValue(fields()[4], other.billingSubgroupNumber)) {
        this.billingSubgroupNumber = data().deepCopy(fields()[4].schema(), other.billingSubgroupNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bookOfBusiness)) {
        this.bookOfBusiness = data().deepCopy(fields()[5].schema(), other.bookOfBusiness);
        fieldSetFlags()[5] = true;
      }
      this.bookOfBusinessBuilder = null;
      if (isValidValue(fields()[6], other.brandIdentifier)) {
        this.brandIdentifier = data().deepCopy(fields()[6].schema(), other.brandIdentifier);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.brandingEntity)) {
        this.brandingEntity = data().deepCopy(fields()[7].schema(), other.brandingEntity);
        fieldSetFlags()[7] = true;
      }
      this.brandingEntityBuilder = null;
      if (isValidValue(fields()[8], other.brandName)) {
        this.brandName = data().deepCopy(fields()[8].schema(), other.brandName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bundleOptionPlans)) {
        this.bundleOptionPlans = data().deepCopy(fields()[9].schema(), other.bundleOptionPlans);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.business)) {
        this.business = data().deepCopy(fields()[10].schema(), other.business);
        fieldSetFlags()[10] = true;
      }
      this.businessBuilder = null;
      if (isValidValue(fields()[11], other.businessSegment)) {
        this.businessSegment = data().deepCopy(fields()[11].schema(), other.businessSegment);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.calap)) {
        this.calap = data().deepCopy(fields()[12].schema(), other.calap);
        fieldSetFlags()[12] = true;
      }
      this.calapBuilder = null;
      if (isValidValue(fields()[13], other.cancelReasonType)) {
        this.cancelReasonType = data().deepCopy(fields()[13].schema(), other.cancelReasonType);
        fieldSetFlags()[13] = true;
      }
      this.cancelReasonTypeBuilder = null;
      if (isValidValue(fields()[14], other.claimSystemType)) {
        this.claimSystemType = data().deepCopy(fields()[14].schema(), other.claimSystemType);
        fieldSetFlags()[14] = true;
      }
      this.claimSystemTypeBuilder = null;
      if (isValidValue(fields()[15], other.coverageLevel)) {
        this.coverageLevel = data().deepCopy(fields()[15].schema(), other.coverageLevel);
        fieldSetFlags()[15] = true;
      }
      this.coverageLevelBuilder = null;
      if (isValidValue(fields()[16], other.coveragePaidThruDate)) {
        this.coveragePaidThruDate = data().deepCopy(fields()[16].schema(), other.coveragePaidThruDate);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.coveragePaidThruReason)) {
        this.coveragePaidThruReason = data().deepCopy(fields()[17].schema(), other.coveragePaidThruReason);
        fieldSetFlags()[17] = true;
      }
      this.coveragePaidThruReasonBuilder = null;
      if (isValidValue(fields()[18], other.coverageStatus)) {
        this.coverageStatus = data().deepCopy(fields()[18].schema(), other.coverageStatus);
        fieldSetFlags()[18] = true;
      }
      this.coverageStatusBuilder = null;
      if (isValidValue(fields()[19], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[19].schema(), other.creationDate);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.customerAccount)) {
        this.customerAccount = data().deepCopy(fields()[20].schema(), other.customerAccount);
        fieldSetFlags()[20] = true;
      }
      this.customerAccountBuilder = null;
      if (isValidValue(fields()[21], other.customerAccountIdentifier)) {
        this.customerAccountIdentifier = data().deepCopy(fields()[21].schema(), other.customerAccountIdentifier);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.customerPurchaseEffectiveDate)) {
        this.customerPurchaseEffectiveDate = data().deepCopy(fields()[22].schema(), other.customerPurchaseEffectiveDate);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.customerPurchaseIdentifier)) {
        this.customerPurchaseIdentifier = data().deepCopy(fields()[23].schema(), other.customerPurchaseIdentifier);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.customerPurchaseOptionIdentifier)) {
        this.customerPurchaseOptionIdentifier = data().deepCopy(fields()[24].schema(), other.customerPurchaseOptionIdentifier);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.customerPurchaseStatus)) {
        this.customerPurchaseStatus = data().deepCopy(fields()[25].schema(), other.customerPurchaseStatus);
        fieldSetFlags()[25] = true;
      }
      this.customerPurchaseStatusBuilder = null;
      if (isValidValue(fields()[26], other.customerPurchaseTerminationDate)) {
        this.customerPurchaseTerminationDate = data().deepCopy(fields()[26].schema(), other.customerPurchaseTerminationDate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.customerPurchaseType)) {
        this.customerPurchaseType = data().deepCopy(fields()[27].schema(), other.customerPurchaseType);
        fieldSetFlags()[27] = true;
      }
      this.customerPurchaseTypeBuilder = null;
      if (isValidValue(fields()[28], other.customerPurchaseVersionNumber)) {
        this.customerPurchaseVersionNumber = data().deepCopy(fields()[28].schema(), other.customerPurchaseVersionNumber);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.differentFamilyMemberAddressIndicator)) {
        this.differentFamilyMemberAddressIndicator = data().deepCopy(fields()[29].schema(), other.differentFamilyMemberAddressIndicator);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.divisionCode)) {
        this.divisionCode = data().deepCopy(fields()[30].schema(), other.divisionCode);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.distributionChannel)) {
        this.distributionChannel = data().deepCopy(fields()[31].schema(), other.distributionChannel);
        fieldSetFlags()[31] = true;
      }
      this.distributionChannelBuilder = null;
      if (isValidValue(fields()[32], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[32].schema(), other.effectiveDate);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.eligibilityGracePeriodThruDate)) {
        this.eligibilityGracePeriodThruDate = data().deepCopy(fields()[33].schema(), other.eligibilityGracePeriodThruDate);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.eligibilitySystemType)) {
        this.eligibilitySystemType = data().deepCopy(fields()[34].schema(), other.eligibilitySystemType);
        fieldSetFlags()[34] = true;
      }
      this.eligibilitySystemTypeBuilder = null;
      if (isValidValue(fields()[35], other.employerIdentifier)) {
        this.employerIdentifier = data().deepCopy(fields()[35].schema(), other.employerIdentifier);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.enrolleeMemberFacingIdentifier)) {
        this.enrolleeMemberFacingIdentifier = data().deepCopy(fields()[36].schema(), other.enrolleeMemberFacingIdentifier);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.enrolleeSourceCode)) {
        this.enrolleeSourceCode = data().deepCopy(fields()[37].schema(), other.enrolleeSourceCode);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.enrolleeSourceId)) {
        this.enrolleeSourceId = data().deepCopy(fields()[38].schema(), other.enrolleeSourceId);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.erisaIndicator)) {
        this.erisaIndicator = data().deepCopy(fields()[39].schema(), other.erisaIndicator);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.familyLastUpdatedTimestamp)) {
        this.familyLastUpdatedTimestamp = data().deepCopy(fields()[40].schema(), other.familyLastUpdatedTimestamp);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.financialAccount)) {
        this.financialAccount = data().deepCopy(fields()[41].schema(), other.financialAccount);
        fieldSetFlags()[41] = true;
      }
      this.financialAccountBuilder = null;
      if (isValidValue(fields()[42], other.hContractId)) {
        this.hContractId = data().deepCopy(fields()[42].schema(), other.hContractId);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.healthPlanCode)) {
        this.healthPlanCode = data().deepCopy(fields()[43].schema(), other.healthPlanCode);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.healthProgramCode)) {
        this.healthProgramCode = data().deepCopy(fields()[44].schema(), other.healthProgramCode);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.holdReason)) {
        this.holdReason = data().deepCopy(fields()[45].schema(), other.holdReason);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.individualIdentifier)) {
        this.individualIdentifier = data().deepCopy(fields()[46].schema(), other.individualIdentifier);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.individualTerminationDate)) {
        this.individualTerminationDate = data().deepCopy(fields()[47].schema(), other.individualTerminationDate);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.lastPremiumPaidDate)) {
        this.lastPremiumPaidDate = data().deepCopy(fields()[48].schema(), other.lastPremiumPaidDate);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.lastUpdated)) {
        this.lastUpdated = data().deepCopy(fields()[49].schema(), other.lastUpdated);
        fieldSetFlags()[49] = true;
      }
      this.lastUpdatedBuilder = null;
      if (isValidValue(fields()[50], other.lateEnrollCode)) {
        this.lateEnrollCode = data().deepCopy(fields()[50].schema(), other.lateEnrollCode);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.legacyAttributes)) {
        this.legacyAttributes = data().deepCopy(fields()[51].schema(), other.legacyAttributes);
        fieldSetFlags()[51] = true;
      }
      this.legacyAttributesBuilder = null;
      if (isValidValue(fields()[52], other.lifeAndDisability)) {
        this.lifeAndDisability = data().deepCopy(fields()[52].schema(), other.lifeAndDisability);
        fieldSetFlags()[52] = true;
      }
      this.lifeAndDisabilityBuilder = null;
      if (isValidValue(fields()[53], other.marketSegment)) {
        this.marketSegment = data().deepCopy(fields()[53].schema(), other.marketSegment);
        fieldSetFlags()[53] = true;
      }
      this.marketSegmentBuilder = null;
      if (isValidValue(fields()[54], other.marketType)) {
        this.marketType = data().deepCopy(fields()[54].schema(), other.marketType);
        fieldSetFlags()[54] = true;
      }
      this.marketTypeBuilder = null;
      if (isValidValue(fields()[55], other.medicareAndRetirementMembershipProfiles)) {
        this.medicareAndRetirementMembershipProfiles = data().deepCopy(fields()[55].schema(), other.medicareAndRetirementMembershipProfiles);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.medicareAndRetirementPassportProfiles)) {
        this.medicareAndRetirementPassportProfiles = data().deepCopy(fields()[56].schema(), other.medicareAndRetirementPassportProfiles);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.memberDeliveryPreferences)) {
        this.memberDeliveryPreferences = data().deepCopy(fields()[57].schema(), other.memberDeliveryPreferences);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.memberEnrollmentOtherIdentifiers)) {
        this.memberEnrollmentOtherIdentifiers = data().deepCopy(fields()[58].schema(), other.memberEnrollmentOtherIdentifiers);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.memberGroupContractPlanOptionId)) {
        this.memberGroupContractPlanOptionId = data().deepCopy(fields()[59].schema(), other.memberGroupContractPlanOptionId);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.memberMarketNumber)) {
        this.memberMarketNumber = data().deepCopy(fields()[60].schema(), other.memberMarketNumber);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.membershipGroupData)) {
        this.membershipGroupData = data().deepCopy(fields()[61].schema(), other.membershipGroupData);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.membershipIdentifier)) {
        this.membershipIdentifier = data().deepCopy(fields()[62].schema(), other.membershipIdentifier);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.organization)) {
        this.organization = data().deepCopy(fields()[63].schema(), other.organization);
        fieldSetFlags()[63] = true;
      }
      this.organizationBuilder = null;
      if (isValidValue(fields()[64], other.organizationIdentifier)) {
        this.organizationIdentifier = data().deepCopy(fields()[64].schema(), other.organizationIdentifier);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.organizationPopulationGroupNumber)) {
        this.organizationPopulationGroupNumber = data().deepCopy(fields()[65].schema(), other.organizationPopulationGroupNumber);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.packageBenefitPlanCode)) {
        this.packageBenefitPlanCode = data().deepCopy(fields()[66].schema(), other.packageBenefitPlanCode);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.packageOptionDescription)) {
        this.packageOptionDescription = data().deepCopy(fields()[67].schema(), other.packageOptionDescription);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.packageOptionId)) {
        this.packageOptionId = data().deepCopy(fields()[68].schema(), other.packageOptionId);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.panelNumber)) {
        this.panelNumber = data().deepCopy(fields()[69].schema(), other.panelNumber);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.passportGroupNumber)) {
        this.passportGroupNumber = data().deepCopy(fields()[70].schema(), other.passportGroupNumber);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.parentMembershipIdentifier)) {
        this.parentMembershipIdentifier = data().deepCopy(fields()[71].schema(), other.parentMembershipIdentifier);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.pcpMedicalDirectorApprovalIndicator)) {
        this.pcpMedicalDirectorApprovalIndicator = data().deepCopy(fields()[72].schema(), other.pcpMedicalDirectorApprovalIndicator);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.plan)) {
        this.plan = data().deepCopy(fields()[73].schema(), other.plan);
        fieldSetFlags()[73] = true;
      }
      this.planBuilder = null;
      if (isValidValue(fields()[74], other.planCode)) {
        this.planCode = data().deepCopy(fields()[74].schema(), other.planCode);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.priorHealthCoverageMonths)) {
        this.priorHealthCoverageMonths = data().deepCopy(fields()[75].schema(), other.priorHealthCoverageMonths);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.product)) {
        this.product = data().deepCopy(fields()[76].schema(), other.product);
        fieldSetFlags()[76] = true;
      }
      this.productBuilder = null;
      if (isValidValue(fields()[77], other.productCode)) {
        this.productCode = data().deepCopy(fields()[77].schema(), other.productCode);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.qmcsoIndicator)) {
        this.qmcsoIndicator = data().deepCopy(fields()[78].schema(), other.qmcsoIndicator);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.recordType)) {
        this.recordType = data().deepCopy(fields()[79].schema(), other.recordType);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.relationshipType)) {
        this.relationshipType = data().deepCopy(fields()[80].schema(), other.relationshipType);
        fieldSetFlags()[80] = true;
      }
      this.relationshipTypeBuilder = null;
      if (isValidValue(fields()[81], other.revenueArrangement)) {
        this.revenueArrangement = data().deepCopy(fields()[81].schema(), other.revenueArrangement);
        fieldSetFlags()[81] = true;
      }
      this.revenueArrangementBuilder = null;
      if (isValidValue(fields()[82], other.riskGroupId)) {
        this.riskGroupId = data().deepCopy(fields()[82].schema(), other.riskGroupId);
        fieldSetFlags()[82] = true;
      }
      if (isValidValue(fields()[83], other.riskGroupName)) {
        this.riskGroupName = data().deepCopy(fields()[83].schema(), other.riskGroupName);
        fieldSetFlags()[83] = true;
      }
      if (isValidValue(fields()[84], other.salesAgentIdentifier)) {
        this.salesAgentIdentifier = data().deepCopy(fields()[84].schema(), other.salesAgentIdentifier);
        fieldSetFlags()[84] = true;
      }
      if (isValidValue(fields()[85], other.security)) {
        this.security = data().deepCopy(fields()[85].schema(), other.security);
        fieldSetFlags()[85] = true;
      }
      this.securityBuilder = null;
      if (isValidValue(fields()[86], other.segmentId)) {
        this.segmentId = data().deepCopy(fields()[86].schema(), other.segmentId);
        fieldSetFlags()[86] = true;
      }
      if (isValidValue(fields()[87], other.site)) {
        this.site = data().deepCopy(fields()[87].schema(), other.site);
        fieldSetFlags()[87] = true;
      }
      if (isValidValue(fields()[88], other.situsState)) {
        this.situsState = data().deepCopy(fields()[88].schema(), other.situsState);
        fieldSetFlags()[88] = true;
      }
      if (isValidValue(fields()[89], other.sourceSystemAttributes)) {
        this.sourceSystemAttributes = data().deepCopy(fields()[89].schema(), other.sourceSystemAttributes);
        fieldSetFlags()[89] = true;
      }
      this.sourceSystemAttributesBuilder = null;
      if (isValidValue(fields()[90], other.sourceSystemCode)) {
        this.sourceSystemCode = data().deepCopy(fields()[90].schema(), other.sourceSystemCode);
        fieldSetFlags()[90] = true;
      }
      if (isValidValue(fields()[91], other.sourceTerminationDate)) {
        this.sourceTerminationDate = data().deepCopy(fields()[91].schema(), other.sourceTerminationDate);
        fieldSetFlags()[91] = true;
      }
      if (isValidValue(fields()[92], other.subscriberEnrolleeSourceId)) {
        this.subscriberEnrolleeSourceId = data().deepCopy(fields()[92].schema(), other.subscriberEnrolleeSourceId);
        fieldSetFlags()[92] = true;
      }
      if (isValidValue(fields()[93], other.subscriberIndividualIdentifier)) {
        this.subscriberIndividualIdentifier = data().deepCopy(fields()[93].schema(), other.subscriberIndividualIdentifier);
        fieldSetFlags()[93] = true;
      }
      if (isValidValue(fields()[94], other.subscriberMemberFacingIdentifier)) {
        this.subscriberMemberFacingIdentifier = data().deepCopy(fields()[94].schema(), other.subscriberMemberFacingIdentifier);
        fieldSetFlags()[94] = true;
      }
      if (isValidValue(fields()[95], other.subscriberSocialSecurityNumber)) {
        this.subscriberSocialSecurityNumber = data().deepCopy(fields()[95].schema(), other.subscriberSocialSecurityNumber);
        fieldSetFlags()[95] = true;
      }
      if (isValidValue(fields()[96], other.subsidizedInsuredPlans)) {
        this.subsidizedInsuredPlans = data().deepCopy(fields()[96].schema(), other.subsidizedInsuredPlans);
        fieldSetFlags()[96] = true;
      }
      if (isValidValue(fields()[97], other.terminationDate)) {
        this.terminationDate = data().deepCopy(fields()[97].schema(), other.terminationDate);
        fieldSetFlags()[97] = true;
      }
      if (isValidValue(fields()[98], other.terminationReason)) {
        this.terminationReason = data().deepCopy(fields()[98].schema(), other.terminationReason);
        fieldSetFlags()[98] = true;
      }
      this.terminationReasonBuilder = null;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }

    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setActive(boolean value) {
      validate(fields()[0], value);
      this.active = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearActive() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'applicationIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getApplicationIdentifier() {
      return applicationIdentifier;
    }

    /**
      * Sets the value of the 'applicationIdentifier' field.
      * @param value The value of 'applicationIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setApplicationIdentifier(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.applicationIdentifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'applicationIdentifier' field has been set.
      * @return True if the 'applicationIdentifier' field has been set, false otherwise.
      */
    public boolean hasApplicationIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'applicationIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearApplicationIdentifier() {
      applicationIdentifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'areaGroup' field.
      * @return The value.
      */
    public java.lang.CharSequence getAreaGroup() {
      return areaGroup;
    }

    /**
      * Sets the value of the 'areaGroup' field.
      * @param value The value of 'areaGroup'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setAreaGroup(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.areaGroup = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'areaGroup' field has been set.
      * @return True if the 'areaGroup' field has been set, false otherwise.
      */
    public boolean hasAreaGroup() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'areaGroup' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearAreaGroup() {
      areaGroup = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'benefitStatus' field.
      * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getBenefitStatus() {
      return benefitStatus;
    }

    /**
      * Sets the value of the 'benefitStatus' field.
      * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
      * @param value The value of 'benefitStatus'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBenefitStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[3], value);
      this.benefitStatusBuilder = null;
      this.benefitStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'benefitStatus' field has been set.
      * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
      * @return True if the 'benefitStatus' field has been set, false otherwise.
      */
    public boolean hasBenefitStatus() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'benefitStatus' field and creates one if it doesn't exist yet.
     * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getBenefitStatusBuilder() {
      if (benefitStatusBuilder == null) {
        if (hasBenefitStatus()) {
          setBenefitStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(benefitStatus));
        } else {
          setBenefitStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return benefitStatusBuilder;
    }

    /**
     * Sets the Builder instance for the 'benefitStatus' field
     * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setBenefitStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearBenefitStatus();
      benefitStatusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'benefitStatus' field has an active Builder instance
     * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
     * @return True if the 'benefitStatus' field has an active Builder instance
     */
    public boolean hasBenefitStatusBuilder() {
      return benefitStatusBuilder != null;
    }

    /**
      * Clears the value of the 'benefitStatus' field.
      * The type of coverage under which benefits are paid. Ex: A = Active, C = COBRA, etc.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBenefitStatus() {
      benefitStatus = null;
      benefitStatusBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'billingSubgroupNumber' field.
      * The billing subgroup number for this membership record.
      * @return The value.
      */
    public java.lang.CharSequence getBillingSubgroupNumber() {
      return billingSubgroupNumber;
    }

    /**
      * Sets the value of the 'billingSubgroupNumber' field.
      * The billing subgroup number for this membership record.
      * @param value The value of 'billingSubgroupNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBillingSubgroupNumber(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.billingSubgroupNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'billingSubgroupNumber' field has been set.
      * The billing subgroup number for this membership record.
      * @return True if the 'billingSubgroupNumber' field has been set, false otherwise.
      */
    public boolean hasBillingSubgroupNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'billingSubgroupNumber' field.
      * The billing subgroup number for this membership record.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBillingSubgroupNumber() {
      billingSubgroupNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookOfBusiness' field.
      * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getBookOfBusiness() {
      return bookOfBusiness;
    }

    /**
      * Sets the value of the 'bookOfBusiness' field.
      * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
      * @param value The value of 'bookOfBusiness'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBookOfBusiness(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[5], value);
      this.bookOfBusinessBuilder = null;
      this.bookOfBusiness = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bookOfBusiness' field has been set.
      * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
      * @return True if the 'bookOfBusiness' field has been set, false otherwise.
      */
    public boolean hasBookOfBusiness() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'bookOfBusiness' field and creates one if it doesn't exist yet.
     * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getBookOfBusinessBuilder() {
      if (bookOfBusinessBuilder == null) {
        if (hasBookOfBusiness()) {
          setBookOfBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(bookOfBusiness));
        } else {
          setBookOfBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return bookOfBusinessBuilder;
    }

    /**
     * Sets the Builder instance for the 'bookOfBusiness' field
     * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setBookOfBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearBookOfBusiness();
      bookOfBusinessBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bookOfBusiness' field has an active Builder instance
     * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
     * @return True if the 'bookOfBusiness' field has an active Builder instance
     */
    public boolean hasBookOfBusinessBuilder() {
      return bookOfBusinessBuilder != null;
    }

    /**
      * Clears the value of the 'bookOfBusiness' field.
      * A categorization for an individual Membership record (e.g., Oxford, Level Funded, etc.).
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBookOfBusiness() {
      bookOfBusiness = null;
      bookOfBusinessBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getBrandIdentifier() {
      return brandIdentifier;
    }

    /**
      * Sets the value of the 'brandIdentifier' field.
      * @param value The value of 'brandIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBrandIdentifier(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.brandIdentifier = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'brandIdentifier' field has been set.
      * @return True if the 'brandIdentifier' field has been set, false otherwise.
      */
    public boolean hasBrandIdentifier() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'brandIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBrandIdentifier() {
      brandIdentifier = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandingEntity' field.
      * Code and description for the membership branding entity.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getBrandingEntity() {
      return brandingEntity;
    }

    /**
      * Sets the value of the 'brandingEntity' field.
      * Code and description for the membership branding entity.
      * @param value The value of 'brandingEntity'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBrandingEntity(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[7], value);
      this.brandingEntityBuilder = null;
      this.brandingEntity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'brandingEntity' field has been set.
      * Code and description for the membership branding entity.
      * @return True if the 'brandingEntity' field has been set, false otherwise.
      */
    public boolean hasBrandingEntity() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'brandingEntity' field and creates one if it doesn't exist yet.
     * Code and description for the membership branding entity.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getBrandingEntityBuilder() {
      if (brandingEntityBuilder == null) {
        if (hasBrandingEntity()) {
          setBrandingEntityBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(brandingEntity));
        } else {
          setBrandingEntityBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return brandingEntityBuilder;
    }

    /**
     * Sets the Builder instance for the 'brandingEntity' field
     * Code and description for the membership branding entity.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setBrandingEntityBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearBrandingEntity();
      brandingEntityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'brandingEntity' field has an active Builder instance
     * Code and description for the membership branding entity.
     * @return True if the 'brandingEntity' field has an active Builder instance
     */
    public boolean hasBrandingEntityBuilder() {
      return brandingEntityBuilder != null;
    }

    /**
      * Clears the value of the 'brandingEntity' field.
      * Code and description for the membership branding entity.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBrandingEntity() {
      brandingEntity = null;
      brandingEntityBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandName' field.
      * @return The value.
      */
    public java.lang.CharSequence getBrandName() {
      return brandName;
    }

    /**
      * Sets the value of the 'brandName' field.
      * @param value The value of 'brandName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBrandName(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.brandName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'brandName' field has been set.
      * @return True if the 'brandName' field has been set, false otherwise.
      */
    public boolean hasBrandName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'brandName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBrandName() {
      brandName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bundleOptionPlans' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> getBundleOptionPlans() {
      return bundleOptionPlans;
    }

    /**
      * Sets the value of the 'bundleOptionPlans' field.
      * @param value The value of 'bundleOptionPlans'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBundleOptionPlans(java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan> value) {
      validate(fields()[9], value);
      this.bundleOptionPlans = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bundleOptionPlans' field has been set.
      * @return True if the 'bundleOptionPlans' field has been set, false otherwise.
      */
    public boolean hasBundleOptionPlans() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bundleOptionPlans' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBundleOptionPlans() {
      bundleOptionPlans = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'business' field.
      * Highest level business entity. E.g., Optum or UHC.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getBusiness() {
      return business;
    }

    /**
      * Sets the value of the 'business' field.
      * Highest level business entity. E.g., Optum or UHC.
      * @param value The value of 'business'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBusiness(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[10], value);
      this.businessBuilder = null;
      this.business = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'business' field has been set.
      * Highest level business entity. E.g., Optum or UHC.
      * @return True if the 'business' field has been set, false otherwise.
      */
    public boolean hasBusiness() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'business' field and creates one if it doesn't exist yet.
     * Highest level business entity. E.g., Optum or UHC.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getBusinessBuilder() {
      if (businessBuilder == null) {
        if (hasBusiness()) {
          setBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(business));
        } else {
          setBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return businessBuilder;
    }

    /**
     * Sets the Builder instance for the 'business' field
     * Highest level business entity. E.g., Optum or UHC.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setBusinessBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearBusiness();
      businessBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'business' field has an active Builder instance
     * Highest level business entity. E.g., Optum or UHC.
     * @return True if the 'business' field has an active Builder instance
     */
    public boolean hasBusinessBuilder() {
      return businessBuilder != null;
    }

    /**
      * Clears the value of the 'business' field.
      * Highest level business entity. E.g., Optum or UHC.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBusiness() {
      business = null;
      businessBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'businessSegment' field.
      * @return The value.
      */
    public java.lang.CharSequence getBusinessSegment() {
      return businessSegment;
    }

    /**
      * Sets the value of the 'businessSegment' field.
      * @param value The value of 'businessSegment'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setBusinessSegment(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.businessSegment = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'businessSegment' field has been set.
      * @return True if the 'businessSegment' field has been set, false otherwise.
      */
    public boolean hasBusinessSegment() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'businessSegment' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearBusinessSegment() {
      businessSegment = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'calap' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.membership.CALAP getCalap() {
      return calap;
    }

    /**
      * Sets the value of the 'calap' field.
      * @param value The value of 'calap'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCalap(com.uhc.schema.model.eligibility.membership.CALAP value) {
      validate(fields()[12], value);
      this.calapBuilder = null;
      this.calap = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'calap' field has been set.
      * @return True if the 'calap' field has been set, false otherwise.
      */
    public boolean hasCalap() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'calap' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.CALAP.Builder getCalapBuilder() {
      if (calapBuilder == null) {
        if (hasCalap()) {
          setCalapBuilder(com.uhc.schema.model.eligibility.membership.CALAP.newBuilder(calap));
        } else {
          setCalapBuilder(com.uhc.schema.model.eligibility.membership.CALAP.newBuilder());
        }
      }
      return calapBuilder;
    }

    /**
     * Sets the Builder instance for the 'calap' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCalapBuilder(com.uhc.schema.model.eligibility.membership.CALAP.Builder value) {
      clearCalap();
      calapBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'calap' field has an active Builder instance
     * @return True if the 'calap' field has an active Builder instance
     */
    public boolean hasCalapBuilder() {
      return calapBuilder != null;
    }

    /**
      * Clears the value of the 'calap' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCalap() {
      calap = null;
      calapBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'cancelReasonType' field.
      * Reason coverage was cancelled.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCancelReasonType() {
      return cancelReasonType;
    }

    /**
      * Sets the value of the 'cancelReasonType' field.
      * Reason coverage was cancelled.
      * @param value The value of 'cancelReasonType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCancelReasonType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[13], value);
      this.cancelReasonTypeBuilder = null;
      this.cancelReasonType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'cancelReasonType' field has been set.
      * Reason coverage was cancelled.
      * @return True if the 'cancelReasonType' field has been set, false otherwise.
      */
    public boolean hasCancelReasonType() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'cancelReasonType' field and creates one if it doesn't exist yet.
     * Reason coverage was cancelled.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCancelReasonTypeBuilder() {
      if (cancelReasonTypeBuilder == null) {
        if (hasCancelReasonType()) {
          setCancelReasonTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(cancelReasonType));
        } else {
          setCancelReasonTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return cancelReasonTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'cancelReasonType' field
     * Reason coverage was cancelled.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCancelReasonTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCancelReasonType();
      cancelReasonTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cancelReasonType' field has an active Builder instance
     * Reason coverage was cancelled.
     * @return True if the 'cancelReasonType' field has an active Builder instance
     */
    public boolean hasCancelReasonTypeBuilder() {
      return cancelReasonTypeBuilder != null;
    }

    /**
      * Clears the value of the 'cancelReasonType' field.
      * Reason coverage was cancelled.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCancelReasonType() {
      cancelReasonType = null;
      cancelReasonTypeBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'claimSystemType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getClaimSystemType() {
      return claimSystemType;
    }

    /**
      * Sets the value of the 'claimSystemType' field.
      * @param value The value of 'claimSystemType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setClaimSystemType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[14], value);
      this.claimSystemTypeBuilder = null;
      this.claimSystemType = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'claimSystemType' field has been set.
      * @return True if the 'claimSystemType' field has been set, false otherwise.
      */
    public boolean hasClaimSystemType() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'claimSystemType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getClaimSystemTypeBuilder() {
      if (claimSystemTypeBuilder == null) {
        if (hasClaimSystemType()) {
          setClaimSystemTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(claimSystemType));
        } else {
          setClaimSystemTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return claimSystemTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'claimSystemType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setClaimSystemTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearClaimSystemType();
      claimSystemTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'claimSystemType' field has an active Builder instance
     * @return True if the 'claimSystemType' field has an active Builder instance
     */
    public boolean hasClaimSystemTypeBuilder() {
      return claimSystemTypeBuilder != null;
    }

    /**
      * Clears the value of the 'claimSystemType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearClaimSystemType() {
      claimSystemType = null;
      claimSystemTypeBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverageLevel' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCoverageLevel() {
      return coverageLevel;
    }

    /**
      * Sets the value of the 'coverageLevel' field.
      * @param value The value of 'coverageLevel'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoverageLevel(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[15], value);
      this.coverageLevelBuilder = null;
      this.coverageLevel = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'coverageLevel' field has been set.
      * @return True if the 'coverageLevel' field has been set, false otherwise.
      */
    public boolean hasCoverageLevel() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'coverageLevel' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCoverageLevelBuilder() {
      if (coverageLevelBuilder == null) {
        if (hasCoverageLevel()) {
          setCoverageLevelBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(coverageLevel));
        } else {
          setCoverageLevelBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return coverageLevelBuilder;
    }

    /**
     * Sets the Builder instance for the 'coverageLevel' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoverageLevelBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCoverageLevel();
      coverageLevelBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coverageLevel' field has an active Builder instance
     * @return True if the 'coverageLevel' field has an active Builder instance
     */
    public boolean hasCoverageLevelBuilder() {
      return coverageLevelBuilder != null;
    }

    /**
      * Clears the value of the 'coverageLevel' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCoverageLevel() {
      coverageLevel = null;
      coverageLevelBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'coveragePaidThruDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getCoveragePaidThruDate() {
      return coveragePaidThruDate;
    }

    /**
      * Sets the value of the 'coveragePaidThruDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'coveragePaidThruDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoveragePaidThruDate(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.coveragePaidThruDate = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'coveragePaidThruDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'coveragePaidThruDate' field has been set, false otherwise.
      */
    public boolean hasCoveragePaidThruDate() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'coveragePaidThruDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCoveragePaidThruDate() {
      coveragePaidThruDate = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'coveragePaidThruReason' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCoveragePaidThruReason() {
      return coveragePaidThruReason;
    }

    /**
      * Sets the value of the 'coveragePaidThruReason' field.
      * @param value The value of 'coveragePaidThruReason'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoveragePaidThruReason(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[17], value);
      this.coveragePaidThruReasonBuilder = null;
      this.coveragePaidThruReason = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'coveragePaidThruReason' field has been set.
      * @return True if the 'coveragePaidThruReason' field has been set, false otherwise.
      */
    public boolean hasCoveragePaidThruReason() {
      return fieldSetFlags()[17];
    }

    /**
     * Gets the Builder instance for the 'coveragePaidThruReason' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCoveragePaidThruReasonBuilder() {
      if (coveragePaidThruReasonBuilder == null) {
        if (hasCoveragePaidThruReason()) {
          setCoveragePaidThruReasonBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(coveragePaidThruReason));
        } else {
          setCoveragePaidThruReasonBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return coveragePaidThruReasonBuilder;
    }

    /**
     * Sets the Builder instance for the 'coveragePaidThruReason' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoveragePaidThruReasonBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCoveragePaidThruReason();
      coveragePaidThruReasonBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coveragePaidThruReason' field has an active Builder instance
     * @return True if the 'coveragePaidThruReason' field has an active Builder instance
     */
    public boolean hasCoveragePaidThruReasonBuilder() {
      return coveragePaidThruReasonBuilder != null;
    }

    /**
      * Clears the value of the 'coveragePaidThruReason' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCoveragePaidThruReason() {
      coveragePaidThruReason = null;
      coveragePaidThruReasonBuilder = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverageStatus' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCoverageStatus() {
      return coverageStatus;
    }

    /**
      * Sets the value of the 'coverageStatus' field.
      * @param value The value of 'coverageStatus'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoverageStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[18], value);
      this.coverageStatusBuilder = null;
      this.coverageStatus = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'coverageStatus' field has been set.
      * @return True if the 'coverageStatus' field has been set, false otherwise.
      */
    public boolean hasCoverageStatus() {
      return fieldSetFlags()[18];
    }

    /**
     * Gets the Builder instance for the 'coverageStatus' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCoverageStatusBuilder() {
      if (coverageStatusBuilder == null) {
        if (hasCoverageStatus()) {
          setCoverageStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(coverageStatus));
        } else {
          setCoverageStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return coverageStatusBuilder;
    }

    /**
     * Sets the Builder instance for the 'coverageStatus' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCoverageStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCoverageStatus();
      coverageStatusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coverageStatus' field has an active Builder instance
     * @return True if the 'coverageStatus' field has an active Builder instance
     */
    public boolean hasCoverageStatusBuilder() {
      return coverageStatusBuilder != null;
    }

    /**
      * Clears the value of the 'coverageStatus' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCoverageStatus() {
      coverageStatus = null;
      coverageStatusBuilder = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getCreationDate() {
      return creationDate;
    }

    /**
      * Sets the value of the 'creationDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'creationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCreationDate(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.creationDate = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'creationDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'creationDate' field has been set, false otherwise.
      */
    public boolean hasCreationDate() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'creationDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCreationDate() {
      creationDate = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerAccount' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.CustomerAccount getCustomerAccount() {
      return customerAccount;
    }

    /**
      * Sets the value of the 'customerAccount' field.
      * @param value The value of 'customerAccount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerAccount(com.uhc.schema.model.eligibility.CustomerAccount value) {
      validate(fields()[20], value);
      this.customerAccountBuilder = null;
      this.customerAccount = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'customerAccount' field has been set.
      * @return True if the 'customerAccount' field has been set, false otherwise.
      */
    public boolean hasCustomerAccount() {
      return fieldSetFlags()[20];
    }

    /**
     * Gets the Builder instance for the 'customerAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.CustomerAccount.Builder getCustomerAccountBuilder() {
      if (customerAccountBuilder == null) {
        if (hasCustomerAccount()) {
          setCustomerAccountBuilder(com.uhc.schema.model.eligibility.CustomerAccount.newBuilder(customerAccount));
        } else {
          setCustomerAccountBuilder(com.uhc.schema.model.eligibility.CustomerAccount.newBuilder());
        }
      }
      return customerAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'customerAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerAccountBuilder(com.uhc.schema.model.eligibility.CustomerAccount.Builder value) {
      clearCustomerAccount();
      customerAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customerAccount' field has an active Builder instance
     * @return True if the 'customerAccount' field has an active Builder instance
     */
    public boolean hasCustomerAccountBuilder() {
      return customerAccountBuilder != null;
    }

    /**
      * Clears the value of the 'customerAccount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerAccount() {
      customerAccount = null;
      customerAccountBuilder = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerAccountIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerAccountIdentifier() {
      return customerAccountIdentifier;
    }

    /**
      * Sets the value of the 'customerAccountIdentifier' field.
      * @param value The value of 'customerAccountIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerAccountIdentifier(java.lang.CharSequence value) {
      validate(fields()[21], value);
      this.customerAccountIdentifier = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'customerAccountIdentifier' field has been set.
      * @return True if the 'customerAccountIdentifier' field has been set, false otherwise.
      */
    public boolean hasCustomerAccountIdentifier() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'customerAccountIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerAccountIdentifier() {
      customerAccountIdentifier = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseEffectiveDate' field.
      * Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getCustomerPurchaseEffectiveDate() {
      return customerPurchaseEffectiveDate;
    }

    /**
      * Sets the value of the 'customerPurchaseEffectiveDate' field.
      * Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @param value The value of 'customerPurchaseEffectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[22], value);
      this.customerPurchaseEffectiveDate = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseEffectiveDate' field has been set.
      * Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @return True if the 'customerPurchaseEffectiveDate' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseEffectiveDate() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'customerPurchaseEffectiveDate' field.
      * Effective date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseEffectiveDate() {
      customerPurchaseEffectiveDate = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerPurchaseIdentifier() {
      return customerPurchaseIdentifier;
    }

    /**
      * Sets the value of the 'customerPurchaseIdentifier' field.
      * @param value The value of 'customerPurchaseIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseIdentifier(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.customerPurchaseIdentifier = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseIdentifier' field has been set.
      * @return True if the 'customerPurchaseIdentifier' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseIdentifier() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'customerPurchaseIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseIdentifier() {
      customerPurchaseIdentifier = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseOptionIdentifier' field.
      * Identifier for a group of plan purchases.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerPurchaseOptionIdentifier() {
      return customerPurchaseOptionIdentifier;
    }

    /**
      * Sets the value of the 'customerPurchaseOptionIdentifier' field.
      * Identifier for a group of plan purchases.
      * @param value The value of 'customerPurchaseOptionIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseOptionIdentifier(java.lang.CharSequence value) {
      validate(fields()[24], value);
      this.customerPurchaseOptionIdentifier = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseOptionIdentifier' field has been set.
      * Identifier for a group of plan purchases.
      * @return True if the 'customerPurchaseOptionIdentifier' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseOptionIdentifier() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'customerPurchaseOptionIdentifier' field.
      * Identifier for a group of plan purchases.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseOptionIdentifier() {
      customerPurchaseOptionIdentifier = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseStatus' field.
      * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCustomerPurchaseStatus() {
      return customerPurchaseStatus;
    }

    /**
      * Sets the value of the 'customerPurchaseStatus' field.
      * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
      * @param value The value of 'customerPurchaseStatus'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[25], value);
      this.customerPurchaseStatusBuilder = null;
      this.customerPurchaseStatus = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseStatus' field has been set.
      * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
      * @return True if the 'customerPurchaseStatus' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseStatus() {
      return fieldSetFlags()[25];
    }

    /**
     * Gets the Builder instance for the 'customerPurchaseStatus' field and creates one if it doesn't exist yet.
     * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCustomerPurchaseStatusBuilder() {
      if (customerPurchaseStatusBuilder == null) {
        if (hasCustomerPurchaseStatus()) {
          setCustomerPurchaseStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(customerPurchaseStatus));
        } else {
          setCustomerPurchaseStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return customerPurchaseStatusBuilder;
    }

    /**
     * Sets the Builder instance for the 'customerPurchaseStatus' field
     * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCustomerPurchaseStatus();
      customerPurchaseStatusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customerPurchaseStatus' field has an active Builder instance
     * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
     * @return True if the 'customerPurchaseStatus' field has an active Builder instance
     */
    public boolean hasCustomerPurchaseStatusBuilder() {
      return customerPurchaseStatusBuilder != null;
    }

    /**
      * Clears the value of the 'customerPurchaseStatus' field.
      * Code and description for the current status of the Customer Purchase. E.g., Active, Inactive, Cancelled, Building, etc.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseStatus() {
      customerPurchaseStatus = null;
      customerPurchaseStatusBuilder = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseTerminationDate' field.
      * Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getCustomerPurchaseTerminationDate() {
      return customerPurchaseTerminationDate;
    }

    /**
      * Sets the value of the 'customerPurchaseTerminationDate' field.
      * Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @param value The value of 'customerPurchaseTerminationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseTerminationDate(java.lang.CharSequence value) {
      validate(fields()[26], value);
      this.customerPurchaseTerminationDate = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseTerminationDate' field has been set.
      * Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @return True if the 'customerPurchaseTerminationDate' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseTerminationDate() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'customerPurchaseTerminationDate' field.
      * Termination date for the memberships's Customer Purchase record. Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseTerminationDate() {
      customerPurchaseTerminationDate = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseType' field.
      * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCustomerPurchaseType() {
      return customerPurchaseType;
    }

    /**
      * Sets the value of the 'customerPurchaseType' field.
      * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
      * @param value The value of 'customerPurchaseType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[27], value);
      this.customerPurchaseTypeBuilder = null;
      this.customerPurchaseType = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseType' field has been set.
      * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
      * @return True if the 'customerPurchaseType' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseType() {
      return fieldSetFlags()[27];
    }

    /**
     * Gets the Builder instance for the 'customerPurchaseType' field and creates one if it doesn't exist yet.
     * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCustomerPurchaseTypeBuilder() {
      if (customerPurchaseTypeBuilder == null) {
        if (hasCustomerPurchaseType()) {
          setCustomerPurchaseTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(customerPurchaseType));
        } else {
          setCustomerPurchaseTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return customerPurchaseTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'customerPurchaseType' field
     * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCustomerPurchaseType();
      customerPurchaseTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customerPurchaseType' field has an active Builder instance
     * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
     * @return True if the 'customerPurchaseType' field has an active Builder instance
     */
    public boolean hasCustomerPurchaseTypeBuilder() {
      return customerPurchaseTypeBuilder != null;
    }

    /**
      * Clears the value of the 'customerPurchaseType' field.
      * Code and description for the type of Customer Purchase. E.g., Medical with Embedded Dental, Stand-Alone Vision, Stand-Alone Dental, Life Insurance, etc.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseType() {
      customerPurchaseType = null;
      customerPurchaseTypeBuilder = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerPurchaseVersionNumber' field.
      * Current version number of the Customer Purchase for this membership record.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerPurchaseVersionNumber() {
      return customerPurchaseVersionNumber;
    }

    /**
      * Sets the value of the 'customerPurchaseVersionNumber' field.
      * Current version number of the Customer Purchase for this membership record.
      * @param value The value of 'customerPurchaseVersionNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setCustomerPurchaseVersionNumber(java.lang.CharSequence value) {
      validate(fields()[28], value);
      this.customerPurchaseVersionNumber = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'customerPurchaseVersionNumber' field has been set.
      * Current version number of the Customer Purchase for this membership record.
      * @return True if the 'customerPurchaseVersionNumber' field has been set, false otherwise.
      */
    public boolean hasCustomerPurchaseVersionNumber() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'customerPurchaseVersionNumber' field.
      * Current version number of the Customer Purchase for this membership record.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearCustomerPurchaseVersionNumber() {
      customerPurchaseVersionNumber = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'differentFamilyMemberAddressIndicator' field.
      * Indicates that this member's address is different from the rest of the family.
      * @return The value.
      */
    public java.lang.CharSequence getDifferentFamilyMemberAddressIndicator() {
      return differentFamilyMemberAddressIndicator;
    }

    /**
      * Sets the value of the 'differentFamilyMemberAddressIndicator' field.
      * Indicates that this member's address is different from the rest of the family.
      * @param value The value of 'differentFamilyMemberAddressIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setDifferentFamilyMemberAddressIndicator(java.lang.CharSequence value) {
      validate(fields()[29], value);
      this.differentFamilyMemberAddressIndicator = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'differentFamilyMemberAddressIndicator' field has been set.
      * Indicates that this member's address is different from the rest of the family.
      * @return True if the 'differentFamilyMemberAddressIndicator' field has been set, false otherwise.
      */
    public boolean hasDifferentFamilyMemberAddressIndicator() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'differentFamilyMemberAddressIndicator' field.
      * Indicates that this member's address is different from the rest of the family.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearDifferentFamilyMemberAddressIndicator() {
      differentFamilyMemberAddressIndicator = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'divisionCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getDivisionCode() {
      return divisionCode;
    }

    /**
      * Sets the value of the 'divisionCode' field.
      * @param value The value of 'divisionCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setDivisionCode(java.lang.CharSequence value) {
      validate(fields()[30], value);
      this.divisionCode = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'divisionCode' field has been set.
      * @return True if the 'divisionCode' field has been set, false otherwise.
      */
    public boolean hasDivisionCode() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'divisionCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearDivisionCode() {
      divisionCode = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'distributionChannel' field.
      * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getDistributionChannel() {
      return distributionChannel;
    }

    /**
      * Sets the value of the 'distributionChannel' field.
      * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
      * @param value The value of 'distributionChannel'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setDistributionChannel(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[31], value);
      this.distributionChannelBuilder = null;
      this.distributionChannel = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'distributionChannel' field has been set.
      * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
      * @return True if the 'distributionChannel' field has been set, false otherwise.
      */
    public boolean hasDistributionChannel() {
      return fieldSetFlags()[31];
    }

    /**
     * Gets the Builder instance for the 'distributionChannel' field and creates one if it doesn't exist yet.
     * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getDistributionChannelBuilder() {
      if (distributionChannelBuilder == null) {
        if (hasDistributionChannel()) {
          setDistributionChannelBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(distributionChannel));
        } else {
          setDistributionChannelBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return distributionChannelBuilder;
    }

    /**
     * Sets the Builder instance for the 'distributionChannel' field
     * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setDistributionChannelBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearDistributionChannel();
      distributionChannelBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'distributionChannel' field has an active Builder instance
     * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
     * @return True if the 'distributionChannel' field has an active Builder instance
     */
    public boolean hasDistributionChannelBuilder() {
      return distributionChannelBuilder != null;
    }

    /**
      * Clears the value of the 'distributionChannel' field.
      * A specific channel through which the Enterprise makes its products available for purchase by prospective customers. E.g., On Exchange, Off Exchange, Private Exchange, Public Exchange, Federally Facilitated vs State Run, State and Federal Partnership
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearDistributionChannel() {
      distributionChannel = null;
      distributionChannelBuilder = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effectiveDate;
    }

    /**
      * Sets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'effectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[32], value);
      this.effectiveDate = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'effectiveDate' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEffectiveDate() {
      effectiveDate = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'eligibilityGracePeriodThruDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEligibilityGracePeriodThruDate() {
      return eligibilityGracePeriodThruDate;
    }

    /**
      * Sets the value of the 'eligibilityGracePeriodThruDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'eligibilityGracePeriodThruDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEligibilityGracePeriodThruDate(java.lang.CharSequence value) {
      validate(fields()[33], value);
      this.eligibilityGracePeriodThruDate = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'eligibilityGracePeriodThruDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'eligibilityGracePeriodThruDate' field has been set, false otherwise.
      */
    public boolean hasEligibilityGracePeriodThruDate() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'eligibilityGracePeriodThruDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEligibilityGracePeriodThruDate() {
      eligibilityGracePeriodThruDate = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'eligibilitySystemType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getEligibilitySystemType() {
      return eligibilitySystemType;
    }

    /**
      * Sets the value of the 'eligibilitySystemType' field.
      * @param value The value of 'eligibilitySystemType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEligibilitySystemType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[34], value);
      this.eligibilitySystemTypeBuilder = null;
      this.eligibilitySystemType = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'eligibilitySystemType' field has been set.
      * @return True if the 'eligibilitySystemType' field has been set, false otherwise.
      */
    public boolean hasEligibilitySystemType() {
      return fieldSetFlags()[34];
    }

    /**
     * Gets the Builder instance for the 'eligibilitySystemType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getEligibilitySystemTypeBuilder() {
      if (eligibilitySystemTypeBuilder == null) {
        if (hasEligibilitySystemType()) {
          setEligibilitySystemTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(eligibilitySystemType));
        } else {
          setEligibilitySystemTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return eligibilitySystemTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'eligibilitySystemType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setEligibilitySystemTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearEligibilitySystemType();
      eligibilitySystemTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'eligibilitySystemType' field has an active Builder instance
     * @return True if the 'eligibilitySystemType' field has an active Builder instance
     */
    public boolean hasEligibilitySystemTypeBuilder() {
      return eligibilitySystemTypeBuilder != null;
    }

    /**
      * Clears the value of the 'eligibilitySystemType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEligibilitySystemType() {
      eligibilitySystemType = null;
      eligibilitySystemTypeBuilder = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'employerIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmployerIdentifier() {
      return employerIdentifier;
    }

    /**
      * Sets the value of the 'employerIdentifier' field.
      * @param value The value of 'employerIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEmployerIdentifier(java.lang.CharSequence value) {
      validate(fields()[35], value);
      this.employerIdentifier = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'employerIdentifier' field has been set.
      * @return True if the 'employerIdentifier' field has been set, false otherwise.
      */
    public boolean hasEmployerIdentifier() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'employerIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEmployerIdentifier() {
      employerIdentifier = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'enrolleeMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @return The value.
      */
    public java.lang.CharSequence getEnrolleeMemberFacingIdentifier() {
      return enrolleeMemberFacingIdentifier;
    }

    /**
      * Sets the value of the 'enrolleeMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @param value The value of 'enrolleeMemberFacingIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEnrolleeMemberFacingIdentifier(java.lang.CharSequence value) {
      validate(fields()[36], value);
      this.enrolleeMemberFacingIdentifier = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'enrolleeMemberFacingIdentifier' field has been set.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @return True if the 'enrolleeMemberFacingIdentifier' field has been set, false otherwise.
      */
    public boolean hasEnrolleeMemberFacingIdentifier() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'enrolleeMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEnrolleeMemberFacingIdentifier() {
      enrolleeMemberFacingIdentifier = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'enrolleeSourceCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnrolleeSourceCode() {
      return enrolleeSourceCode;
    }

    /**
      * Sets the value of the 'enrolleeSourceCode' field.
      * @param value The value of 'enrolleeSourceCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEnrolleeSourceCode(java.lang.CharSequence value) {
      validate(fields()[37], value);
      this.enrolleeSourceCode = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'enrolleeSourceCode' field has been set.
      * @return True if the 'enrolleeSourceCode' field has been set, false otherwise.
      */
    public boolean hasEnrolleeSourceCode() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'enrolleeSourceCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEnrolleeSourceCode() {
      enrolleeSourceCode = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'enrolleeSourceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnrolleeSourceId() {
      return enrolleeSourceId;
    }

    /**
      * Sets the value of the 'enrolleeSourceId' field.
      * @param value The value of 'enrolleeSourceId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setEnrolleeSourceId(java.lang.CharSequence value) {
      validate(fields()[38], value);
      this.enrolleeSourceId = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'enrolleeSourceId' field has been set.
      * @return True if the 'enrolleeSourceId' field has been set, false otherwise.
      */
    public boolean hasEnrolleeSourceId() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'enrolleeSourceId' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearEnrolleeSourceId() {
      enrolleeSourceId = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'erisaIndicator' field.
      * Employee Retirement Income Security Act (ERISA) Indicator.
      * @return The value.
      */
    public java.lang.CharSequence getErisaIndicator() {
      return erisaIndicator;
    }

    /**
      * Sets the value of the 'erisaIndicator' field.
      * Employee Retirement Income Security Act (ERISA) Indicator.
      * @param value The value of 'erisaIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setErisaIndicator(java.lang.CharSequence value) {
      validate(fields()[39], value);
      this.erisaIndicator = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'erisaIndicator' field has been set.
      * Employee Retirement Income Security Act (ERISA) Indicator.
      * @return True if the 'erisaIndicator' field has been set, false otherwise.
      */
    public boolean hasErisaIndicator() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'erisaIndicator' field.
      * Employee Retirement Income Security Act (ERISA) Indicator.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearErisaIndicator() {
      erisaIndicator = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'familyLastUpdatedTimestamp' field.
      * The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return The value.
      */
    public java.lang.CharSequence getFamilyLastUpdatedTimestamp() {
      return familyLastUpdatedTimestamp;
    }

    /**
      * Sets the value of the 'familyLastUpdatedTimestamp' field.
      * The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @param value The value of 'familyLastUpdatedTimestamp'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setFamilyLastUpdatedTimestamp(java.lang.CharSequence value) {
      validate(fields()[40], value);
      this.familyLastUpdatedTimestamp = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'familyLastUpdatedTimestamp' field has been set.
      * The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return True if the 'familyLastUpdatedTimestamp' field has been set, false otherwise.
      */
    public boolean hasFamilyLastUpdatedTimestamp() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'familyLastUpdatedTimestamp' field.
      * The last time the family was updated on the source system in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearFamilyLastUpdatedTimestamp() {
      familyLastUpdatedTimestamp = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'financialAccount' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.membership.FinancialAccount getFinancialAccount() {
      return financialAccount;
    }

    /**
      * Sets the value of the 'financialAccount' field.
      * @param value The value of 'financialAccount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setFinancialAccount(com.uhc.schema.model.eligibility.membership.FinancialAccount value) {
      validate(fields()[41], value);
      this.financialAccountBuilder = null;
      this.financialAccount = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'financialAccount' field has been set.
      * @return True if the 'financialAccount' field has been set, false otherwise.
      */
    public boolean hasFinancialAccount() {
      return fieldSetFlags()[41];
    }

    /**
     * Gets the Builder instance for the 'financialAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.FinancialAccount.Builder getFinancialAccountBuilder() {
      if (financialAccountBuilder == null) {
        if (hasFinancialAccount()) {
          setFinancialAccountBuilder(com.uhc.schema.model.eligibility.membership.FinancialAccount.newBuilder(financialAccount));
        } else {
          setFinancialAccountBuilder(com.uhc.schema.model.eligibility.membership.FinancialAccount.newBuilder());
        }
      }
      return financialAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'financialAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setFinancialAccountBuilder(com.uhc.schema.model.eligibility.membership.FinancialAccount.Builder value) {
      clearFinancialAccount();
      financialAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'financialAccount' field has an active Builder instance
     * @return True if the 'financialAccount' field has an active Builder instance
     */
    public boolean hasFinancialAccountBuilder() {
      return financialAccountBuilder != null;
    }

    /**
      * Clears the value of the 'financialAccount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearFinancialAccount() {
      financialAccount = null;
      financialAccountBuilder = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'hContractId' field.
      * @return The value.
      */
    public java.lang.CharSequence getHContractId() {
      return hContractId;
    }

    /**
      * Sets the value of the 'hContractId' field.
      * @param value The value of 'hContractId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setHContractId(java.lang.CharSequence value) {
      validate(fields()[42], value);
      this.hContractId = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'hContractId' field has been set.
      * @return True if the 'hContractId' field has been set, false otherwise.
      */
    public boolean hasHContractId() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'hContractId' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearHContractId() {
      hContractId = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'healthPlanCode' field.
      * The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
      * @return The value.
      */
    public java.lang.CharSequence getHealthPlanCode() {
      return healthPlanCode;
    }

    /**
      * Sets the value of the 'healthPlanCode' field.
      * The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
      * @param value The value of 'healthPlanCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setHealthPlanCode(java.lang.CharSequence value) {
      validate(fields()[43], value);
      this.healthPlanCode = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'healthPlanCode' field has been set.
      * The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
      * @return True if the 'healthPlanCode' field has been set, false otherwise.
      */
    public boolean hasHealthPlanCode() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'healthPlanCode' field.
      * The health plan code designates the specific plan benefit for a plan in a series. For example, if the Health Program Code is AN, an AN-A health plan code has the specific copayments, coinsurances, deductibles etc for that specific plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearHealthPlanCode() {
      healthPlanCode = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'healthProgramCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getHealthProgramCode() {
      return healthProgramCode;
    }

    /**
      * Sets the value of the 'healthProgramCode' field.
      * @param value The value of 'healthProgramCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setHealthProgramCode(java.lang.CharSequence value) {
      validate(fields()[44], value);
      this.healthProgramCode = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'healthProgramCode' field has been set.
      * @return True if the 'healthProgramCode' field has been set, false otherwise.
      */
    public boolean hasHealthProgramCode() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'healthProgramCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearHealthProgramCode() {
      healthProgramCode = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'holdReason' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> getHoldReason() {
      return holdReason;
    }

    /**
      * Sets the value of the 'holdReason' field.
      * @param value The value of 'holdReason'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setHoldReason(java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason> value) {
      validate(fields()[45], value);
      this.holdReason = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'holdReason' field has been set.
      * @return True if the 'holdReason' field has been set, false otherwise.
      */
    public boolean hasHoldReason() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'holdReason' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearHoldReason() {
      holdReason = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'individualIdentifier' field.
      * The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
      * @return The value.
      */
    public java.lang.CharSequence getIndividualIdentifier() {
      return individualIdentifier;
    }

    /**
      * Sets the value of the 'individualIdentifier' field.
      * The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
      * @param value The value of 'individualIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setIndividualIdentifier(java.lang.CharSequence value) {
      validate(fields()[46], value);
      this.individualIdentifier = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'individualIdentifier' field has been set.
      * The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
      * @return True if the 'individualIdentifier' field has been set, false otherwise.
      */
    public boolean hasIndividualIdentifier() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'individualIdentifier' field.
      * The unique key for an individual from a specific source (e.g. PART_NBR + CNSM_ID + SRC_CD + LGCY_SRC_ID)
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearIndividualIdentifier() {
      individualIdentifier = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'individualTerminationDate' field.
      * Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getIndividualTerminationDate() {
      return individualTerminationDate;
    }

    /**
      * Sets the value of the 'individualTerminationDate' field.
      * Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
      * @param value The value of 'individualTerminationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setIndividualTerminationDate(java.lang.CharSequence value) {
      validate(fields()[47], value);
      this.individualTerminationDate = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'individualTerminationDate' field has been set.
      * Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
      * @return True if the 'individualTerminationDate' field has been set, false otherwise.
      */
    public boolean hasIndividualTerminationDate() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'individualTerminationDate' field.
      * Date when the identifier for this Individual is no longer valid. Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearIndividualTerminationDate() {
      individualTerminationDate = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPremiumPaidDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getLastPremiumPaidDate() {
      return lastPremiumPaidDate;
    }

    /**
      * Sets the value of the 'lastPremiumPaidDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'lastPremiumPaidDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setLastPremiumPaidDate(java.lang.CharSequence value) {
      validate(fields()[48], value);
      this.lastPremiumPaidDate = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPremiumPaidDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'lastPremiumPaidDate' field has been set, false otherwise.
      */
    public boolean hasLastPremiumPaidDate() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'lastPremiumPaidDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearLastPremiumPaidDate() {
      lastPremiumPaidDate = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdated' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated getLastUpdated() {
      return lastUpdated;
    }

    /**
      * Sets the value of the 'lastUpdated' field.
      * @param value The value of 'lastUpdated'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setLastUpdated(com.uhc.schema.model.eligibility.common.LastUpdated value) {
      validate(fields()[49], value);
      this.lastUpdatedBuilder = null;
      this.lastUpdated = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdated' field has been set.
      * @return True if the 'lastUpdated' field has been set, false otherwise.
      */
    public boolean hasLastUpdated() {
      return fieldSetFlags()[49];
    }

    /**
     * Gets the Builder instance for the 'lastUpdated' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder getLastUpdatedBuilder() {
      if (lastUpdatedBuilder == null) {
        if (hasLastUpdated()) {
          setLastUpdatedBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.newBuilder(lastUpdated));
        } else {
          setLastUpdatedBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.newBuilder());
        }
      }
      return lastUpdatedBuilder;
    }

    /**
     * Sets the Builder instance for the 'lastUpdated' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setLastUpdatedBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.Builder value) {
      clearLastUpdated();
      lastUpdatedBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lastUpdated' field has an active Builder instance
     * @return True if the 'lastUpdated' field has an active Builder instance
     */
    public boolean hasLastUpdatedBuilder() {
      return lastUpdatedBuilder != null;
    }

    /**
      * Clears the value of the 'lastUpdated' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearLastUpdated() {
      lastUpdated = null;
      lastUpdatedBuilder = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'lateEnrollCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getLateEnrollCode() {
      return lateEnrollCode;
    }

    /**
      * Sets the value of the 'lateEnrollCode' field.
      * @param value The value of 'lateEnrollCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setLateEnrollCode(java.lang.CharSequence value) {
      validate(fields()[50], value);
      this.lateEnrollCode = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'lateEnrollCode' field has been set.
      * @return True if the 'lateEnrollCode' field has been set, false otherwise.
      */
    public boolean hasLateEnrollCode() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'lateEnrollCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearLateEnrollCode() {
      lateEnrollCode = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'legacyAttributes' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes getLegacyAttributes() {
      return legacyAttributes;
    }

    /**
      * Sets the value of the 'legacyAttributes' field.
      * @param value The value of 'legacyAttributes'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setLegacyAttributes(com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes value) {
      validate(fields()[51], value);
      this.legacyAttributesBuilder = null;
      this.legacyAttributes = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'legacyAttributes' field has been set.
      * @return True if the 'legacyAttributes' field has been set, false otherwise.
      */
    public boolean hasLegacyAttributes() {
      return fieldSetFlags()[51];
    }

    /**
     * Gets the Builder instance for the 'legacyAttributes' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes.Builder getLegacyAttributesBuilder() {
      if (legacyAttributesBuilder == null) {
        if (hasLegacyAttributes()) {
          setLegacyAttributesBuilder(com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes.newBuilder(legacyAttributes));
        } else {
          setLegacyAttributesBuilder(com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes.newBuilder());
        }
      }
      return legacyAttributesBuilder;
    }

    /**
     * Sets the Builder instance for the 'legacyAttributes' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setLegacyAttributesBuilder(com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes.Builder value) {
      clearLegacyAttributes();
      legacyAttributesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'legacyAttributes' field has an active Builder instance
     * @return True if the 'legacyAttributes' field has an active Builder instance
     */
    public boolean hasLegacyAttributesBuilder() {
      return legacyAttributesBuilder != null;
    }

    /**
      * Clears the value of the 'legacyAttributes' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearLegacyAttributes() {
      legacyAttributes = null;
      legacyAttributesBuilder = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'lifeAndDisability' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability getLifeAndDisability() {
      return lifeAndDisability;
    }

    /**
      * Sets the value of the 'lifeAndDisability' field.
      * @param value The value of 'lifeAndDisability'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setLifeAndDisability(com.uhc.schema.model.eligibility.membership.LifeAndDisability value) {
      validate(fields()[52], value);
      this.lifeAndDisabilityBuilder = null;
      this.lifeAndDisability = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'lifeAndDisability' field has been set.
      * @return True if the 'lifeAndDisability' field has been set, false otherwise.
      */
    public boolean hasLifeAndDisability() {
      return fieldSetFlags()[52];
    }

    /**
     * Gets the Builder instance for the 'lifeAndDisability' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder getLifeAndDisabilityBuilder() {
      if (lifeAndDisabilityBuilder == null) {
        if (hasLifeAndDisability()) {
          setLifeAndDisabilityBuilder(com.uhc.schema.model.eligibility.membership.LifeAndDisability.newBuilder(lifeAndDisability));
        } else {
          setLifeAndDisabilityBuilder(com.uhc.schema.model.eligibility.membership.LifeAndDisability.newBuilder());
        }
      }
      return lifeAndDisabilityBuilder;
    }

    /**
     * Sets the Builder instance for the 'lifeAndDisability' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setLifeAndDisabilityBuilder(com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder value) {
      clearLifeAndDisability();
      lifeAndDisabilityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lifeAndDisability' field has an active Builder instance
     * @return True if the 'lifeAndDisability' field has an active Builder instance
     */
    public boolean hasLifeAndDisabilityBuilder() {
      return lifeAndDisabilityBuilder != null;
    }

    /**
      * Clears the value of the 'lifeAndDisability' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearLifeAndDisability() {
      lifeAndDisability = null;
      lifeAndDisabilityBuilder = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketSegment' field.
      * Market segment for the coverage.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getMarketSegment() {
      return marketSegment;
    }

    /**
      * Sets the value of the 'marketSegment' field.
      * Market segment for the coverage.
      * @param value The value of 'marketSegment'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMarketSegment(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[53], value);
      this.marketSegmentBuilder = null;
      this.marketSegment = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'marketSegment' field has been set.
      * Market segment for the coverage.
      * @return True if the 'marketSegment' field has been set, false otherwise.
      */
    public boolean hasMarketSegment() {
      return fieldSetFlags()[53];
    }

    /**
     * Gets the Builder instance for the 'marketSegment' field and creates one if it doesn't exist yet.
     * Market segment for the coverage.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getMarketSegmentBuilder() {
      if (marketSegmentBuilder == null) {
        if (hasMarketSegment()) {
          setMarketSegmentBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(marketSegment));
        } else {
          setMarketSegmentBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return marketSegmentBuilder;
    }

    /**
     * Sets the Builder instance for the 'marketSegment' field
     * Market segment for the coverage.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setMarketSegmentBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearMarketSegment();
      marketSegmentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'marketSegment' field has an active Builder instance
     * Market segment for the coverage.
     * @return True if the 'marketSegment' field has an active Builder instance
     */
    public boolean hasMarketSegmentBuilder() {
      return marketSegmentBuilder != null;
    }

    /**
      * Clears the value of the 'marketSegment' field.
      * Market segment for the coverage.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMarketSegment() {
      marketSegment = null;
      marketSegmentBuilder = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getMarketType() {
      return marketType;
    }

    /**
      * Sets the value of the 'marketType' field.
      * @param value The value of 'marketType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMarketType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[54], value);
      this.marketTypeBuilder = null;
      this.marketType = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'marketType' field has been set.
      * @return True if the 'marketType' field has been set, false otherwise.
      */
    public boolean hasMarketType() {
      return fieldSetFlags()[54];
    }

    /**
     * Gets the Builder instance for the 'marketType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getMarketTypeBuilder() {
      if (marketTypeBuilder == null) {
        if (hasMarketType()) {
          setMarketTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(marketType));
        } else {
          setMarketTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return marketTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'marketType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setMarketTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearMarketType();
      marketTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'marketType' field has an active Builder instance
     * @return True if the 'marketType' field has an active Builder instance
     */
    public boolean hasMarketTypeBuilder() {
      return marketTypeBuilder != null;
    }

    /**
      * Clears the value of the 'marketType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMarketType() {
      marketType = null;
      marketTypeBuilder = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'medicareAndRetirementMembershipProfiles' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> getMedicareAndRetirementMembershipProfiles() {
      return medicareAndRetirementMembershipProfiles;
    }

    /**
      * Sets the value of the 'medicareAndRetirementMembershipProfiles' field.
      * @param value The value of 'medicareAndRetirementMembershipProfiles'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMedicareAndRetirementMembershipProfiles(java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile> value) {
      validate(fields()[55], value);
      this.medicareAndRetirementMembershipProfiles = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'medicareAndRetirementMembershipProfiles' field has been set.
      * @return True if the 'medicareAndRetirementMembershipProfiles' field has been set, false otherwise.
      */
    public boolean hasMedicareAndRetirementMembershipProfiles() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'medicareAndRetirementMembershipProfiles' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMedicareAndRetirementMembershipProfiles() {
      medicareAndRetirementMembershipProfiles = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'medicareAndRetirementPassportProfiles' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> getMedicareAndRetirementPassportProfiles() {
      return medicareAndRetirementPassportProfiles;
    }

    /**
      * Sets the value of the 'medicareAndRetirementPassportProfiles' field.
      * @param value The value of 'medicareAndRetirementPassportProfiles'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMedicareAndRetirementPassportProfiles(java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile> value) {
      validate(fields()[56], value);
      this.medicareAndRetirementPassportProfiles = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'medicareAndRetirementPassportProfiles' field has been set.
      * @return True if the 'medicareAndRetirementPassportProfiles' field has been set, false otherwise.
      */
    public boolean hasMedicareAndRetirementPassportProfiles() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'medicareAndRetirementPassportProfiles' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMedicareAndRetirementPassportProfiles() {
      medicareAndRetirementPassportProfiles = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberDeliveryPreferences' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> getMemberDeliveryPreferences() {
      return memberDeliveryPreferences;
    }

    /**
      * Sets the value of the 'memberDeliveryPreferences' field.
      * @param value The value of 'memberDeliveryPreferences'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMemberDeliveryPreferences(java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference> value) {
      validate(fields()[57], value);
      this.memberDeliveryPreferences = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'memberDeliveryPreferences' field has been set.
      * @return True if the 'memberDeliveryPreferences' field has been set, false otherwise.
      */
    public boolean hasMemberDeliveryPreferences() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'memberDeliveryPreferences' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMemberDeliveryPreferences() {
      memberDeliveryPreferences = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberEnrollmentOtherIdentifiers' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> getMemberEnrollmentOtherIdentifiers() {
      return memberEnrollmentOtherIdentifiers;
    }

    /**
      * Sets the value of the 'memberEnrollmentOtherIdentifiers' field.
      * @param value The value of 'memberEnrollmentOtherIdentifiers'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMemberEnrollmentOtherIdentifiers(java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier> value) {
      validate(fields()[58], value);
      this.memberEnrollmentOtherIdentifiers = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'memberEnrollmentOtherIdentifiers' field has been set.
      * @return True if the 'memberEnrollmentOtherIdentifiers' field has been set, false otherwise.
      */
    public boolean hasMemberEnrollmentOtherIdentifiers() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'memberEnrollmentOtherIdentifiers' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMemberEnrollmentOtherIdentifiers() {
      memberEnrollmentOtherIdentifiers = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberGroupContractPlanOptionId' field.
      * Cirrus Member Group Contract Plan Option identifier.
      * @return The value.
      */
    public java.lang.CharSequence getMemberGroupContractPlanOptionId() {
      return memberGroupContractPlanOptionId;
    }

    /**
      * Sets the value of the 'memberGroupContractPlanOptionId' field.
      * Cirrus Member Group Contract Plan Option identifier.
      * @param value The value of 'memberGroupContractPlanOptionId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMemberGroupContractPlanOptionId(java.lang.CharSequence value) {
      validate(fields()[59], value);
      this.memberGroupContractPlanOptionId = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'memberGroupContractPlanOptionId' field has been set.
      * Cirrus Member Group Contract Plan Option identifier.
      * @return True if the 'memberGroupContractPlanOptionId' field has been set, false otherwise.
      */
    public boolean hasMemberGroupContractPlanOptionId() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'memberGroupContractPlanOptionId' field.
      * Cirrus Member Group Contract Plan Option identifier.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMemberGroupContractPlanOptionId() {
      memberGroupContractPlanOptionId = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberMarketNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getMemberMarketNumber() {
      return memberMarketNumber;
    }

    /**
      * Sets the value of the 'memberMarketNumber' field.
      * @param value The value of 'memberMarketNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMemberMarketNumber(java.lang.CharSequence value) {
      validate(fields()[60], value);
      this.memberMarketNumber = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'memberMarketNumber' field has been set.
      * @return True if the 'memberMarketNumber' field has been set, false otherwise.
      */
    public boolean hasMemberMarketNumber() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'memberMarketNumber' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMemberMarketNumber() {
      memberMarketNumber = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'membershipGroupData' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> getMembershipGroupData() {
      return membershipGroupData;
    }

    /**
      * Sets the value of the 'membershipGroupData' field.
      * @param value The value of 'membershipGroupData'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMembershipGroupData(java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData> value) {
      validate(fields()[61], value);
      this.membershipGroupData = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'membershipGroupData' field has been set.
      * @return True if the 'membershipGroupData' field has been set, false otherwise.
      */
    public boolean hasMembershipGroupData() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'membershipGroupData' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMembershipGroupData() {
      membershipGroupData = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'membershipIdentifier' field.
      * The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
      * @return The value.
      */
    public java.lang.CharSequence getMembershipIdentifier() {
      return membershipIdentifier;
    }

    /**
      * Sets the value of the 'membershipIdentifier' field.
      * The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
      * @param value The value of 'membershipIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setMembershipIdentifier(java.lang.CharSequence value) {
      validate(fields()[62], value);
      this.membershipIdentifier = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'membershipIdentifier' field has been set.
      * The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
      * @return True if the 'membershipIdentifier' field has been set, false otherwise.
      */
    public boolean hasMembershipIdentifier() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'membershipIdentifier' field.
      * The unique key for a Membership (e.g. COVERAGE_TYPE + POLICY_NBR + EFFECTIVE_DATE)
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearMembershipIdentifier() {
      membershipIdentifier = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'organization' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.Organization getOrganization() {
      return organization;
    }

    /**
      * Sets the value of the 'organization' field.
      * @param value The value of 'organization'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setOrganization(com.uhc.schema.model.eligibility.Organization value) {
      validate(fields()[63], value);
      this.organizationBuilder = null;
      this.organization = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'organization' field has been set.
      * @return True if the 'organization' field has been set, false otherwise.
      */
    public boolean hasOrganization() {
      return fieldSetFlags()[63];
    }

    /**
     * Gets the Builder instance for the 'organization' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Organization.Builder getOrganizationBuilder() {
      if (organizationBuilder == null) {
        if (hasOrganization()) {
          setOrganizationBuilder(com.uhc.schema.model.eligibility.Organization.newBuilder(organization));
        } else {
          setOrganizationBuilder(com.uhc.schema.model.eligibility.Organization.newBuilder());
        }
      }
      return organizationBuilder;
    }

    /**
     * Sets the Builder instance for the 'organization' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setOrganizationBuilder(com.uhc.schema.model.eligibility.Organization.Builder value) {
      clearOrganization();
      organizationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'organization' field has an active Builder instance
     * @return True if the 'organization' field has an active Builder instance
     */
    public boolean hasOrganizationBuilder() {
      return organizationBuilder != null;
    }

    /**
      * Clears the value of the 'organization' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearOrganization() {
      organization = null;
      organizationBuilder = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrganizationIdentifier() {
      return organizationIdentifier;
    }

    /**
      * Sets the value of the 'organizationIdentifier' field.
      * @param value The value of 'organizationIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setOrganizationIdentifier(java.lang.CharSequence value) {
      validate(fields()[64], value);
      this.organizationIdentifier = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationIdentifier' field has been set.
      * @return True if the 'organizationIdentifier' field has been set, false otherwise.
      */
    public boolean hasOrganizationIdentifier() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'organizationIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearOrganizationIdentifier() {
      organizationIdentifier = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationPopulationGroupNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrganizationPopulationGroupNumber() {
      return organizationPopulationGroupNumber;
    }

    /**
      * Sets the value of the 'organizationPopulationGroupNumber' field.
      * @param value The value of 'organizationPopulationGroupNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setOrganizationPopulationGroupNumber(java.lang.CharSequence value) {
      validate(fields()[65], value);
      this.organizationPopulationGroupNumber = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationPopulationGroupNumber' field has been set.
      * @return True if the 'organizationPopulationGroupNumber' field has been set, false otherwise.
      */
    public boolean hasOrganizationPopulationGroupNumber() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'organizationPopulationGroupNumber' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearOrganizationPopulationGroupNumber() {
      organizationPopulationGroupNumber = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'packageBenefitPlanCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPackageBenefitPlanCode() {
      return packageBenefitPlanCode;
    }

    /**
      * Sets the value of the 'packageBenefitPlanCode' field.
      * @param value The value of 'packageBenefitPlanCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPackageBenefitPlanCode(java.lang.CharSequence value) {
      validate(fields()[66], value);
      this.packageBenefitPlanCode = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'packageBenefitPlanCode' field has been set.
      * @return True if the 'packageBenefitPlanCode' field has been set, false otherwise.
      */
    public boolean hasPackageBenefitPlanCode() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'packageBenefitPlanCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPackageBenefitPlanCode() {
      packageBenefitPlanCode = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'packageOptionDescription' field.
      * Benefit Bundle Option Description.
      * @return The value.
      */
    public java.lang.CharSequence getPackageOptionDescription() {
      return packageOptionDescription;
    }

    /**
      * Sets the value of the 'packageOptionDescription' field.
      * Benefit Bundle Option Description.
      * @param value The value of 'packageOptionDescription'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPackageOptionDescription(java.lang.CharSequence value) {
      validate(fields()[67], value);
      this.packageOptionDescription = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'packageOptionDescription' field has been set.
      * Benefit Bundle Option Description.
      * @return True if the 'packageOptionDescription' field has been set, false otherwise.
      */
    public boolean hasPackageOptionDescription() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'packageOptionDescription' field.
      * Benefit Bundle Option Description.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPackageOptionDescription() {
      packageOptionDescription = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'packageOptionId' field.
      * Package Option Identifier.
      * @return The value.
      */
    public java.lang.CharSequence getPackageOptionId() {
      return packageOptionId;
    }

    /**
      * Sets the value of the 'packageOptionId' field.
      * Package Option Identifier.
      * @param value The value of 'packageOptionId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPackageOptionId(java.lang.CharSequence value) {
      validate(fields()[68], value);
      this.packageOptionId = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'packageOptionId' field has been set.
      * Package Option Identifier.
      * @return True if the 'packageOptionId' field has been set, false otherwise.
      */
    public boolean hasPackageOptionId() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'packageOptionId' field.
      * Package Option Identifier.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPackageOptionId() {
      packageOptionId = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'panelNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPanelNumber() {
      return panelNumber;
    }

    /**
      * Sets the value of the 'panelNumber' field.
      * @param value The value of 'panelNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPanelNumber(java.lang.CharSequence value) {
      validate(fields()[69], value);
      this.panelNumber = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'panelNumber' field has been set.
      * @return True if the 'panelNumber' field has been set, false otherwise.
      */
    public boolean hasPanelNumber() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'panelNumber' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPanelNumber() {
      panelNumber = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    /**
      * Gets the value of the 'passportGroupNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPassportGroupNumber() {
      return passportGroupNumber;
    }

    /**
      * Sets the value of the 'passportGroupNumber' field.
      * @param value The value of 'passportGroupNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPassportGroupNumber(java.lang.CharSequence value) {
      validate(fields()[70], value);
      this.passportGroupNumber = value;
      fieldSetFlags()[70] = true;
      return this;
    }

    /**
      * Checks whether the 'passportGroupNumber' field has been set.
      * @return True if the 'passportGroupNumber' field has been set, false otherwise.
      */
    public boolean hasPassportGroupNumber() {
      return fieldSetFlags()[70];
    }


    /**
      * Clears the value of the 'passportGroupNumber' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPassportGroupNumber() {
      passportGroupNumber = null;
      fieldSetFlags()[70] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentMembershipIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getParentMembershipIdentifier() {
      return parentMembershipIdentifier;
    }

    /**
      * Sets the value of the 'parentMembershipIdentifier' field.
      * @param value The value of 'parentMembershipIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setParentMembershipIdentifier(java.lang.CharSequence value) {
      validate(fields()[71], value);
      this.parentMembershipIdentifier = value;
      fieldSetFlags()[71] = true;
      return this;
    }

    /**
      * Checks whether the 'parentMembershipIdentifier' field has been set.
      * @return True if the 'parentMembershipIdentifier' field has been set, false otherwise.
      */
    public boolean hasParentMembershipIdentifier() {
      return fieldSetFlags()[71];
    }


    /**
      * Clears the value of the 'parentMembershipIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearParentMembershipIdentifier() {
      parentMembershipIdentifier = null;
      fieldSetFlags()[71] = false;
      return this;
    }

    /**
      * Gets the value of the 'pcpMedicalDirectorApprovalIndicator' field.
      * Override to allow specialist to be primary physician.
      * @return The value.
      */
    public java.lang.CharSequence getPcpMedicalDirectorApprovalIndicator() {
      return pcpMedicalDirectorApprovalIndicator;
    }

    /**
      * Sets the value of the 'pcpMedicalDirectorApprovalIndicator' field.
      * Override to allow specialist to be primary physician.
      * @param value The value of 'pcpMedicalDirectorApprovalIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPcpMedicalDirectorApprovalIndicator(java.lang.CharSequence value) {
      validate(fields()[72], value);
      this.pcpMedicalDirectorApprovalIndicator = value;
      fieldSetFlags()[72] = true;
      return this;
    }

    /**
      * Checks whether the 'pcpMedicalDirectorApprovalIndicator' field has been set.
      * Override to allow specialist to be primary physician.
      * @return True if the 'pcpMedicalDirectorApprovalIndicator' field has been set, false otherwise.
      */
    public boolean hasPcpMedicalDirectorApprovalIndicator() {
      return fieldSetFlags()[72];
    }


    /**
      * Clears the value of the 'pcpMedicalDirectorApprovalIndicator' field.
      * Override to allow specialist to be primary physician.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPcpMedicalDirectorApprovalIndicator() {
      pcpMedicalDirectorApprovalIndicator = null;
      fieldSetFlags()[72] = false;
      return this;
    }

    /**
      * Gets the value of the 'plan' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.Plan getPlan() {
      return plan;
    }

    /**
      * Sets the value of the 'plan' field.
      * @param value The value of 'plan'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPlan(com.uhc.schema.model.eligibility.Plan value) {
      validate(fields()[73], value);
      this.planBuilder = null;
      this.plan = value;
      fieldSetFlags()[73] = true;
      return this;
    }

    /**
      * Checks whether the 'plan' field has been set.
      * @return True if the 'plan' field has been set, false otherwise.
      */
    public boolean hasPlan() {
      return fieldSetFlags()[73];
    }

    /**
     * Gets the Builder instance for the 'plan' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Plan.Builder getPlanBuilder() {
      if (planBuilder == null) {
        if (hasPlan()) {
          setPlanBuilder(com.uhc.schema.model.eligibility.Plan.newBuilder(plan));
        } else {
          setPlanBuilder(com.uhc.schema.model.eligibility.Plan.newBuilder());
        }
      }
      return planBuilder;
    }

    /**
     * Sets the Builder instance for the 'plan' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setPlanBuilder(com.uhc.schema.model.eligibility.Plan.Builder value) {
      clearPlan();
      planBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'plan' field has an active Builder instance
     * @return True if the 'plan' field has an active Builder instance
     */
    public boolean hasPlanBuilder() {
      return planBuilder != null;
    }

    /**
      * Clears the value of the 'plan' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPlan() {
      plan = null;
      planBuilder = null;
      fieldSetFlags()[73] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanCode() {
      return planCode;
    }

    /**
      * Sets the value of the 'planCode' field.
      * @param value The value of 'planCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPlanCode(java.lang.CharSequence value) {
      validate(fields()[74], value);
      this.planCode = value;
      fieldSetFlags()[74] = true;
      return this;
    }

    /**
      * Checks whether the 'planCode' field has been set.
      * @return True if the 'planCode' field has been set, false otherwise.
      */
    public boolean hasPlanCode() {
      return fieldSetFlags()[74];
    }


    /**
      * Clears the value of the 'planCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPlanCode() {
      planCode = null;
      fieldSetFlags()[74] = false;
      return this;
    }

    /**
      * Gets the value of the 'priorHealthCoverageMonths' field.
      * The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
      * @return The value.
      */
    public java.lang.CharSequence getPriorHealthCoverageMonths() {
      return priorHealthCoverageMonths;
    }

    /**
      * Sets the value of the 'priorHealthCoverageMonths' field.
      * The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
      * @param value The value of 'priorHealthCoverageMonths'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setPriorHealthCoverageMonths(java.lang.CharSequence value) {
      validate(fields()[75], value);
      this.priorHealthCoverageMonths = value;
      fieldSetFlags()[75] = true;
      return this;
    }

    /**
      * Checks whether the 'priorHealthCoverageMonths' field has been set.
      * The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
      * @return True if the 'priorHealthCoverageMonths' field has been set, false otherwise.
      */
    public boolean hasPriorHealthCoverageMonths() {
      return fieldSetFlags()[75];
    }


    /**
      * Clears the value of the 'priorHealthCoverageMonths' field.
      * The number of months of prior health coverage that meet the certification requirements of the Health Insurance Portability and Accountability Act (HIPAA).
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearPriorHealthCoverageMonths() {
      priorHealthCoverageMonths = null;
      fieldSetFlags()[75] = false;
      return this;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.Product getProduct() {
      return product;
    }

    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setProduct(com.uhc.schema.model.eligibility.Product value) {
      validate(fields()[76], value);
      this.productBuilder = null;
      this.product = value;
      fieldSetFlags()[76] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[76];
    }

    /**
     * Gets the Builder instance for the 'product' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Product.Builder getProductBuilder() {
      if (productBuilder == null) {
        if (hasProduct()) {
          setProductBuilder(com.uhc.schema.model.eligibility.Product.newBuilder(product));
        } else {
          setProductBuilder(com.uhc.schema.model.eligibility.Product.newBuilder());
        }
      }
      return productBuilder;
    }

    /**
     * Sets the Builder instance for the 'product' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setProductBuilder(com.uhc.schema.model.eligibility.Product.Builder value) {
      clearProduct();
      productBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'product' field has an active Builder instance
     * @return True if the 'product' field has an active Builder instance
     */
    public boolean hasProductBuilder() {
      return productBuilder != null;
    }

    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearProduct() {
      product = null;
      productBuilder = null;
      fieldSetFlags()[76] = false;
      return this;
    }

    /**
      * Gets the value of the 'productCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductCode() {
      return productCode;
    }

    /**
      * Sets the value of the 'productCode' field.
      * @param value The value of 'productCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setProductCode(java.lang.CharSequence value) {
      validate(fields()[77], value);
      this.productCode = value;
      fieldSetFlags()[77] = true;
      return this;
    }

    /**
      * Checks whether the 'productCode' field has been set.
      * @return True if the 'productCode' field has been set, false otherwise.
      */
    public boolean hasProductCode() {
      return fieldSetFlags()[77];
    }


    /**
      * Clears the value of the 'productCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearProductCode() {
      productCode = null;
      fieldSetFlags()[77] = false;
      return this;
    }

    /**
      * Gets the value of the 'qmcsoIndicator' field.
      * Indicates if a Qualified Medical Child Support Order exists for this membership.
      * @return The value.
      */
    public java.lang.CharSequence getQmcsoIndicator() {
      return qmcsoIndicator;
    }

    /**
      * Sets the value of the 'qmcsoIndicator' field.
      * Indicates if a Qualified Medical Child Support Order exists for this membership.
      * @param value The value of 'qmcsoIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setQmcsoIndicator(java.lang.CharSequence value) {
      validate(fields()[78], value);
      this.qmcsoIndicator = value;
      fieldSetFlags()[78] = true;
      return this;
    }

    /**
      * Checks whether the 'qmcsoIndicator' field has been set.
      * Indicates if a Qualified Medical Child Support Order exists for this membership.
      * @return True if the 'qmcsoIndicator' field has been set, false otherwise.
      */
    public boolean hasQmcsoIndicator() {
      return fieldSetFlags()[78];
    }


    /**
      * Clears the value of the 'qmcsoIndicator' field.
      * Indicates if a Qualified Medical Child Support Order exists for this membership.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearQmcsoIndicator() {
      qmcsoIndicator = null;
      fieldSetFlags()[78] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordType' field.
      * The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
      * @return The value.
      */
    public java.lang.CharSequence getRecordType() {
      return recordType;
    }

    /**
      * Sets the value of the 'recordType' field.
      * The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
      * @param value The value of 'recordType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setRecordType(java.lang.CharSequence value) {
      validate(fields()[79], value);
      this.recordType = value;
      fieldSetFlags()[79] = true;
      return this;
    }

    /**
      * Checks whether the 'recordType' field has been set.
      * The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
      * @return True if the 'recordType' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[79];
    }


    /**
      * Clears the value of the 'recordType' field.
      * The type of this Membership; possible values: [ 'FINANCIAL_ACCOUNT', 'HEALTH_COVERAGE', 'HEALTH_SERVICE', 'LIFE_AND_DISABILITY' ]
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearRecordType() {
      recordType = null;
      fieldSetFlags()[79] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationshipType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getRelationshipType() {
      return relationshipType;
    }

    /**
      * Sets the value of the 'relationshipType' field.
      * @param value The value of 'relationshipType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setRelationshipType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[80], value);
      this.relationshipTypeBuilder = null;
      this.relationshipType = value;
      fieldSetFlags()[80] = true;
      return this;
    }

    /**
      * Checks whether the 'relationshipType' field has been set.
      * @return True if the 'relationshipType' field has been set, false otherwise.
      */
    public boolean hasRelationshipType() {
      return fieldSetFlags()[80];
    }

    /**
     * Gets the Builder instance for the 'relationshipType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getRelationshipTypeBuilder() {
      if (relationshipTypeBuilder == null) {
        if (hasRelationshipType()) {
          setRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(relationshipType));
        } else {
          setRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return relationshipTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'relationshipType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearRelationshipType();
      relationshipTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'relationshipType' field has an active Builder instance
     * @return True if the 'relationshipType' field has an active Builder instance
     */
    public boolean hasRelationshipTypeBuilder() {
      return relationshipTypeBuilder != null;
    }

    /**
      * Clears the value of the 'relationshipType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearRelationshipType() {
      relationshipType = null;
      relationshipTypeBuilder = null;
      fieldSetFlags()[80] = false;
      return this;
    }

    /**
      * Gets the value of the 'revenueArrangement' field.
      * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getRevenueArrangement() {
      return revenueArrangement;
    }

    /**
      * Sets the value of the 'revenueArrangement' field.
      * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
      * @param value The value of 'revenueArrangement'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setRevenueArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[81], value);
      this.revenueArrangementBuilder = null;
      this.revenueArrangement = value;
      fieldSetFlags()[81] = true;
      return this;
    }

    /**
      * Checks whether the 'revenueArrangement' field has been set.
      * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
      * @return True if the 'revenueArrangement' field has been set, false otherwise.
      */
    public boolean hasRevenueArrangement() {
      return fieldSetFlags()[81];
    }

    /**
     * Gets the Builder instance for the 'revenueArrangement' field and creates one if it doesn't exist yet.
     * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getRevenueArrangementBuilder() {
      if (revenueArrangementBuilder == null) {
        if (hasRevenueArrangement()) {
          setRevenueArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(revenueArrangement));
        } else {
          setRevenueArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return revenueArrangementBuilder;
    }

    /**
     * Sets the Builder instance for the 'revenueArrangement' field
     * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setRevenueArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearRevenueArrangement();
      revenueArrangementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'revenueArrangement' field has an active Builder instance
     * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
     * @return True if the 'revenueArrangement' field has an active Builder instance
     */
    public boolean hasRevenueArrangementBuilder() {
      return revenueArrangementBuilder != null;
    }

    /**
      * Clears the value of the 'revenueArrangement' field.
      * Indicates how revenue is generated to pay for administration services and claims incurred by members enrolled in a benefit or financial protection plan, or claims incurred by stoploss customers, such as member groups enrolled in a stoploss policy.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearRevenueArrangement() {
      revenueArrangement = null;
      revenueArrangementBuilder = null;
      fieldSetFlags()[81] = false;
      return this;
    }

    /**
      * Gets the value of the 'riskGroupId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRiskGroupId() {
      return riskGroupId;
    }

    /**
      * Sets the value of the 'riskGroupId' field.
      * @param value The value of 'riskGroupId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setRiskGroupId(java.lang.CharSequence value) {
      validate(fields()[82], value);
      this.riskGroupId = value;
      fieldSetFlags()[82] = true;
      return this;
    }

    /**
      * Checks whether the 'riskGroupId' field has been set.
      * @return True if the 'riskGroupId' field has been set, false otherwise.
      */
    public boolean hasRiskGroupId() {
      return fieldSetFlags()[82];
    }


    /**
      * Clears the value of the 'riskGroupId' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearRiskGroupId() {
      riskGroupId = null;
      fieldSetFlags()[82] = false;
      return this;
    }

    /**
      * Gets the value of the 'riskGroupName' field.
      * @return The value.
      */
    public java.lang.CharSequence getRiskGroupName() {
      return riskGroupName;
    }

    /**
      * Sets the value of the 'riskGroupName' field.
      * @param value The value of 'riskGroupName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setRiskGroupName(java.lang.CharSequence value) {
      validate(fields()[83], value);
      this.riskGroupName = value;
      fieldSetFlags()[83] = true;
      return this;
    }

    /**
      * Checks whether the 'riskGroupName' field has been set.
      * @return True if the 'riskGroupName' field has been set, false otherwise.
      */
    public boolean hasRiskGroupName() {
      return fieldSetFlags()[83];
    }


    /**
      * Clears the value of the 'riskGroupName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearRiskGroupName() {
      riskGroupName = null;
      fieldSetFlags()[83] = false;
      return this;
    }

    /**
      * Gets the value of the 'salesAgentIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getSalesAgentIdentifier() {
      return salesAgentIdentifier;
    }

    /**
      * Sets the value of the 'salesAgentIdentifier' field.
      * @param value The value of 'salesAgentIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSalesAgentIdentifier(java.lang.CharSequence value) {
      validate(fields()[84], value);
      this.salesAgentIdentifier = value;
      fieldSetFlags()[84] = true;
      return this;
    }

    /**
      * Checks whether the 'salesAgentIdentifier' field has been set.
      * @return True if the 'salesAgentIdentifier' field has been set, false otherwise.
      */
    public boolean hasSalesAgentIdentifier() {
      return fieldSetFlags()[84];
    }


    /**
      * Clears the value of the 'salesAgentIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSalesAgentIdentifier() {
      salesAgentIdentifier = null;
      fieldSetFlags()[84] = false;
      return this;
    }

    /**
      * Gets the value of the 'security' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.Security getSecurity() {
      return security;
    }

    /**
      * Sets the value of the 'security' field.
      * @param value The value of 'security'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSecurity(com.uhc.schema.model.eligibility.common.Security value) {
      validate(fields()[85], value);
      this.securityBuilder = null;
      this.security = value;
      fieldSetFlags()[85] = true;
      return this;
    }

    /**
      * Checks whether the 'security' field has been set.
      * @return True if the 'security' field has been set, false otherwise.
      */
    public boolean hasSecurity() {
      return fieldSetFlags()[85];
    }

    /**
     * Gets the Builder instance for the 'security' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.Security.Builder getSecurityBuilder() {
      if (securityBuilder == null) {
        if (hasSecurity()) {
          setSecurityBuilder(com.uhc.schema.model.eligibility.common.Security.newBuilder(security));
        } else {
          setSecurityBuilder(com.uhc.schema.model.eligibility.common.Security.newBuilder());
        }
      }
      return securityBuilder;
    }

    /**
     * Sets the Builder instance for the 'security' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setSecurityBuilder(com.uhc.schema.model.eligibility.common.Security.Builder value) {
      clearSecurity();
      securityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'security' field has an active Builder instance
     * @return True if the 'security' field has an active Builder instance
     */
    public boolean hasSecurityBuilder() {
      return securityBuilder != null;
    }

    /**
      * Clears the value of the 'security' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSecurity() {
      security = null;
      securityBuilder = null;
      fieldSetFlags()[85] = false;
      return this;
    }

    /**
      * Gets the value of the 'segmentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSegmentId() {
      return segmentId;
    }

    /**
      * Sets the value of the 'segmentId' field.
      * @param value The value of 'segmentId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSegmentId(java.lang.CharSequence value) {
      validate(fields()[86], value);
      this.segmentId = value;
      fieldSetFlags()[86] = true;
      return this;
    }

    /**
      * Checks whether the 'segmentId' field has been set.
      * @return True if the 'segmentId' field has been set, false otherwise.
      */
    public boolean hasSegmentId() {
      return fieldSetFlags()[86];
    }


    /**
      * Clears the value of the 'segmentId' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSegmentId() {
      segmentId = null;
      fieldSetFlags()[86] = false;
      return this;
    }

    /**
      * Gets the value of the 'site' field.
      * @return The value.
      */
    public java.lang.CharSequence getSite() {
      return site;
    }

    /**
      * Sets the value of the 'site' field.
      * @param value The value of 'site'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSite(java.lang.CharSequence value) {
      validate(fields()[87], value);
      this.site = value;
      fieldSetFlags()[87] = true;
      return this;
    }

    /**
      * Checks whether the 'site' field has been set.
      * @return True if the 'site' field has been set, false otherwise.
      */
    public boolean hasSite() {
      return fieldSetFlags()[87];
    }


    /**
      * Clears the value of the 'site' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSite() {
      site = null;
      fieldSetFlags()[87] = false;
      return this;
    }

    /**
      * Gets the value of the 'situsState' field.
      * The state that the insurance product/policy is based out of for a particular employer.
      * @return The value.
      */
    public java.lang.CharSequence getSitusState() {
      return situsState;
    }

    /**
      * Sets the value of the 'situsState' field.
      * The state that the insurance product/policy is based out of for a particular employer.
      * @param value The value of 'situsState'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSitusState(java.lang.CharSequence value) {
      validate(fields()[88], value);
      this.situsState = value;
      fieldSetFlags()[88] = true;
      return this;
    }

    /**
      * Checks whether the 'situsState' field has been set.
      * The state that the insurance product/policy is based out of for a particular employer.
      * @return True if the 'situsState' field has been set, false otherwise.
      */
    public boolean hasSitusState() {
      return fieldSetFlags()[88];
    }


    /**
      * Clears the value of the 'situsState' field.
      * The state that the insurance product/policy is based out of for a particular employer.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSitusState() {
      situsState = null;
      fieldSetFlags()[88] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemAttributes' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes getSourceSystemAttributes() {
      return sourceSystemAttributes;
    }

    /**
      * Sets the value of the 'sourceSystemAttributes' field.
      * @param value The value of 'sourceSystemAttributes'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSourceSystemAttributes(com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes value) {
      validate(fields()[89], value);
      this.sourceSystemAttributesBuilder = null;
      this.sourceSystemAttributes = value;
      fieldSetFlags()[89] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemAttributes' field has been set.
      * @return True if the 'sourceSystemAttributes' field has been set, false otherwise.
      */
    public boolean hasSourceSystemAttributes() {
      return fieldSetFlags()[89];
    }

    /**
     * Gets the Builder instance for the 'sourceSystemAttributes' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes.Builder getSourceSystemAttributesBuilder() {
      if (sourceSystemAttributesBuilder == null) {
        if (hasSourceSystemAttributes()) {
          setSourceSystemAttributesBuilder(com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes.newBuilder(sourceSystemAttributes));
        } else {
          setSourceSystemAttributesBuilder(com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes.newBuilder());
        }
      }
      return sourceSystemAttributesBuilder;
    }

    /**
     * Sets the Builder instance for the 'sourceSystemAttributes' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setSourceSystemAttributesBuilder(com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes.Builder value) {
      clearSourceSystemAttributes();
      sourceSystemAttributesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sourceSystemAttributes' field has an active Builder instance
     * @return True if the 'sourceSystemAttributes' field has an active Builder instance
     */
    public boolean hasSourceSystemAttributesBuilder() {
      return sourceSystemAttributesBuilder != null;
    }

    /**
      * Clears the value of the 'sourceSystemAttributes' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSourceSystemAttributes() {
      sourceSystemAttributes = null;
      sourceSystemAttributesBuilder = null;
      fieldSetFlags()[89] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceSystemCode() {
      return sourceSystemCode;
    }

    /**
      * Sets the value of the 'sourceSystemCode' field.
      * @param value The value of 'sourceSystemCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSourceSystemCode(java.lang.CharSequence value) {
      validate(fields()[90], value);
      this.sourceSystemCode = value;
      fieldSetFlags()[90] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemCode' field has been set.
      * @return True if the 'sourceSystemCode' field has been set, false otherwise.
      */
    public boolean hasSourceSystemCode() {
      return fieldSetFlags()[90];
    }


    /**
      * Clears the value of the 'sourceSystemCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSourceSystemCode() {
      sourceSystemCode = null;
      fieldSetFlags()[90] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceTerminationDate' field.
      * The date that the Consumer Plan is no longer active.
      * @return The value.
      */
    public java.lang.CharSequence getSourceTerminationDate() {
      return sourceTerminationDate;
    }

    /**
      * Sets the value of the 'sourceTerminationDate' field.
      * The date that the Consumer Plan is no longer active.
      * @param value The value of 'sourceTerminationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSourceTerminationDate(java.lang.CharSequence value) {
      validate(fields()[91], value);
      this.sourceTerminationDate = value;
      fieldSetFlags()[91] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceTerminationDate' field has been set.
      * The date that the Consumer Plan is no longer active.
      * @return True if the 'sourceTerminationDate' field has been set, false otherwise.
      */
    public boolean hasSourceTerminationDate() {
      return fieldSetFlags()[91];
    }


    /**
      * Clears the value of the 'sourceTerminationDate' field.
      * The date that the Consumer Plan is no longer active.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSourceTerminationDate() {
      sourceTerminationDate = null;
      fieldSetFlags()[91] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriberEnrolleeSourceId' field.
      * The enrollee id for the subscriber on the membership record.
      * @return The value.
      */
    public java.lang.CharSequence getSubscriberEnrolleeSourceId() {
      return subscriberEnrolleeSourceId;
    }

    /**
      * Sets the value of the 'subscriberEnrolleeSourceId' field.
      * The enrollee id for the subscriber on the membership record.
      * @param value The value of 'subscriberEnrolleeSourceId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSubscriberEnrolleeSourceId(java.lang.CharSequence value) {
      validate(fields()[92], value);
      this.subscriberEnrolleeSourceId = value;
      fieldSetFlags()[92] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriberEnrolleeSourceId' field has been set.
      * The enrollee id for the subscriber on the membership record.
      * @return True if the 'subscriberEnrolleeSourceId' field has been set, false otherwise.
      */
    public boolean hasSubscriberEnrolleeSourceId() {
      return fieldSetFlags()[92];
    }


    /**
      * Clears the value of the 'subscriberEnrolleeSourceId' field.
      * The enrollee id for the subscriber on the membership record.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSubscriberEnrolleeSourceId() {
      subscriberEnrolleeSourceId = null;
      fieldSetFlags()[92] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriberIndividualIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubscriberIndividualIdentifier() {
      return subscriberIndividualIdentifier;
    }

    /**
      * Sets the value of the 'subscriberIndividualIdentifier' field.
      * @param value The value of 'subscriberIndividualIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSubscriberIndividualIdentifier(java.lang.CharSequence value) {
      validate(fields()[93], value);
      this.subscriberIndividualIdentifier = value;
      fieldSetFlags()[93] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriberIndividualIdentifier' field has been set.
      * @return True if the 'subscriberIndividualIdentifier' field has been set, false otherwise.
      */
    public boolean hasSubscriberIndividualIdentifier() {
      return fieldSetFlags()[93];
    }


    /**
      * Clears the value of the 'subscriberIndividualIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSubscriberIndividualIdentifier() {
      subscriberIndividualIdentifier = null;
      fieldSetFlags()[93] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriberMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @return The value.
      */
    public java.lang.CharSequence getSubscriberMemberFacingIdentifier() {
      return subscriberMemberFacingIdentifier;
    }

    /**
      * Sets the value of the 'subscriberMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @param value The value of 'subscriberMemberFacingIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSubscriberMemberFacingIdentifier(java.lang.CharSequence value) {
      validate(fields()[94], value);
      this.subscriberMemberFacingIdentifier = value;
      fieldSetFlags()[94] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriberMemberFacingIdentifier' field has been set.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @return True if the 'subscriberMemberFacingIdentifier' field has been set, false otherwise.
      */
    public boolean hasSubscriberMemberFacingIdentifier() {
      return fieldSetFlags()[94];
    }


    /**
      * Clears the value of the 'subscriberMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSubscriberMemberFacingIdentifier() {
      subscriberMemberFacingIdentifier = null;
      fieldSetFlags()[94] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriberSocialSecurityNumber' field.
      * Social Security Number of the plan subscriber.
      * @return The value.
      */
    public java.lang.CharSequence getSubscriberSocialSecurityNumber() {
      return subscriberSocialSecurityNumber;
    }

    /**
      * Sets the value of the 'subscriberSocialSecurityNumber' field.
      * Social Security Number of the plan subscriber.
      * @param value The value of 'subscriberSocialSecurityNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSubscriberSocialSecurityNumber(java.lang.CharSequence value) {
      validate(fields()[95], value);
      this.subscriberSocialSecurityNumber = value;
      fieldSetFlags()[95] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriberSocialSecurityNumber' field has been set.
      * Social Security Number of the plan subscriber.
      * @return True if the 'subscriberSocialSecurityNumber' field has been set, false otherwise.
      */
    public boolean hasSubscriberSocialSecurityNumber() {
      return fieldSetFlags()[95];
    }


    /**
      * Clears the value of the 'subscriberSocialSecurityNumber' field.
      * Social Security Number of the plan subscriber.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSubscriberSocialSecurityNumber() {
      subscriberSocialSecurityNumber = null;
      fieldSetFlags()[95] = false;
      return this;
    }

    /**
      * Gets the value of the 'subsidizedInsuredPlans' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> getSubsidizedInsuredPlans() {
      return subsidizedInsuredPlans;
    }

    /**
      * Sets the value of the 'subsidizedInsuredPlans' field.
      * @param value The value of 'subsidizedInsuredPlans'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setSubsidizedInsuredPlans(java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan> value) {
      validate(fields()[96], value);
      this.subsidizedInsuredPlans = value;
      fieldSetFlags()[96] = true;
      return this;
    }

    /**
      * Checks whether the 'subsidizedInsuredPlans' field has been set.
      * @return True if the 'subsidizedInsuredPlans' field has been set, false otherwise.
      */
    public boolean hasSubsidizedInsuredPlans() {
      return fieldSetFlags()[96];
    }


    /**
      * Clears the value of the 'subsidizedInsuredPlans' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearSubsidizedInsuredPlans() {
      subsidizedInsuredPlans = null;
      fieldSetFlags()[96] = false;
      return this;
    }

    /**
      * Gets the value of the 'terminationDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getTerminationDate() {
      return terminationDate;
    }

    /**
      * Sets the value of the 'terminationDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'terminationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setTerminationDate(java.lang.CharSequence value) {
      validate(fields()[97], value);
      this.terminationDate = value;
      fieldSetFlags()[97] = true;
      return this;
    }

    /**
      * Checks whether the 'terminationDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'terminationDate' field has been set, false otherwise.
      */
    public boolean hasTerminationDate() {
      return fieldSetFlags()[97];
    }


    /**
      * Clears the value of the 'terminationDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearTerminationDate() {
      terminationDate = null;
      fieldSetFlags()[97] = false;
      return this;
    }

    /**
      * Gets the value of the 'terminationReason' field.
      * The reason the membership was terminated.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getTerminationReason() {
      return terminationReason;
    }

    /**
      * Sets the value of the 'terminationReason' field.
      * The reason the membership was terminated.
      * @param value The value of 'terminationReason'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder setTerminationReason(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[98], value);
      this.terminationReasonBuilder = null;
      this.terminationReason = value;
      fieldSetFlags()[98] = true;
      return this;
    }

    /**
      * Checks whether the 'terminationReason' field has been set.
      * The reason the membership was terminated.
      * @return True if the 'terminationReason' field has been set, false otherwise.
      */
    public boolean hasTerminationReason() {
      return fieldSetFlags()[98];
    }

    /**
     * Gets the Builder instance for the 'terminationReason' field and creates one if it doesn't exist yet.
     * The reason the membership was terminated.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getTerminationReasonBuilder() {
      if (terminationReasonBuilder == null) {
        if (hasTerminationReason()) {
          setTerminationReasonBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(terminationReason));
        } else {
          setTerminationReasonBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return terminationReasonBuilder;
    }

    /**
     * Sets the Builder instance for the 'terminationReason' field
     * The reason the membership was terminated.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Membership.Builder setTerminationReasonBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearTerminationReason();
      terminationReasonBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'terminationReason' field has an active Builder instance
     * The reason the membership was terminated.
     * @return True if the 'terminationReason' field has an active Builder instance
     */
    public boolean hasTerminationReasonBuilder() {
      return terminationReasonBuilder != null;
    }

    /**
      * Clears the value of the 'terminationReason' field.
      * The reason the membership was terminated.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Membership.Builder clearTerminationReason() {
      terminationReason = null;
      terminationReasonBuilder = null;
      fieldSetFlags()[98] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Membership build() {
      try {
        Membership record = new Membership();
        record.active = fieldSetFlags()[0] ? this.active : (java.lang.Boolean) defaultValue(fields()[0]);
        record.applicationIdentifier = fieldSetFlags()[1] ? this.applicationIdentifier : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.areaGroup = fieldSetFlags()[2] ? this.areaGroup : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (benefitStatusBuilder != null) {
          record.benefitStatus = this.benefitStatusBuilder.build();
        } else {
          record.benefitStatus = fieldSetFlags()[3] ? this.benefitStatus : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[3]);
        }
        record.billingSubgroupNumber = fieldSetFlags()[4] ? this.billingSubgroupNumber : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (bookOfBusinessBuilder != null) {
          record.bookOfBusiness = this.bookOfBusinessBuilder.build();
        } else {
          record.bookOfBusiness = fieldSetFlags()[5] ? this.bookOfBusiness : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[5]);
        }
        record.brandIdentifier = fieldSetFlags()[6] ? this.brandIdentifier : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (brandingEntityBuilder != null) {
          record.brandingEntity = this.brandingEntityBuilder.build();
        } else {
          record.brandingEntity = fieldSetFlags()[7] ? this.brandingEntity : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[7]);
        }
        record.brandName = fieldSetFlags()[8] ? this.brandName : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.bundleOptionPlans = fieldSetFlags()[9] ? this.bundleOptionPlans : (java.util.List<com.uhc.schema.model.eligibility.membership.BundleOptionPlan>) defaultValue(fields()[9]);
        if (businessBuilder != null) {
          record.business = this.businessBuilder.build();
        } else {
          record.business = fieldSetFlags()[10] ? this.business : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[10]);
        }
        record.businessSegment = fieldSetFlags()[11] ? this.businessSegment : (java.lang.CharSequence) defaultValue(fields()[11]);
        if (calapBuilder != null) {
          record.calap = this.calapBuilder.build();
        } else {
          record.calap = fieldSetFlags()[12] ? this.calap : (com.uhc.schema.model.eligibility.membership.CALAP) defaultValue(fields()[12]);
        }
        if (cancelReasonTypeBuilder != null) {
          record.cancelReasonType = this.cancelReasonTypeBuilder.build();
        } else {
          record.cancelReasonType = fieldSetFlags()[13] ? this.cancelReasonType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[13]);
        }
        if (claimSystemTypeBuilder != null) {
          record.claimSystemType = this.claimSystemTypeBuilder.build();
        } else {
          record.claimSystemType = fieldSetFlags()[14] ? this.claimSystemType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[14]);
        }
        if (coverageLevelBuilder != null) {
          record.coverageLevel = this.coverageLevelBuilder.build();
        } else {
          record.coverageLevel = fieldSetFlags()[15] ? this.coverageLevel : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[15]);
        }
        record.coveragePaidThruDate = fieldSetFlags()[16] ? this.coveragePaidThruDate : (java.lang.CharSequence) defaultValue(fields()[16]);
        if (coveragePaidThruReasonBuilder != null) {
          record.coveragePaidThruReason = this.coveragePaidThruReasonBuilder.build();
        } else {
          record.coveragePaidThruReason = fieldSetFlags()[17] ? this.coveragePaidThruReason : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[17]);
        }
        if (coverageStatusBuilder != null) {
          record.coverageStatus = this.coverageStatusBuilder.build();
        } else {
          record.coverageStatus = fieldSetFlags()[18] ? this.coverageStatus : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[18]);
        }
        record.creationDate = fieldSetFlags()[19] ? this.creationDate : (java.lang.CharSequence) defaultValue(fields()[19]);
        if (customerAccountBuilder != null) {
          record.customerAccount = this.customerAccountBuilder.build();
        } else {
          record.customerAccount = fieldSetFlags()[20] ? this.customerAccount : (com.uhc.schema.model.eligibility.CustomerAccount) defaultValue(fields()[20]);
        }
        record.customerAccountIdentifier = fieldSetFlags()[21] ? this.customerAccountIdentifier : (java.lang.CharSequence) defaultValue(fields()[21]);
        record.customerPurchaseEffectiveDate = fieldSetFlags()[22] ? this.customerPurchaseEffectiveDate : (java.lang.CharSequence) defaultValue(fields()[22]);
        record.customerPurchaseIdentifier = fieldSetFlags()[23] ? this.customerPurchaseIdentifier : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.customerPurchaseOptionIdentifier = fieldSetFlags()[24] ? this.customerPurchaseOptionIdentifier : (java.lang.CharSequence) defaultValue(fields()[24]);
        if (customerPurchaseStatusBuilder != null) {
          record.customerPurchaseStatus = this.customerPurchaseStatusBuilder.build();
        } else {
          record.customerPurchaseStatus = fieldSetFlags()[25] ? this.customerPurchaseStatus : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[25]);
        }
        record.customerPurchaseTerminationDate = fieldSetFlags()[26] ? this.customerPurchaseTerminationDate : (java.lang.CharSequence) defaultValue(fields()[26]);
        if (customerPurchaseTypeBuilder != null) {
          record.customerPurchaseType = this.customerPurchaseTypeBuilder.build();
        } else {
          record.customerPurchaseType = fieldSetFlags()[27] ? this.customerPurchaseType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[27]);
        }
        record.customerPurchaseVersionNumber = fieldSetFlags()[28] ? this.customerPurchaseVersionNumber : (java.lang.CharSequence) defaultValue(fields()[28]);
        record.differentFamilyMemberAddressIndicator = fieldSetFlags()[29] ? this.differentFamilyMemberAddressIndicator : (java.lang.CharSequence) defaultValue(fields()[29]);
        record.divisionCode = fieldSetFlags()[30] ? this.divisionCode : (java.lang.CharSequence) defaultValue(fields()[30]);
        if (distributionChannelBuilder != null) {
          record.distributionChannel = this.distributionChannelBuilder.build();
        } else {
          record.distributionChannel = fieldSetFlags()[31] ? this.distributionChannel : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[31]);
        }
        record.effectiveDate = fieldSetFlags()[32] ? this.effectiveDate : (java.lang.CharSequence) defaultValue(fields()[32]);
        record.eligibilityGracePeriodThruDate = fieldSetFlags()[33] ? this.eligibilityGracePeriodThruDate : (java.lang.CharSequence) defaultValue(fields()[33]);
        if (eligibilitySystemTypeBuilder != null) {
          record.eligibilitySystemType = this.eligibilitySystemTypeBuilder.build();
        } else {
          record.eligibilitySystemType = fieldSetFlags()[34] ? this.eligibilitySystemType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[34]);
        }
        record.employerIdentifier = fieldSetFlags()[35] ? this.employerIdentifier : (java.lang.CharSequence) defaultValue(fields()[35]);
        record.enrolleeMemberFacingIdentifier = fieldSetFlags()[36] ? this.enrolleeMemberFacingIdentifier : (java.lang.CharSequence) defaultValue(fields()[36]);
        record.enrolleeSourceCode = fieldSetFlags()[37] ? this.enrolleeSourceCode : (java.lang.CharSequence) defaultValue(fields()[37]);
        record.enrolleeSourceId = fieldSetFlags()[38] ? this.enrolleeSourceId : (java.lang.CharSequence) defaultValue(fields()[38]);
        record.erisaIndicator = fieldSetFlags()[39] ? this.erisaIndicator : (java.lang.CharSequence) defaultValue(fields()[39]);
        record.familyLastUpdatedTimestamp = fieldSetFlags()[40] ? this.familyLastUpdatedTimestamp : (java.lang.CharSequence) defaultValue(fields()[40]);
        if (financialAccountBuilder != null) {
          record.financialAccount = this.financialAccountBuilder.build();
        } else {
          record.financialAccount = fieldSetFlags()[41] ? this.financialAccount : (com.uhc.schema.model.eligibility.membership.FinancialAccount) defaultValue(fields()[41]);
        }
        record.hContractId = fieldSetFlags()[42] ? this.hContractId : (java.lang.CharSequence) defaultValue(fields()[42]);
        record.healthPlanCode = fieldSetFlags()[43] ? this.healthPlanCode : (java.lang.CharSequence) defaultValue(fields()[43]);
        record.healthProgramCode = fieldSetFlags()[44] ? this.healthProgramCode : (java.lang.CharSequence) defaultValue(fields()[44]);
        record.holdReason = fieldSetFlags()[45] ? this.holdReason : (java.util.List<com.uhc.schema.model.eligibility.membership.HoldReason>) defaultValue(fields()[45]);
        record.individualIdentifier = fieldSetFlags()[46] ? this.individualIdentifier : (java.lang.CharSequence) defaultValue(fields()[46]);
        record.individualTerminationDate = fieldSetFlags()[47] ? this.individualTerminationDate : (java.lang.CharSequence) defaultValue(fields()[47]);
        record.lastPremiumPaidDate = fieldSetFlags()[48] ? this.lastPremiumPaidDate : (java.lang.CharSequence) defaultValue(fields()[48]);
        if (lastUpdatedBuilder != null) {
          record.lastUpdated = this.lastUpdatedBuilder.build();
        } else {
          record.lastUpdated = fieldSetFlags()[49] ? this.lastUpdated : (com.uhc.schema.model.eligibility.common.LastUpdated) defaultValue(fields()[49]);
        }
        record.lateEnrollCode = fieldSetFlags()[50] ? this.lateEnrollCode : (java.lang.CharSequence) defaultValue(fields()[50]);
        if (legacyAttributesBuilder != null) {
          record.legacyAttributes = this.legacyAttributesBuilder.build();
        } else {
          record.legacyAttributes = fieldSetFlags()[51] ? this.legacyAttributes : (com.uhc.schema.model.eligibility.membership.MembershipLegacyAttributes) defaultValue(fields()[51]);
        }
        if (lifeAndDisabilityBuilder != null) {
          record.lifeAndDisability = this.lifeAndDisabilityBuilder.build();
        } else {
          record.lifeAndDisability = fieldSetFlags()[52] ? this.lifeAndDisability : (com.uhc.schema.model.eligibility.membership.LifeAndDisability) defaultValue(fields()[52]);
        }
        if (marketSegmentBuilder != null) {
          record.marketSegment = this.marketSegmentBuilder.build();
        } else {
          record.marketSegment = fieldSetFlags()[53] ? this.marketSegment : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[53]);
        }
        if (marketTypeBuilder != null) {
          record.marketType = this.marketTypeBuilder.build();
        } else {
          record.marketType = fieldSetFlags()[54] ? this.marketType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[54]);
        }
        record.medicareAndRetirementMembershipProfiles = fieldSetFlags()[55] ? this.medicareAndRetirementMembershipProfiles : (java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile>) defaultValue(fields()[55]);
        record.medicareAndRetirementPassportProfiles = fieldSetFlags()[56] ? this.medicareAndRetirementPassportProfiles : (java.util.List<com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile>) defaultValue(fields()[56]);
        record.memberDeliveryPreferences = fieldSetFlags()[57] ? this.memberDeliveryPreferences : (java.util.List<com.uhc.schema.model.eligibility.membership.MemberDeliveryPreference>) defaultValue(fields()[57]);
        record.memberEnrollmentOtherIdentifiers = fieldSetFlags()[58] ? this.memberEnrollmentOtherIdentifiers : (java.util.List<com.uhc.schema.model.eligibility.membership.MemberEnrollmentOtherIdentifier>) defaultValue(fields()[58]);
        record.memberGroupContractPlanOptionId = fieldSetFlags()[59] ? this.memberGroupContractPlanOptionId : (java.lang.CharSequence) defaultValue(fields()[59]);
        record.memberMarketNumber = fieldSetFlags()[60] ? this.memberMarketNumber : (java.lang.CharSequence) defaultValue(fields()[60]);
        record.membershipGroupData = fieldSetFlags()[61] ? this.membershipGroupData : (java.util.List<com.uhc.schema.model.eligibility.membership.MembershipGroupData>) defaultValue(fields()[61]);
        record.membershipIdentifier = fieldSetFlags()[62] ? this.membershipIdentifier : (java.lang.CharSequence) defaultValue(fields()[62]);
        if (organizationBuilder != null) {
          record.organization = this.organizationBuilder.build();
        } else {
          record.organization = fieldSetFlags()[63] ? this.organization : (com.uhc.schema.model.eligibility.Organization) defaultValue(fields()[63]);
        }
        record.organizationIdentifier = fieldSetFlags()[64] ? this.organizationIdentifier : (java.lang.CharSequence) defaultValue(fields()[64]);
        record.organizationPopulationGroupNumber = fieldSetFlags()[65] ? this.organizationPopulationGroupNumber : (java.lang.CharSequence) defaultValue(fields()[65]);
        record.packageBenefitPlanCode = fieldSetFlags()[66] ? this.packageBenefitPlanCode : (java.lang.CharSequence) defaultValue(fields()[66]);
        record.packageOptionDescription = fieldSetFlags()[67] ? this.packageOptionDescription : (java.lang.CharSequence) defaultValue(fields()[67]);
        record.packageOptionId = fieldSetFlags()[68] ? this.packageOptionId : (java.lang.CharSequence) defaultValue(fields()[68]);
        record.panelNumber = fieldSetFlags()[69] ? this.panelNumber : (java.lang.CharSequence) defaultValue(fields()[69]);
        record.passportGroupNumber = fieldSetFlags()[70] ? this.passportGroupNumber : (java.lang.CharSequence) defaultValue(fields()[70]);
        record.parentMembershipIdentifier = fieldSetFlags()[71] ? this.parentMembershipIdentifier : (java.lang.CharSequence) defaultValue(fields()[71]);
        record.pcpMedicalDirectorApprovalIndicator = fieldSetFlags()[72] ? this.pcpMedicalDirectorApprovalIndicator : (java.lang.CharSequence) defaultValue(fields()[72]);
        if (planBuilder != null) {
          record.plan = this.planBuilder.build();
        } else {
          record.plan = fieldSetFlags()[73] ? this.plan : (com.uhc.schema.model.eligibility.Plan) defaultValue(fields()[73]);
        }
        record.planCode = fieldSetFlags()[74] ? this.planCode : (java.lang.CharSequence) defaultValue(fields()[74]);
        record.priorHealthCoverageMonths = fieldSetFlags()[75] ? this.priorHealthCoverageMonths : (java.lang.CharSequence) defaultValue(fields()[75]);
        if (productBuilder != null) {
          record.product = this.productBuilder.build();
        } else {
          record.product = fieldSetFlags()[76] ? this.product : (com.uhc.schema.model.eligibility.Product) defaultValue(fields()[76]);
        }
        record.productCode = fieldSetFlags()[77] ? this.productCode : (java.lang.CharSequence) defaultValue(fields()[77]);
        record.qmcsoIndicator = fieldSetFlags()[78] ? this.qmcsoIndicator : (java.lang.CharSequence) defaultValue(fields()[78]);
        record.recordType = fieldSetFlags()[79] ? this.recordType : (java.lang.CharSequence) defaultValue(fields()[79]);
        if (relationshipTypeBuilder != null) {
          record.relationshipType = this.relationshipTypeBuilder.build();
        } else {
          record.relationshipType = fieldSetFlags()[80] ? this.relationshipType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[80]);
        }
        if (revenueArrangementBuilder != null) {
          record.revenueArrangement = this.revenueArrangementBuilder.build();
        } else {
          record.revenueArrangement = fieldSetFlags()[81] ? this.revenueArrangement : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[81]);
        }
        record.riskGroupId = fieldSetFlags()[82] ? this.riskGroupId : (java.lang.CharSequence) defaultValue(fields()[82]);
        record.riskGroupName = fieldSetFlags()[83] ? this.riskGroupName : (java.lang.CharSequence) defaultValue(fields()[83]);
        record.salesAgentIdentifier = fieldSetFlags()[84] ? this.salesAgentIdentifier : (java.lang.CharSequence) defaultValue(fields()[84]);
        if (securityBuilder != null) {
          record.security = this.securityBuilder.build();
        } else {
          record.security = fieldSetFlags()[85] ? this.security : (com.uhc.schema.model.eligibility.common.Security) defaultValue(fields()[85]);
        }
        record.segmentId = fieldSetFlags()[86] ? this.segmentId : (java.lang.CharSequence) defaultValue(fields()[86]);
        record.site = fieldSetFlags()[87] ? this.site : (java.lang.CharSequence) defaultValue(fields()[87]);
        record.situsState = fieldSetFlags()[88] ? this.situsState : (java.lang.CharSequence) defaultValue(fields()[88]);
        if (sourceSystemAttributesBuilder != null) {
          record.sourceSystemAttributes = this.sourceSystemAttributesBuilder.build();
        } else {
          record.sourceSystemAttributes = fieldSetFlags()[89] ? this.sourceSystemAttributes : (com.uhc.schema.model.eligibility.membership.MembershipSourceSystemAttributes) defaultValue(fields()[89]);
        }
        record.sourceSystemCode = fieldSetFlags()[90] ? this.sourceSystemCode : (java.lang.CharSequence) defaultValue(fields()[90]);
        record.sourceTerminationDate = fieldSetFlags()[91] ? this.sourceTerminationDate : (java.lang.CharSequence) defaultValue(fields()[91]);
        record.subscriberEnrolleeSourceId = fieldSetFlags()[92] ? this.subscriberEnrolleeSourceId : (java.lang.CharSequence) defaultValue(fields()[92]);
        record.subscriberIndividualIdentifier = fieldSetFlags()[93] ? this.subscriberIndividualIdentifier : (java.lang.CharSequence) defaultValue(fields()[93]);
        record.subscriberMemberFacingIdentifier = fieldSetFlags()[94] ? this.subscriberMemberFacingIdentifier : (java.lang.CharSequence) defaultValue(fields()[94]);
        record.subscriberSocialSecurityNumber = fieldSetFlags()[95] ? this.subscriberSocialSecurityNumber : (java.lang.CharSequence) defaultValue(fields()[95]);
        record.subsidizedInsuredPlans = fieldSetFlags()[96] ? this.subsidizedInsuredPlans : (java.util.List<com.uhc.schema.model.eligibility.membership.SubsidizedInsuredPlan>) defaultValue(fields()[96]);
        record.terminationDate = fieldSetFlags()[97] ? this.terminationDate : (java.lang.CharSequence) defaultValue(fields()[97]);
        if (terminationReasonBuilder != null) {
          record.terminationReason = this.terminationReasonBuilder.build();
        } else {
          record.terminationReason = fieldSetFlags()[98] ? this.terminationReason : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[98]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Membership>
    WRITER$ = (org.apache.avro.io.DatumWriter<Membership>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Membership>
    READER$ = (org.apache.avro.io.DatumReader<Membership>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
