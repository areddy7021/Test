/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.medicareandretirement;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MedicareAndRetirementMembershipProfile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4085883045303372736L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MedicareAndRetirementMembershipProfile\",\"namespace\":\"com.uhc.schema.model.eligibility.medicareandretirement\",\"fields\":[{\"name\":\"copayCategory\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"credibleCoverageIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"familyIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lepChangeReasonName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lepReconsiderLetterDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lowIncomePremiumSubsidyPct\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"netLepAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"profileDates\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DateRangeType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}],\"default\":null},{\"name\":\"subsidySource\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"uncoveredMonthDates\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DateRangeType\"],\"default\":null},{\"name\":\"uncoveredMonths\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MedicareAndRetirementMembershipProfile> ENCODER =
      new BinaryMessageEncoder<MedicareAndRetirementMembershipProfile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MedicareAndRetirementMembershipProfile> DECODER =
      new BinaryMessageDecoder<MedicareAndRetirementMembershipProfile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MedicareAndRetirementMembershipProfile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MedicareAndRetirementMembershipProfile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MedicareAndRetirementMembershipProfile>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MedicareAndRetirementMembershipProfile to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MedicareAndRetirementMembershipProfile from a ByteBuffer. */
  public static MedicareAndRetirementMembershipProfile fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType copayCategory;
  @Deprecated public java.lang.CharSequence credibleCoverageIndicator;
  @Deprecated public java.lang.CharSequence familyIdentifier;
  @Deprecated public java.lang.CharSequence lepChangeReasonName;
  @Deprecated public java.lang.CharSequence lepReconsiderLetterDate;
  @Deprecated public java.lang.Integer lowIncomePremiumSubsidyPct;
  @Deprecated public java.lang.CharSequence netLepAmount;
  @Deprecated public com.uhc.schema.model.eligibility.common.DateRangeType profileDates;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType subsidySource;
  @Deprecated public com.uhc.schema.model.eligibility.common.DateRangeType uncoveredMonthDates;
  @Deprecated public java.lang.Integer uncoveredMonths;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MedicareAndRetirementMembershipProfile() {}

  /**
   * All-args constructor.
   * @param copayCategory The new value for copayCategory
   * @param credibleCoverageIndicator The new value for credibleCoverageIndicator
   * @param familyIdentifier The new value for familyIdentifier
   * @param lepChangeReasonName The new value for lepChangeReasonName
   * @param lepReconsiderLetterDate The new value for lepReconsiderLetterDate
   * @param lowIncomePremiumSubsidyPct The new value for lowIncomePremiumSubsidyPct
   * @param netLepAmount The new value for netLepAmount
   * @param profileDates The new value for profileDates
   * @param subsidySource The new value for subsidySource
   * @param uncoveredMonthDates The new value for uncoveredMonthDates
   * @param uncoveredMonths The new value for uncoveredMonths
   */
  public MedicareAndRetirementMembershipProfile(com.uhc.schema.model.eligibility.common.DescriptionType copayCategory, java.lang.CharSequence credibleCoverageIndicator, java.lang.CharSequence familyIdentifier, java.lang.CharSequence lepChangeReasonName, java.lang.CharSequence lepReconsiderLetterDate, java.lang.Integer lowIncomePremiumSubsidyPct, java.lang.CharSequence netLepAmount, com.uhc.schema.model.eligibility.common.DateRangeType profileDates, com.uhc.schema.model.eligibility.common.DescriptionType subsidySource, com.uhc.schema.model.eligibility.common.DateRangeType uncoveredMonthDates, java.lang.Integer uncoveredMonths) {
    this.copayCategory = copayCategory;
    this.credibleCoverageIndicator = credibleCoverageIndicator;
    this.familyIdentifier = familyIdentifier;
    this.lepChangeReasonName = lepChangeReasonName;
    this.lepReconsiderLetterDate = lepReconsiderLetterDate;
    this.lowIncomePremiumSubsidyPct = lowIncomePremiumSubsidyPct;
    this.netLepAmount = netLepAmount;
    this.profileDates = profileDates;
    this.subsidySource = subsidySource;
    this.uncoveredMonthDates = uncoveredMonthDates;
    this.uncoveredMonths = uncoveredMonths;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return copayCategory;
    case 1: return credibleCoverageIndicator;
    case 2: return familyIdentifier;
    case 3: return lepChangeReasonName;
    case 4: return lepReconsiderLetterDate;
    case 5: return lowIncomePremiumSubsidyPct;
    case 6: return netLepAmount;
    case 7: return profileDates;
    case 8: return subsidySource;
    case 9: return uncoveredMonthDates;
    case 10: return uncoveredMonths;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: copayCategory = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 1: credibleCoverageIndicator = (java.lang.CharSequence)value$; break;
    case 2: familyIdentifier = (java.lang.CharSequence)value$; break;
    case 3: lepChangeReasonName = (java.lang.CharSequence)value$; break;
    case 4: lepReconsiderLetterDate = (java.lang.CharSequence)value$; break;
    case 5: lowIncomePremiumSubsidyPct = (java.lang.Integer)value$; break;
    case 6: netLepAmount = (java.lang.CharSequence)value$; break;
    case 7: profileDates = (com.uhc.schema.model.eligibility.common.DateRangeType)value$; break;
    case 8: subsidySource = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 9: uncoveredMonthDates = (com.uhc.schema.model.eligibility.common.DateRangeType)value$; break;
    case 10: uncoveredMonths = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'copayCategory' field.
   * @return The value of the 'copayCategory' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCopayCategory() {
    return copayCategory;
  }

  /**
   * Sets the value of the 'copayCategory' field.
   * @param value the value to set.
   */
  public void setCopayCategory(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.copayCategory = value;
  }

  /**
   * Gets the value of the 'credibleCoverageIndicator' field.
   * @return The value of the 'credibleCoverageIndicator' field.
   */
  public java.lang.CharSequence getCredibleCoverageIndicator() {
    return credibleCoverageIndicator;
  }

  /**
   * Sets the value of the 'credibleCoverageIndicator' field.
   * @param value the value to set.
   */
  public void setCredibleCoverageIndicator(java.lang.CharSequence value) {
    this.credibleCoverageIndicator = value;
  }

  /**
   * Gets the value of the 'familyIdentifier' field.
   * @return The value of the 'familyIdentifier' field.
   */
  public java.lang.CharSequence getFamilyIdentifier() {
    return familyIdentifier;
  }

  /**
   * Sets the value of the 'familyIdentifier' field.
   * @param value the value to set.
   */
  public void setFamilyIdentifier(java.lang.CharSequence value) {
    this.familyIdentifier = value;
  }

  /**
   * Gets the value of the 'lepChangeReasonName' field.
   * @return The value of the 'lepChangeReasonName' field.
   */
  public java.lang.CharSequence getLepChangeReasonName() {
    return lepChangeReasonName;
  }

  /**
   * Sets the value of the 'lepChangeReasonName' field.
   * @param value the value to set.
   */
  public void setLepChangeReasonName(java.lang.CharSequence value) {
    this.lepChangeReasonName = value;
  }

  /**
   * Gets the value of the 'lepReconsiderLetterDate' field.
   * @return The value of the 'lepReconsiderLetterDate' field.
   */
  public java.lang.CharSequence getLepReconsiderLetterDate() {
    return lepReconsiderLetterDate;
  }

  /**
   * Sets the value of the 'lepReconsiderLetterDate' field.
   * @param value the value to set.
   */
  public void setLepReconsiderLetterDate(java.lang.CharSequence value) {
    this.lepReconsiderLetterDate = value;
  }

  /**
   * Gets the value of the 'lowIncomePremiumSubsidyPct' field.
   * @return The value of the 'lowIncomePremiumSubsidyPct' field.
   */
  public java.lang.Integer getLowIncomePremiumSubsidyPct() {
    return lowIncomePremiumSubsidyPct;
  }

  /**
   * Sets the value of the 'lowIncomePremiumSubsidyPct' field.
   * @param value the value to set.
   */
  public void setLowIncomePremiumSubsidyPct(java.lang.Integer value) {
    this.lowIncomePremiumSubsidyPct = value;
  }

  /**
   * Gets the value of the 'netLepAmount' field.
   * @return The value of the 'netLepAmount' field.
   */
  public java.lang.CharSequence getNetLepAmount() {
    return netLepAmount;
  }

  /**
   * Sets the value of the 'netLepAmount' field.
   * @param value the value to set.
   */
  public void setNetLepAmount(java.lang.CharSequence value) {
    this.netLepAmount = value;
  }

  /**
   * Gets the value of the 'profileDates' field.
   * @return The value of the 'profileDates' field.
   */
  public com.uhc.schema.model.eligibility.common.DateRangeType getProfileDates() {
    return profileDates;
  }

  /**
   * Sets the value of the 'profileDates' field.
   * @param value the value to set.
   */
  public void setProfileDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
    this.profileDates = value;
  }

  /**
   * Gets the value of the 'subsidySource' field.
   * @return The value of the 'subsidySource' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getSubsidySource() {
    return subsidySource;
  }

  /**
   * Sets the value of the 'subsidySource' field.
   * @param value the value to set.
   */
  public void setSubsidySource(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.subsidySource = value;
  }

  /**
   * Gets the value of the 'uncoveredMonthDates' field.
   * @return The value of the 'uncoveredMonthDates' field.
   */
  public com.uhc.schema.model.eligibility.common.DateRangeType getUncoveredMonthDates() {
    return uncoveredMonthDates;
  }

  /**
   * Sets the value of the 'uncoveredMonthDates' field.
   * @param value the value to set.
   */
  public void setUncoveredMonthDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
    this.uncoveredMonthDates = value;
  }

  /**
   * Gets the value of the 'uncoveredMonths' field.
   * @return The value of the 'uncoveredMonths' field.
   */
  public java.lang.Integer getUncoveredMonths() {
    return uncoveredMonths;
  }

  /**
   * Sets the value of the 'uncoveredMonths' field.
   * @param value the value to set.
   */
  public void setUncoveredMonths(java.lang.Integer value) {
    this.uncoveredMonths = value;
  }

  /**
   * Creates a new MedicareAndRetirementMembershipProfile RecordBuilder.
   * @return A new MedicareAndRetirementMembershipProfile RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder();
  }

  /**
   * Creates a new MedicareAndRetirementMembershipProfile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MedicareAndRetirementMembershipProfile RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder newBuilder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder other) {
    return new com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder(other);
  }

  /**
   * Creates a new MedicareAndRetirementMembershipProfile RecordBuilder by copying an existing MedicareAndRetirementMembershipProfile instance.
   * @param other The existing instance to copy.
   * @return A new MedicareAndRetirementMembershipProfile RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder newBuilder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile other) {
    return new com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder(other);
  }

  /**
   * RecordBuilder for MedicareAndRetirementMembershipProfile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MedicareAndRetirementMembershipProfile>
    implements org.apache.avro.data.RecordBuilder<MedicareAndRetirementMembershipProfile> {

    private com.uhc.schema.model.eligibility.common.DescriptionType copayCategory;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder copayCategoryBuilder;
    private java.lang.CharSequence credibleCoverageIndicator;
    private java.lang.CharSequence familyIdentifier;
    private java.lang.CharSequence lepChangeReasonName;
    private java.lang.CharSequence lepReconsiderLetterDate;
    private java.lang.Integer lowIncomePremiumSubsidyPct;
    private java.lang.CharSequence netLepAmount;
    private com.uhc.schema.model.eligibility.common.DateRangeType profileDates;
    private com.uhc.schema.model.eligibility.common.DateRangeType.Builder profileDatesBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType subsidySource;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder subsidySourceBuilder;
    private com.uhc.schema.model.eligibility.common.DateRangeType uncoveredMonthDates;
    private com.uhc.schema.model.eligibility.common.DateRangeType.Builder uncoveredMonthDatesBuilder;
    private java.lang.Integer uncoveredMonths;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.copayCategory)) {
        this.copayCategory = data().deepCopy(fields()[0].schema(), other.copayCategory);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCopayCategoryBuilder()) {
        this.copayCategoryBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCopayCategoryBuilder());
      }
      if (isValidValue(fields()[1], other.credibleCoverageIndicator)) {
        this.credibleCoverageIndicator = data().deepCopy(fields()[1].schema(), other.credibleCoverageIndicator);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.familyIdentifier)) {
        this.familyIdentifier = data().deepCopy(fields()[2].schema(), other.familyIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lepChangeReasonName)) {
        this.lepChangeReasonName = data().deepCopy(fields()[3].schema(), other.lepChangeReasonName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lepReconsiderLetterDate)) {
        this.lepReconsiderLetterDate = data().deepCopy(fields()[4].schema(), other.lepReconsiderLetterDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lowIncomePremiumSubsidyPct)) {
        this.lowIncomePremiumSubsidyPct = data().deepCopy(fields()[5].schema(), other.lowIncomePremiumSubsidyPct);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.netLepAmount)) {
        this.netLepAmount = data().deepCopy(fields()[6].schema(), other.netLepAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.profileDates)) {
        this.profileDates = data().deepCopy(fields()[7].schema(), other.profileDates);
        fieldSetFlags()[7] = true;
      }
      if (other.hasProfileDatesBuilder()) {
        this.profileDatesBuilder = com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(other.getProfileDatesBuilder());
      }
      if (isValidValue(fields()[8], other.subsidySource)) {
        this.subsidySource = data().deepCopy(fields()[8].schema(), other.subsidySource);
        fieldSetFlags()[8] = true;
      }
      if (other.hasSubsidySourceBuilder()) {
        this.subsidySourceBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getSubsidySourceBuilder());
      }
      if (isValidValue(fields()[9], other.uncoveredMonthDates)) {
        this.uncoveredMonthDates = data().deepCopy(fields()[9].schema(), other.uncoveredMonthDates);
        fieldSetFlags()[9] = true;
      }
      if (other.hasUncoveredMonthDatesBuilder()) {
        this.uncoveredMonthDatesBuilder = com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(other.getUncoveredMonthDatesBuilder());
      }
      if (isValidValue(fields()[10], other.uncoveredMonths)) {
        this.uncoveredMonths = data().deepCopy(fields()[10].schema(), other.uncoveredMonths);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MedicareAndRetirementMembershipProfile instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.copayCategory)) {
        this.copayCategory = data().deepCopy(fields()[0].schema(), other.copayCategory);
        fieldSetFlags()[0] = true;
      }
      this.copayCategoryBuilder = null;
      if (isValidValue(fields()[1], other.credibleCoverageIndicator)) {
        this.credibleCoverageIndicator = data().deepCopy(fields()[1].schema(), other.credibleCoverageIndicator);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.familyIdentifier)) {
        this.familyIdentifier = data().deepCopy(fields()[2].schema(), other.familyIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lepChangeReasonName)) {
        this.lepChangeReasonName = data().deepCopy(fields()[3].schema(), other.lepChangeReasonName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lepReconsiderLetterDate)) {
        this.lepReconsiderLetterDate = data().deepCopy(fields()[4].schema(), other.lepReconsiderLetterDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lowIncomePremiumSubsidyPct)) {
        this.lowIncomePremiumSubsidyPct = data().deepCopy(fields()[5].schema(), other.lowIncomePremiumSubsidyPct);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.netLepAmount)) {
        this.netLepAmount = data().deepCopy(fields()[6].schema(), other.netLepAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.profileDates)) {
        this.profileDates = data().deepCopy(fields()[7].schema(), other.profileDates);
        fieldSetFlags()[7] = true;
      }
      this.profileDatesBuilder = null;
      if (isValidValue(fields()[8], other.subsidySource)) {
        this.subsidySource = data().deepCopy(fields()[8].schema(), other.subsidySource);
        fieldSetFlags()[8] = true;
      }
      this.subsidySourceBuilder = null;
      if (isValidValue(fields()[9], other.uncoveredMonthDates)) {
        this.uncoveredMonthDates = data().deepCopy(fields()[9].schema(), other.uncoveredMonthDates);
        fieldSetFlags()[9] = true;
      }
      this.uncoveredMonthDatesBuilder = null;
      if (isValidValue(fields()[10], other.uncoveredMonths)) {
        this.uncoveredMonths = data().deepCopy(fields()[10].schema(), other.uncoveredMonths);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'copayCategory' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCopayCategory() {
      return copayCategory;
    }

    /**
      * Sets the value of the 'copayCategory' field.
      * @param value The value of 'copayCategory'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setCopayCategory(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[0], value);
      this.copayCategoryBuilder = null;
      this.copayCategory = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'copayCategory' field has been set.
      * @return True if the 'copayCategory' field has been set, false otherwise.
      */
    public boolean hasCopayCategory() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'copayCategory' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCopayCategoryBuilder() {
      if (copayCategoryBuilder == null) {
        if (hasCopayCategory()) {
          setCopayCategoryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(copayCategory));
        } else {
          setCopayCategoryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return copayCategoryBuilder;
    }

    /**
     * Sets the Builder instance for the 'copayCategory' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setCopayCategoryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCopayCategory();
      copayCategoryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'copayCategory' field has an active Builder instance
     * @return True if the 'copayCategory' field has an active Builder instance
     */
    public boolean hasCopayCategoryBuilder() {
      return copayCategoryBuilder != null;
    }

    /**
      * Clears the value of the 'copayCategory' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearCopayCategory() {
      copayCategory = null;
      copayCategoryBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'credibleCoverageIndicator' field.
      * @return The value.
      */
    public java.lang.CharSequence getCredibleCoverageIndicator() {
      return credibleCoverageIndicator;
    }

    /**
      * Sets the value of the 'credibleCoverageIndicator' field.
      * @param value The value of 'credibleCoverageIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setCredibleCoverageIndicator(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.credibleCoverageIndicator = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'credibleCoverageIndicator' field has been set.
      * @return True if the 'credibleCoverageIndicator' field has been set, false otherwise.
      */
    public boolean hasCredibleCoverageIndicator() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'credibleCoverageIndicator' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearCredibleCoverageIndicator() {
      credibleCoverageIndicator = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'familyIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getFamilyIdentifier() {
      return familyIdentifier;
    }

    /**
      * Sets the value of the 'familyIdentifier' field.
      * @param value The value of 'familyIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setFamilyIdentifier(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.familyIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'familyIdentifier' field has been set.
      * @return True if the 'familyIdentifier' field has been set, false otherwise.
      */
    public boolean hasFamilyIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'familyIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearFamilyIdentifier() {
      familyIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lepChangeReasonName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLepChangeReasonName() {
      return lepChangeReasonName;
    }

    /**
      * Sets the value of the 'lepChangeReasonName' field.
      * @param value The value of 'lepChangeReasonName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setLepChangeReasonName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.lepChangeReasonName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lepChangeReasonName' field has been set.
      * @return True if the 'lepChangeReasonName' field has been set, false otherwise.
      */
    public boolean hasLepChangeReasonName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lepChangeReasonName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearLepChangeReasonName() {
      lepChangeReasonName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lepReconsiderLetterDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getLepReconsiderLetterDate() {
      return lepReconsiderLetterDate;
    }

    /**
      * Sets the value of the 'lepReconsiderLetterDate' field.
      * @param value The value of 'lepReconsiderLetterDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setLepReconsiderLetterDate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lepReconsiderLetterDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lepReconsiderLetterDate' field has been set.
      * @return True if the 'lepReconsiderLetterDate' field has been set, false otherwise.
      */
    public boolean hasLepReconsiderLetterDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lepReconsiderLetterDate' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearLepReconsiderLetterDate() {
      lepReconsiderLetterDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowIncomePremiumSubsidyPct' field.
      * @return The value.
      */
    public java.lang.Integer getLowIncomePremiumSubsidyPct() {
      return lowIncomePremiumSubsidyPct;
    }

    /**
      * Sets the value of the 'lowIncomePremiumSubsidyPct' field.
      * @param value The value of 'lowIncomePremiumSubsidyPct'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setLowIncomePremiumSubsidyPct(java.lang.Integer value) {
      validate(fields()[5], value);
      this.lowIncomePremiumSubsidyPct = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lowIncomePremiumSubsidyPct' field has been set.
      * @return True if the 'lowIncomePremiumSubsidyPct' field has been set, false otherwise.
      */
    public boolean hasLowIncomePremiumSubsidyPct() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lowIncomePremiumSubsidyPct' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearLowIncomePremiumSubsidyPct() {
      lowIncomePremiumSubsidyPct = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'netLepAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getNetLepAmount() {
      return netLepAmount;
    }

    /**
      * Sets the value of the 'netLepAmount' field.
      * @param value The value of 'netLepAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setNetLepAmount(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.netLepAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'netLepAmount' field has been set.
      * @return True if the 'netLepAmount' field has been set, false otherwise.
      */
    public boolean hasNetLepAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'netLepAmount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearNetLepAmount() {
      netLepAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'profileDates' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DateRangeType getProfileDates() {
      return profileDates;
    }

    /**
      * Sets the value of the 'profileDates' field.
      * @param value The value of 'profileDates'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setProfileDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
      validate(fields()[7], value);
      this.profileDatesBuilder = null;
      this.profileDates = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'profileDates' field has been set.
      * @return True if the 'profileDates' field has been set, false otherwise.
      */
    public boolean hasProfileDates() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'profileDates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DateRangeType.Builder getProfileDatesBuilder() {
      if (profileDatesBuilder == null) {
        if (hasProfileDates()) {
          setProfileDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(profileDates));
        } else {
          setProfileDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder());
        }
      }
      return profileDatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'profileDates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setProfileDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.Builder value) {
      clearProfileDates();
      profileDatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'profileDates' field has an active Builder instance
     * @return True if the 'profileDates' field has an active Builder instance
     */
    public boolean hasProfileDatesBuilder() {
      return profileDatesBuilder != null;
    }

    /**
      * Clears the value of the 'profileDates' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearProfileDates() {
      profileDates = null;
      profileDatesBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'subsidySource' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getSubsidySource() {
      return subsidySource;
    }

    /**
      * Sets the value of the 'subsidySource' field.
      * @param value The value of 'subsidySource'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setSubsidySource(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[8], value);
      this.subsidySourceBuilder = null;
      this.subsidySource = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'subsidySource' field has been set.
      * @return True if the 'subsidySource' field has been set, false otherwise.
      */
    public boolean hasSubsidySource() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'subsidySource' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getSubsidySourceBuilder() {
      if (subsidySourceBuilder == null) {
        if (hasSubsidySource()) {
          setSubsidySourceBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(subsidySource));
        } else {
          setSubsidySourceBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return subsidySourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'subsidySource' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setSubsidySourceBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearSubsidySource();
      subsidySourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'subsidySource' field has an active Builder instance
     * @return True if the 'subsidySource' field has an active Builder instance
     */
    public boolean hasSubsidySourceBuilder() {
      return subsidySourceBuilder != null;
    }

    /**
      * Clears the value of the 'subsidySource' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearSubsidySource() {
      subsidySource = null;
      subsidySourceBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncoveredMonthDates' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DateRangeType getUncoveredMonthDates() {
      return uncoveredMonthDates;
    }

    /**
      * Sets the value of the 'uncoveredMonthDates' field.
      * @param value The value of 'uncoveredMonthDates'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setUncoveredMonthDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
      validate(fields()[9], value);
      this.uncoveredMonthDatesBuilder = null;
      this.uncoveredMonthDates = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'uncoveredMonthDates' field has been set.
      * @return True if the 'uncoveredMonthDates' field has been set, false otherwise.
      */
    public boolean hasUncoveredMonthDates() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'uncoveredMonthDates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DateRangeType.Builder getUncoveredMonthDatesBuilder() {
      if (uncoveredMonthDatesBuilder == null) {
        if (hasUncoveredMonthDates()) {
          setUncoveredMonthDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(uncoveredMonthDates));
        } else {
          setUncoveredMonthDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder());
        }
      }
      return uncoveredMonthDatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'uncoveredMonthDates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setUncoveredMonthDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.Builder value) {
      clearUncoveredMonthDates();
      uncoveredMonthDatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'uncoveredMonthDates' field has an active Builder instance
     * @return True if the 'uncoveredMonthDates' field has an active Builder instance
     */
    public boolean hasUncoveredMonthDatesBuilder() {
      return uncoveredMonthDatesBuilder != null;
    }

    /**
      * Clears the value of the 'uncoveredMonthDates' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearUncoveredMonthDates() {
      uncoveredMonthDates = null;
      uncoveredMonthDatesBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncoveredMonths' field.
      * @return The value.
      */
    public java.lang.Integer getUncoveredMonths() {
      return uncoveredMonths;
    }

    /**
      * Sets the value of the 'uncoveredMonths' field.
      * @param value The value of 'uncoveredMonths'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder setUncoveredMonths(java.lang.Integer value) {
      validate(fields()[10], value);
      this.uncoveredMonths = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'uncoveredMonths' field has been set.
      * @return True if the 'uncoveredMonths' field has been set, false otherwise.
      */
    public boolean hasUncoveredMonths() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'uncoveredMonths' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementMembershipProfile.Builder clearUncoveredMonths() {
      uncoveredMonths = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MedicareAndRetirementMembershipProfile build() {
      try {
        MedicareAndRetirementMembershipProfile record = new MedicareAndRetirementMembershipProfile();
        if (copayCategoryBuilder != null) {
          record.copayCategory = this.copayCategoryBuilder.build();
        } else {
          record.copayCategory = fieldSetFlags()[0] ? this.copayCategory : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[0]);
        }
        record.credibleCoverageIndicator = fieldSetFlags()[1] ? this.credibleCoverageIndicator : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.familyIdentifier = fieldSetFlags()[2] ? this.familyIdentifier : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lepChangeReasonName = fieldSetFlags()[3] ? this.lepChangeReasonName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lepReconsiderLetterDate = fieldSetFlags()[4] ? this.lepReconsiderLetterDate : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.lowIncomePremiumSubsidyPct = fieldSetFlags()[5] ? this.lowIncomePremiumSubsidyPct : (java.lang.Integer) defaultValue(fields()[5]);
        record.netLepAmount = fieldSetFlags()[6] ? this.netLepAmount : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (profileDatesBuilder != null) {
          record.profileDates = this.profileDatesBuilder.build();
        } else {
          record.profileDates = fieldSetFlags()[7] ? this.profileDates : (com.uhc.schema.model.eligibility.common.DateRangeType) defaultValue(fields()[7]);
        }
        if (subsidySourceBuilder != null) {
          record.subsidySource = this.subsidySourceBuilder.build();
        } else {
          record.subsidySource = fieldSetFlags()[8] ? this.subsidySource : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[8]);
        }
        if (uncoveredMonthDatesBuilder != null) {
          record.uncoveredMonthDates = this.uncoveredMonthDatesBuilder.build();
        } else {
          record.uncoveredMonthDates = fieldSetFlags()[9] ? this.uncoveredMonthDates : (com.uhc.schema.model.eligibility.common.DateRangeType) defaultValue(fields()[9]);
        }
        record.uncoveredMonths = fieldSetFlags()[10] ? this.uncoveredMonths : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MedicareAndRetirementMembershipProfile>
    WRITER$ = (org.apache.avro.io.DatumWriter<MedicareAndRetirementMembershipProfile>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MedicareAndRetirementMembershipProfile>
    READER$ = (org.apache.avro.io.DatumReader<MedicareAndRetirementMembershipProfile>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
