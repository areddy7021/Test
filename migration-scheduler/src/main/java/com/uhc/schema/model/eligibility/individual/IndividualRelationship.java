/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.individual;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IndividualRelationship extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4906299704542732894L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IndividualRelationship\",\"namespace\":\"com.uhc.schema.model.eligibility.individual\",\"fields\":[{\"name\":\"emailAddress\",\"type\":[\"null\",\"string\"],\"doc\":\"Email address of the related consumer.\",\"default\":null},{\"name\":\"personName\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PersonName\",\"fields\":[{\"name\":\"firstName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastUpdated\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LastUpdated\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"doc\":\"Information about the last update made to a given entity.\",\"fields\":[{\"name\":\"sourceSystemTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"sourceTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",\"string\"],\"doc\":\"The last person or application to update the entity.\",\"default\":null}]}],\"default\":null},{\"name\":\"middleInitial\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"middleName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nameType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"preferredFirstName\",\"type\":[\"null\",\"string\"],\"doc\":\"The preferred first name for an individual.\",\"default\":null},{\"name\":\"prefix\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sourceCode\",\"type\":[\"null\",\"string\"],\"default\":null,\"aliases\":[\"sourceSystemCode\"]},{\"name\":\"suffix\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"postalAddresses\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PostalAddress\",\"fields\":[{\"name\":\"active\",\"type\":\"boolean\",\"default\":false},{\"name\":\"addressType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"beginDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"countrySubCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"county\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"deliveryPoint\",\"type\":[\"null\",\"string\"],\"doc\":\"A 2-digit code which denotes a single mail box or other place at which mail is delivered\",\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"fipsCountyCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies the five-digit Federal Information Processing Standard (FIPS) code which uniquely identifies counties and county equivalents in the United States, certain U.S. possessions, and certain freely associated states.\",\"default\":null},{\"name\":\"isoCountry\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"lastUpdated\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.LastUpdated\"],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"line1Text\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"line2Text\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"line3Text\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketSiteNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"postalAddressIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier for an Individual's postal address.\",\"default\":null},{\"name\":\"postalCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"postalSuffixCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"preferredIndicator\",\"type\":\"boolean\",\"default\":false},{\"name\":\"primaryIndicator\",\"type\":\"boolean\",\"default\":false},{\"name\":\"sourceCode\",\"type\":[\"null\",\"string\"],\"default\":null,\"aliases\":[\"sourceSystemCode\"]},{\"name\":\"sourceSystemAttributes\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PostalAddressSourceSystemAttributes\",\"fields\":[{\"name\":\"cdb\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CdbPostalAddressReferenceData\",\"namespace\":\"com.uhc.schema.model.eligibility.cdb\",\"fields\":[{\"name\":\"addressTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"standardFormattingIndicator\",\"type\":\"boolean\",\"default\":false},{\"name\":\"stateProvinceCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"townName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"undeliverableReason\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"validationIndicator\",\"type\":\"boolean\",\"default\":false}]}}],\"default\":null},{\"name\":\"relatedIndividualIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"This is a unique number used by the enterprise to identify an individual person.\",\"default\":null},{\"name\":\"relationshipEffectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date the Member added the consumer as a relation based on the relationship type.\",\"default\":null},{\"name\":\"relationshipEndDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date the Member removed the consumer as a relation based on the relationship type.\",\"default\":null},{\"name\":\"individualRelationshipType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Identifies the relationship type between the Member and another Consumer.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IndividualRelationship> ENCODER =
      new BinaryMessageEncoder<IndividualRelationship>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IndividualRelationship> DECODER =
      new BinaryMessageDecoder<IndividualRelationship>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<IndividualRelationship> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<IndividualRelationship> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IndividualRelationship>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this IndividualRelationship to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a IndividualRelationship from a ByteBuffer. */
  public static IndividualRelationship fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Email address of the related consumer. */
  @Deprecated public java.lang.CharSequence emailAddress;
  @Deprecated public com.uhc.schema.model.eligibility.individual.PersonName personName;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> postalAddresses;
  /** This is a unique number used by the enterprise to identify an individual person. */
  @Deprecated public java.lang.CharSequence relatedIndividualIdentifier;
  /** Date the Member added the consumer as a relation based on the relationship type. */
  @Deprecated public java.lang.CharSequence relationshipEffectiveDate;
  /** Date the Member removed the consumer as a relation based on the relationship type. */
  @Deprecated public java.lang.CharSequence relationshipEndDate;
  /** Identifies the relationship type between the Member and another Consumer. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType individualRelationshipType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IndividualRelationship() {}

  /**
   * All-args constructor.
   * @param emailAddress Email address of the related consumer.
   * @param personName The new value for personName
   * @param postalAddresses The new value for postalAddresses
   * @param relatedIndividualIdentifier This is a unique number used by the enterprise to identify an individual person.
   * @param relationshipEffectiveDate Date the Member added the consumer as a relation based on the relationship type.
   * @param relationshipEndDate Date the Member removed the consumer as a relation based on the relationship type.
   * @param individualRelationshipType Identifies the relationship type between the Member and another Consumer.
   */
  public IndividualRelationship(java.lang.CharSequence emailAddress, com.uhc.schema.model.eligibility.individual.PersonName personName, java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> postalAddresses, java.lang.CharSequence relatedIndividualIdentifier, java.lang.CharSequence relationshipEffectiveDate, java.lang.CharSequence relationshipEndDate, com.uhc.schema.model.eligibility.common.DescriptionType individualRelationshipType) {
    this.emailAddress = emailAddress;
    this.personName = personName;
    this.postalAddresses = postalAddresses;
    this.relatedIndividualIdentifier = relatedIndividualIdentifier;
    this.relationshipEffectiveDate = relationshipEffectiveDate;
    this.relationshipEndDate = relationshipEndDate;
    this.individualRelationshipType = individualRelationshipType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emailAddress;
    case 1: return personName;
    case 2: return postalAddresses;
    case 3: return relatedIndividualIdentifier;
    case 4: return relationshipEffectiveDate;
    case 5: return relationshipEndDate;
    case 6: return individualRelationshipType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emailAddress = (java.lang.CharSequence)value$; break;
    case 1: personName = (com.uhc.schema.model.eligibility.individual.PersonName)value$; break;
    case 2: postalAddresses = (java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress>)value$; break;
    case 3: relatedIndividualIdentifier = (java.lang.CharSequence)value$; break;
    case 4: relationshipEffectiveDate = (java.lang.CharSequence)value$; break;
    case 5: relationshipEndDate = (java.lang.CharSequence)value$; break;
    case 6: individualRelationshipType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return Email address of the related consumer.
   */
  public java.lang.CharSequence getEmailAddress() {
    return emailAddress;
  }

  /**
   * Sets the value of the 'emailAddress' field.
   * Email address of the related consumer.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.CharSequence value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'personName' field.
   * @return The value of the 'personName' field.
   */
  public com.uhc.schema.model.eligibility.individual.PersonName getPersonName() {
    return personName;
  }

  /**
   * Sets the value of the 'personName' field.
   * @param value the value to set.
   */
  public void setPersonName(com.uhc.schema.model.eligibility.individual.PersonName value) {
    this.personName = value;
  }

  /**
   * Gets the value of the 'postalAddresses' field.
   * @return The value of the 'postalAddresses' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> getPostalAddresses() {
    return postalAddresses;
  }

  /**
   * Sets the value of the 'postalAddresses' field.
   * @param value the value to set.
   */
  public void setPostalAddresses(java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> value) {
    this.postalAddresses = value;
  }

  /**
   * Gets the value of the 'relatedIndividualIdentifier' field.
   * @return This is a unique number used by the enterprise to identify an individual person.
   */
  public java.lang.CharSequence getRelatedIndividualIdentifier() {
    return relatedIndividualIdentifier;
  }

  /**
   * Sets the value of the 'relatedIndividualIdentifier' field.
   * This is a unique number used by the enterprise to identify an individual person.
   * @param value the value to set.
   */
  public void setRelatedIndividualIdentifier(java.lang.CharSequence value) {
    this.relatedIndividualIdentifier = value;
  }

  /**
   * Gets the value of the 'relationshipEffectiveDate' field.
   * @return Date the Member added the consumer as a relation based on the relationship type.
   */
  public java.lang.CharSequence getRelationshipEffectiveDate() {
    return relationshipEffectiveDate;
  }

  /**
   * Sets the value of the 'relationshipEffectiveDate' field.
   * Date the Member added the consumer as a relation based on the relationship type.
   * @param value the value to set.
   */
  public void setRelationshipEffectiveDate(java.lang.CharSequence value) {
    this.relationshipEffectiveDate = value;
  }

  /**
   * Gets the value of the 'relationshipEndDate' field.
   * @return Date the Member removed the consumer as a relation based on the relationship type.
   */
  public java.lang.CharSequence getRelationshipEndDate() {
    return relationshipEndDate;
  }

  /**
   * Sets the value of the 'relationshipEndDate' field.
   * Date the Member removed the consumer as a relation based on the relationship type.
   * @param value the value to set.
   */
  public void setRelationshipEndDate(java.lang.CharSequence value) {
    this.relationshipEndDate = value;
  }

  /**
   * Gets the value of the 'individualRelationshipType' field.
   * @return Identifies the relationship type between the Member and another Consumer.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getIndividualRelationshipType() {
    return individualRelationshipType;
  }

  /**
   * Sets the value of the 'individualRelationshipType' field.
   * Identifies the relationship type between the Member and another Consumer.
   * @param value the value to set.
   */
  public void setIndividualRelationshipType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.individualRelationshipType = value;
  }

  /**
   * Creates a new IndividualRelationship RecordBuilder.
   * @return A new IndividualRelationship RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder();
  }

  /**
   * Creates a new IndividualRelationship RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IndividualRelationship RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder newBuilder(com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder other) {
    return new com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder(other);
  }

  /**
   * Creates a new IndividualRelationship RecordBuilder by copying an existing IndividualRelationship instance.
   * @param other The existing instance to copy.
   * @return A new IndividualRelationship RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder newBuilder(com.uhc.schema.model.eligibility.individual.IndividualRelationship other) {
    return new com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder(other);
  }

  /**
   * RecordBuilder for IndividualRelationship instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IndividualRelationship>
    implements org.apache.avro.data.RecordBuilder<IndividualRelationship> {

    /** Email address of the related consumer. */
    private java.lang.CharSequence emailAddress;
    private com.uhc.schema.model.eligibility.individual.PersonName personName;
    private com.uhc.schema.model.eligibility.individual.PersonName.Builder personNameBuilder;
    private java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> postalAddresses;
    /** This is a unique number used by the enterprise to identify an individual person. */
    private java.lang.CharSequence relatedIndividualIdentifier;
    /** Date the Member added the consumer as a relation based on the relationship type. */
    private java.lang.CharSequence relationshipEffectiveDate;
    /** Date the Member removed the consumer as a relation based on the relationship type. */
    private java.lang.CharSequence relationshipEndDate;
    /** Identifies the relationship type between the Member and another Consumer. */
    private com.uhc.schema.model.eligibility.common.DescriptionType individualRelationshipType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder individualRelationshipTypeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[0].schema(), other.emailAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personName)) {
        this.personName = data().deepCopy(fields()[1].schema(), other.personName);
        fieldSetFlags()[1] = true;
      }
      if (other.hasPersonNameBuilder()) {
        this.personNameBuilder = com.uhc.schema.model.eligibility.individual.PersonName.newBuilder(other.getPersonNameBuilder());
      }
      if (isValidValue(fields()[2], other.postalAddresses)) {
        this.postalAddresses = data().deepCopy(fields()[2].schema(), other.postalAddresses);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedIndividualIdentifier)) {
        this.relatedIndividualIdentifier = data().deepCopy(fields()[3].schema(), other.relatedIndividualIdentifier);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.relationshipEffectiveDate)) {
        this.relationshipEffectiveDate = data().deepCopy(fields()[4].schema(), other.relationshipEffectiveDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.relationshipEndDate)) {
        this.relationshipEndDate = data().deepCopy(fields()[5].schema(), other.relationshipEndDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.individualRelationshipType)) {
        this.individualRelationshipType = data().deepCopy(fields()[6].schema(), other.individualRelationshipType);
        fieldSetFlags()[6] = true;
      }
      if (other.hasIndividualRelationshipTypeBuilder()) {
        this.individualRelationshipTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getIndividualRelationshipTypeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing IndividualRelationship instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.IndividualRelationship other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[0].schema(), other.emailAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personName)) {
        this.personName = data().deepCopy(fields()[1].schema(), other.personName);
        fieldSetFlags()[1] = true;
      }
      this.personNameBuilder = null;
      if (isValidValue(fields()[2], other.postalAddresses)) {
        this.postalAddresses = data().deepCopy(fields()[2].schema(), other.postalAddresses);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relatedIndividualIdentifier)) {
        this.relatedIndividualIdentifier = data().deepCopy(fields()[3].schema(), other.relatedIndividualIdentifier);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.relationshipEffectiveDate)) {
        this.relationshipEffectiveDate = data().deepCopy(fields()[4].schema(), other.relationshipEffectiveDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.relationshipEndDate)) {
        this.relationshipEndDate = data().deepCopy(fields()[5].schema(), other.relationshipEndDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.individualRelationshipType)) {
        this.individualRelationshipType = data().deepCopy(fields()[6].schema(), other.individualRelationshipType);
        fieldSetFlags()[6] = true;
      }
      this.individualRelationshipTypeBuilder = null;
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * Email address of the related consumer.
      * @return The value.
      */
    public java.lang.CharSequence getEmailAddress() {
      return emailAddress;
    }

    /**
      * Sets the value of the 'emailAddress' field.
      * Email address of the related consumer.
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setEmailAddress(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.emailAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * Email address of the related consumer.
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * Email address of the related consumer.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personName' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.individual.PersonName getPersonName() {
      return personName;
    }

    /**
      * Sets the value of the 'personName' field.
      * @param value The value of 'personName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setPersonName(com.uhc.schema.model.eligibility.individual.PersonName value) {
      validate(fields()[1], value);
      this.personNameBuilder = null;
      this.personName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personName' field has been set.
      * @return True if the 'personName' field has been set, false otherwise.
      */
    public boolean hasPersonName() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'personName' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.PersonName.Builder getPersonNameBuilder() {
      if (personNameBuilder == null) {
        if (hasPersonName()) {
          setPersonNameBuilder(com.uhc.schema.model.eligibility.individual.PersonName.newBuilder(personName));
        } else {
          setPersonNameBuilder(com.uhc.schema.model.eligibility.individual.PersonName.newBuilder());
        }
      }
      return personNameBuilder;
    }

    /**
     * Sets the Builder instance for the 'personName' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setPersonNameBuilder(com.uhc.schema.model.eligibility.individual.PersonName.Builder value) {
      clearPersonName();
      personNameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personName' field has an active Builder instance
     * @return True if the 'personName' field has an active Builder instance
     */
    public boolean hasPersonNameBuilder() {
      return personNameBuilder != null;
    }

    /**
      * Clears the value of the 'personName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearPersonName() {
      personName = null;
      personNameBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalAddresses' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> getPostalAddresses() {
      return postalAddresses;
    }

    /**
      * Sets the value of the 'postalAddresses' field.
      * @param value The value of 'postalAddresses'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setPostalAddresses(java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress> value) {
      validate(fields()[2], value);
      this.postalAddresses = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'postalAddresses' field has been set.
      * @return True if the 'postalAddresses' field has been set, false otherwise.
      */
    public boolean hasPostalAddresses() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'postalAddresses' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearPostalAddresses() {
      postalAddresses = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'relatedIndividualIdentifier' field.
      * This is a unique number used by the enterprise to identify an individual person.
      * @return The value.
      */
    public java.lang.CharSequence getRelatedIndividualIdentifier() {
      return relatedIndividualIdentifier;
    }

    /**
      * Sets the value of the 'relatedIndividualIdentifier' field.
      * This is a unique number used by the enterprise to identify an individual person.
      * @param value The value of 'relatedIndividualIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setRelatedIndividualIdentifier(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.relatedIndividualIdentifier = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'relatedIndividualIdentifier' field has been set.
      * This is a unique number used by the enterprise to identify an individual person.
      * @return True if the 'relatedIndividualIdentifier' field has been set, false otherwise.
      */
    public boolean hasRelatedIndividualIdentifier() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'relatedIndividualIdentifier' field.
      * This is a unique number used by the enterprise to identify an individual person.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearRelatedIndividualIdentifier() {
      relatedIndividualIdentifier = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationshipEffectiveDate' field.
      * Date the Member added the consumer as a relation based on the relationship type.
      * @return The value.
      */
    public java.lang.CharSequence getRelationshipEffectiveDate() {
      return relationshipEffectiveDate;
    }

    /**
      * Sets the value of the 'relationshipEffectiveDate' field.
      * Date the Member added the consumer as a relation based on the relationship type.
      * @param value The value of 'relationshipEffectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setRelationshipEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.relationshipEffectiveDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'relationshipEffectiveDate' field has been set.
      * Date the Member added the consumer as a relation based on the relationship type.
      * @return True if the 'relationshipEffectiveDate' field has been set, false otherwise.
      */
    public boolean hasRelationshipEffectiveDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'relationshipEffectiveDate' field.
      * Date the Member added the consumer as a relation based on the relationship type.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearRelationshipEffectiveDate() {
      relationshipEffectiveDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationshipEndDate' field.
      * Date the Member removed the consumer as a relation based on the relationship type.
      * @return The value.
      */
    public java.lang.CharSequence getRelationshipEndDate() {
      return relationshipEndDate;
    }

    /**
      * Sets the value of the 'relationshipEndDate' field.
      * Date the Member removed the consumer as a relation based on the relationship type.
      * @param value The value of 'relationshipEndDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setRelationshipEndDate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.relationshipEndDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'relationshipEndDate' field has been set.
      * Date the Member removed the consumer as a relation based on the relationship type.
      * @return True if the 'relationshipEndDate' field has been set, false otherwise.
      */
    public boolean hasRelationshipEndDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'relationshipEndDate' field.
      * Date the Member removed the consumer as a relation based on the relationship type.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearRelationshipEndDate() {
      relationshipEndDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'individualRelationshipType' field.
      * Identifies the relationship type between the Member and another Consumer.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getIndividualRelationshipType() {
      return individualRelationshipType;
    }

    /**
      * Sets the value of the 'individualRelationshipType' field.
      * Identifies the relationship type between the Member and another Consumer.
      * @param value The value of 'individualRelationshipType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setIndividualRelationshipType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[6], value);
      this.individualRelationshipTypeBuilder = null;
      this.individualRelationshipType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'individualRelationshipType' field has been set.
      * Identifies the relationship type between the Member and another Consumer.
      * @return True if the 'individualRelationshipType' field has been set, false otherwise.
      */
    public boolean hasIndividualRelationshipType() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'individualRelationshipType' field and creates one if it doesn't exist yet.
     * Identifies the relationship type between the Member and another Consumer.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getIndividualRelationshipTypeBuilder() {
      if (individualRelationshipTypeBuilder == null) {
        if (hasIndividualRelationshipType()) {
          setIndividualRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(individualRelationshipType));
        } else {
          setIndividualRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return individualRelationshipTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'individualRelationshipType' field
     * Identifies the relationship type between the Member and another Consumer.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder setIndividualRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearIndividualRelationshipType();
      individualRelationshipTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'individualRelationshipType' field has an active Builder instance
     * Identifies the relationship type between the Member and another Consumer.
     * @return True if the 'individualRelationshipType' field has an active Builder instance
     */
    public boolean hasIndividualRelationshipTypeBuilder() {
      return individualRelationshipTypeBuilder != null;
    }

    /**
      * Clears the value of the 'individualRelationshipType' field.
      * Identifies the relationship type between the Member and another Consumer.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.IndividualRelationship.Builder clearIndividualRelationshipType() {
      individualRelationshipType = null;
      individualRelationshipTypeBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IndividualRelationship build() {
      try {
        IndividualRelationship record = new IndividualRelationship();
        record.emailAddress = fieldSetFlags()[0] ? this.emailAddress : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (personNameBuilder != null) {
          record.personName = this.personNameBuilder.build();
        } else {
          record.personName = fieldSetFlags()[1] ? this.personName : (com.uhc.schema.model.eligibility.individual.PersonName) defaultValue(fields()[1]);
        }
        record.postalAddresses = fieldSetFlags()[2] ? this.postalAddresses : (java.util.List<com.uhc.schema.model.eligibility.individual.PostalAddress>) defaultValue(fields()[2]);
        record.relatedIndividualIdentifier = fieldSetFlags()[3] ? this.relatedIndividualIdentifier : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.relationshipEffectiveDate = fieldSetFlags()[4] ? this.relationshipEffectiveDate : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.relationshipEndDate = fieldSetFlags()[5] ? this.relationshipEndDate : (java.lang.CharSequence) defaultValue(fields()[5]);
        if (individualRelationshipTypeBuilder != null) {
          record.individualRelationshipType = this.individualRelationshipTypeBuilder.build();
        } else {
          record.individualRelationshipType = fieldSetFlags()[6] ? this.individualRelationshipType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[6]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IndividualRelationship>
    WRITER$ = (org.apache.avro.io.DatumWriter<IndividualRelationship>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IndividualRelationship>
    READER$ = (org.apache.avro.io.DatumReader<IndividualRelationship>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
