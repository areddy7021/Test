/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MembershipGroupData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7391879122593355796L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MembershipGroupData\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"effectiveDates\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DateRangeType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}],\"default\":null},{\"name\":\"groupName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"groupNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"masterGroup\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"membershipGroupType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Identifies the group type for the membership group data.\",\"default\":null},{\"name\":\"sourceSystem\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MembershipGroupData> ENCODER =
      new BinaryMessageEncoder<MembershipGroupData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MembershipGroupData> DECODER =
      new BinaryMessageDecoder<MembershipGroupData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MembershipGroupData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MembershipGroupData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MembershipGroupData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MembershipGroupData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MembershipGroupData from a ByteBuffer. */
  public static MembershipGroupData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.uhc.schema.model.eligibility.common.DateRangeType effectiveDates;
  @Deprecated public java.lang.CharSequence groupName;
  @Deprecated public java.lang.CharSequence groupNumber;
  @Deprecated public java.lang.CharSequence masterGroup;
  /** Identifies the group type for the membership group data. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType membershipGroupType;
  @Deprecated public java.lang.CharSequence sourceSystem;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MembershipGroupData() {}

  /**
   * All-args constructor.
   * @param effectiveDates The new value for effectiveDates
   * @param groupName The new value for groupName
   * @param groupNumber The new value for groupNumber
   * @param masterGroup The new value for masterGroup
   * @param membershipGroupType Identifies the group type for the membership group data.
   * @param sourceSystem The new value for sourceSystem
   */
  public MembershipGroupData(com.uhc.schema.model.eligibility.common.DateRangeType effectiveDates, java.lang.CharSequence groupName, java.lang.CharSequence groupNumber, java.lang.CharSequence masterGroup, com.uhc.schema.model.eligibility.common.DescriptionType membershipGroupType, java.lang.CharSequence sourceSystem) {
    this.effectiveDates = effectiveDates;
    this.groupName = groupName;
    this.groupNumber = groupNumber;
    this.masterGroup = masterGroup;
    this.membershipGroupType = membershipGroupType;
    this.sourceSystem = sourceSystem;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return effectiveDates;
    case 1: return groupName;
    case 2: return groupNumber;
    case 3: return masterGroup;
    case 4: return membershipGroupType;
    case 5: return sourceSystem;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: effectiveDates = (com.uhc.schema.model.eligibility.common.DateRangeType)value$; break;
    case 1: groupName = (java.lang.CharSequence)value$; break;
    case 2: groupNumber = (java.lang.CharSequence)value$; break;
    case 3: masterGroup = (java.lang.CharSequence)value$; break;
    case 4: membershipGroupType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 5: sourceSystem = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'effectiveDates' field.
   * @return The value of the 'effectiveDates' field.
   */
  public com.uhc.schema.model.eligibility.common.DateRangeType getEffectiveDates() {
    return effectiveDates;
  }

  /**
   * Sets the value of the 'effectiveDates' field.
   * @param value the value to set.
   */
  public void setEffectiveDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
    this.effectiveDates = value;
  }

  /**
   * Gets the value of the 'groupName' field.
   * @return The value of the 'groupName' field.
   */
  public java.lang.CharSequence getGroupName() {
    return groupName;
  }

  /**
   * Sets the value of the 'groupName' field.
   * @param value the value to set.
   */
  public void setGroupName(java.lang.CharSequence value) {
    this.groupName = value;
  }

  /**
   * Gets the value of the 'groupNumber' field.
   * @return The value of the 'groupNumber' field.
   */
  public java.lang.CharSequence getGroupNumber() {
    return groupNumber;
  }

  /**
   * Sets the value of the 'groupNumber' field.
   * @param value the value to set.
   */
  public void setGroupNumber(java.lang.CharSequence value) {
    this.groupNumber = value;
  }

  /**
   * Gets the value of the 'masterGroup' field.
   * @return The value of the 'masterGroup' field.
   */
  public java.lang.CharSequence getMasterGroup() {
    return masterGroup;
  }

  /**
   * Sets the value of the 'masterGroup' field.
   * @param value the value to set.
   */
  public void setMasterGroup(java.lang.CharSequence value) {
    this.masterGroup = value;
  }

  /**
   * Gets the value of the 'membershipGroupType' field.
   * @return Identifies the group type for the membership group data.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getMembershipGroupType() {
    return membershipGroupType;
  }

  /**
   * Sets the value of the 'membershipGroupType' field.
   * Identifies the group type for the membership group data.
   * @param value the value to set.
   */
  public void setMembershipGroupType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.membershipGroupType = value;
  }

  /**
   * Gets the value of the 'sourceSystem' field.
   * @return The value of the 'sourceSystem' field.
   */
  public java.lang.CharSequence getSourceSystem() {
    return sourceSystem;
  }

  /**
   * Sets the value of the 'sourceSystem' field.
   * @param value the value to set.
   */
  public void setSourceSystem(java.lang.CharSequence value) {
    this.sourceSystem = value;
  }

  /**
   * Creates a new MembershipGroupData RecordBuilder.
   * @return A new MembershipGroupData RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder();
  }

  /**
   * Creates a new MembershipGroupData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MembershipGroupData RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder newBuilder(com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder(other);
  }

  /**
   * Creates a new MembershipGroupData RecordBuilder by copying an existing MembershipGroupData instance.
   * @param other The existing instance to copy.
   * @return A new MembershipGroupData RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder newBuilder(com.uhc.schema.model.eligibility.membership.MembershipGroupData other) {
    return new com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder(other);
  }

  /**
   * RecordBuilder for MembershipGroupData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MembershipGroupData>
    implements org.apache.avro.data.RecordBuilder<MembershipGroupData> {

    private com.uhc.schema.model.eligibility.common.DateRangeType effectiveDates;
    private com.uhc.schema.model.eligibility.common.DateRangeType.Builder effectiveDatesBuilder;
    private java.lang.CharSequence groupName;
    private java.lang.CharSequence groupNumber;
    private java.lang.CharSequence masterGroup;
    /** Identifies the group type for the membership group data. */
    private com.uhc.schema.model.eligibility.common.DescriptionType membershipGroupType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder membershipGroupTypeBuilder;
    private java.lang.CharSequence sourceSystem;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.effectiveDates)) {
        this.effectiveDates = data().deepCopy(fields()[0].schema(), other.effectiveDates);
        fieldSetFlags()[0] = true;
      }
      if (other.hasEffectiveDatesBuilder()) {
        this.effectiveDatesBuilder = com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(other.getEffectiveDatesBuilder());
      }
      if (isValidValue(fields()[1], other.groupName)) {
        this.groupName = data().deepCopy(fields()[1].schema(), other.groupName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.groupNumber)) {
        this.groupNumber = data().deepCopy(fields()[2].schema(), other.groupNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.masterGroup)) {
        this.masterGroup = data().deepCopy(fields()[3].schema(), other.masterGroup);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.membershipGroupType)) {
        this.membershipGroupType = data().deepCopy(fields()[4].schema(), other.membershipGroupType);
        fieldSetFlags()[4] = true;
      }
      if (other.hasMembershipGroupTypeBuilder()) {
        this.membershipGroupTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getMembershipGroupTypeBuilder());
      }
      if (isValidValue(fields()[5], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[5].schema(), other.sourceSystem);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MembershipGroupData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.MembershipGroupData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.effectiveDates)) {
        this.effectiveDates = data().deepCopy(fields()[0].schema(), other.effectiveDates);
        fieldSetFlags()[0] = true;
      }
      this.effectiveDatesBuilder = null;
      if (isValidValue(fields()[1], other.groupName)) {
        this.groupName = data().deepCopy(fields()[1].schema(), other.groupName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.groupNumber)) {
        this.groupNumber = data().deepCopy(fields()[2].schema(), other.groupNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.masterGroup)) {
        this.masterGroup = data().deepCopy(fields()[3].schema(), other.masterGroup);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.membershipGroupType)) {
        this.membershipGroupType = data().deepCopy(fields()[4].schema(), other.membershipGroupType);
        fieldSetFlags()[4] = true;
      }
      this.membershipGroupTypeBuilder = null;
      if (isValidValue(fields()[5], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[5].schema(), other.sourceSystem);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'effectiveDates' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DateRangeType getEffectiveDates() {
      return effectiveDates;
    }

    /**
      * Sets the value of the 'effectiveDates' field.
      * @param value The value of 'effectiveDates'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setEffectiveDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
      validate(fields()[0], value);
      this.effectiveDatesBuilder = null;
      this.effectiveDates = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDates' field has been set.
      * @return True if the 'effectiveDates' field has been set, false otherwise.
      */
    public boolean hasEffectiveDates() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'effectiveDates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DateRangeType.Builder getEffectiveDatesBuilder() {
      if (effectiveDatesBuilder == null) {
        if (hasEffectiveDates()) {
          setEffectiveDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(effectiveDates));
        } else {
          setEffectiveDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder());
        }
      }
      return effectiveDatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'effectiveDates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setEffectiveDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.Builder value) {
      clearEffectiveDates();
      effectiveDatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'effectiveDates' field has an active Builder instance
     * @return True if the 'effectiveDates' field has an active Builder instance
     */
    public boolean hasEffectiveDatesBuilder() {
      return effectiveDatesBuilder != null;
    }

    /**
      * Clears the value of the 'effectiveDates' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder clearEffectiveDates() {
      effectiveDates = null;
      effectiveDatesBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupName' field.
      * @return The value.
      */
    public java.lang.CharSequence getGroupName() {
      return groupName;
    }

    /**
      * Sets the value of the 'groupName' field.
      * @param value The value of 'groupName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setGroupName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.groupName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'groupName' field has been set.
      * @return True if the 'groupName' field has been set, false otherwise.
      */
    public boolean hasGroupName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'groupName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder clearGroupName() {
      groupName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getGroupNumber() {
      return groupNumber;
    }

    /**
      * Sets the value of the 'groupNumber' field.
      * @param value The value of 'groupNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setGroupNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.groupNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'groupNumber' field has been set.
      * @return True if the 'groupNumber' field has been set, false otherwise.
      */
    public boolean hasGroupNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'groupNumber' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder clearGroupNumber() {
      groupNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'masterGroup' field.
      * @return The value.
      */
    public java.lang.CharSequence getMasterGroup() {
      return masterGroup;
    }

    /**
      * Sets the value of the 'masterGroup' field.
      * @param value The value of 'masterGroup'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setMasterGroup(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.masterGroup = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'masterGroup' field has been set.
      * @return True if the 'masterGroup' field has been set, false otherwise.
      */
    public boolean hasMasterGroup() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'masterGroup' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder clearMasterGroup() {
      masterGroup = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'membershipGroupType' field.
      * Identifies the group type for the membership group data.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getMembershipGroupType() {
      return membershipGroupType;
    }

    /**
      * Sets the value of the 'membershipGroupType' field.
      * Identifies the group type for the membership group data.
      * @param value The value of 'membershipGroupType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setMembershipGroupType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[4], value);
      this.membershipGroupTypeBuilder = null;
      this.membershipGroupType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'membershipGroupType' field has been set.
      * Identifies the group type for the membership group data.
      * @return True if the 'membershipGroupType' field has been set, false otherwise.
      */
    public boolean hasMembershipGroupType() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'membershipGroupType' field and creates one if it doesn't exist yet.
     * Identifies the group type for the membership group data.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getMembershipGroupTypeBuilder() {
      if (membershipGroupTypeBuilder == null) {
        if (hasMembershipGroupType()) {
          setMembershipGroupTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(membershipGroupType));
        } else {
          setMembershipGroupTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return membershipGroupTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'membershipGroupType' field
     * Identifies the group type for the membership group data.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setMembershipGroupTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearMembershipGroupType();
      membershipGroupTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'membershipGroupType' field has an active Builder instance
     * Identifies the group type for the membership group data.
     * @return True if the 'membershipGroupType' field has an active Builder instance
     */
    public boolean hasMembershipGroupTypeBuilder() {
      return membershipGroupTypeBuilder != null;
    }

    /**
      * Clears the value of the 'membershipGroupType' field.
      * Identifies the group type for the membership group data.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder clearMembershipGroupType() {
      membershipGroupType = null;
      membershipGroupTypeBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystem' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceSystem() {
      return sourceSystem;
    }

    /**
      * Sets the value of the 'sourceSystem' field.
      * @param value The value of 'sourceSystem'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder setSourceSystem(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.sourceSystem = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystem' field has been set.
      * @return True if the 'sourceSystem' field has been set, false otherwise.
      */
    public boolean hasSourceSystem() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sourceSystem' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.MembershipGroupData.Builder clearSourceSystem() {
      sourceSystem = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MembershipGroupData build() {
      try {
        MembershipGroupData record = new MembershipGroupData();
        if (effectiveDatesBuilder != null) {
          record.effectiveDates = this.effectiveDatesBuilder.build();
        } else {
          record.effectiveDates = fieldSetFlags()[0] ? this.effectiveDates : (com.uhc.schema.model.eligibility.common.DateRangeType) defaultValue(fields()[0]);
        }
        record.groupName = fieldSetFlags()[1] ? this.groupName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.groupNumber = fieldSetFlags()[2] ? this.groupNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.masterGroup = fieldSetFlags()[3] ? this.masterGroup : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (membershipGroupTypeBuilder != null) {
          record.membershipGroupType = this.membershipGroupTypeBuilder.build();
        } else {
          record.membershipGroupType = fieldSetFlags()[4] ? this.membershipGroupType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[4]);
        }
        record.sourceSystem = fieldSetFlags()[5] ? this.sourceSystem : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MembershipGroupData>
    WRITER$ = (org.apache.avro.io.DatumWriter<MembershipGroupData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MembershipGroupData>
    READER$ = (org.apache.avro.io.DatumReader<MembershipGroupData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
