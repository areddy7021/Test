/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.individual;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EligibilityAttributes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8980767738631151285L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EligibilityAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.individual\",\"fields\":[{\"name\":\"enrolleeMemberFacingIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"memberSequenceNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"relationshipType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"subscriberMemberFacingIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EligibilityAttributes> ENCODER =
      new BinaryMessageEncoder<EligibilityAttributes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EligibilityAttributes> DECODER =
      new BinaryMessageDecoder<EligibilityAttributes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EligibilityAttributes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EligibilityAttributes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EligibilityAttributes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EligibilityAttributes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EligibilityAttributes from a ByteBuffer. */
  public static EligibilityAttributes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence enrolleeMemberFacingIdentifier;
  @Deprecated public java.lang.CharSequence memberSequenceNumber;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType relationshipType;
  @Deprecated public java.lang.CharSequence subscriberMemberFacingIdentifier;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EligibilityAttributes() {}

  /**
   * All-args constructor.
   * @param enrolleeMemberFacingIdentifier The new value for enrolleeMemberFacingIdentifier
   * @param memberSequenceNumber The new value for memberSequenceNumber
   * @param relationshipType The new value for relationshipType
   * @param subscriberMemberFacingIdentifier The new value for subscriberMemberFacingIdentifier
   */
  public EligibilityAttributes(java.lang.CharSequence enrolleeMemberFacingIdentifier, java.lang.CharSequence memberSequenceNumber, com.uhc.schema.model.eligibility.common.DescriptionType relationshipType, java.lang.CharSequence subscriberMemberFacingIdentifier) {
    this.enrolleeMemberFacingIdentifier = enrolleeMemberFacingIdentifier;
    this.memberSequenceNumber = memberSequenceNumber;
    this.relationshipType = relationshipType;
    this.subscriberMemberFacingIdentifier = subscriberMemberFacingIdentifier;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return enrolleeMemberFacingIdentifier;
    case 1: return memberSequenceNumber;
    case 2: return relationshipType;
    case 3: return subscriberMemberFacingIdentifier;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: enrolleeMemberFacingIdentifier = (java.lang.CharSequence)value$; break;
    case 1: memberSequenceNumber = (java.lang.CharSequence)value$; break;
    case 2: relationshipType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 3: subscriberMemberFacingIdentifier = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'enrolleeMemberFacingIdentifier' field.
   * @return The value of the 'enrolleeMemberFacingIdentifier' field.
   */
  public java.lang.CharSequence getEnrolleeMemberFacingIdentifier() {
    return enrolleeMemberFacingIdentifier;
  }

  /**
   * Sets the value of the 'enrolleeMemberFacingIdentifier' field.
   * @param value the value to set.
   */
  public void setEnrolleeMemberFacingIdentifier(java.lang.CharSequence value) {
    this.enrolleeMemberFacingIdentifier = value;
  }

  /**
   * Gets the value of the 'memberSequenceNumber' field.
   * @return The value of the 'memberSequenceNumber' field.
   */
  public java.lang.CharSequence getMemberSequenceNumber() {
    return memberSequenceNumber;
  }

  /**
   * Sets the value of the 'memberSequenceNumber' field.
   * @param value the value to set.
   */
  public void setMemberSequenceNumber(java.lang.CharSequence value) {
    this.memberSequenceNumber = value;
  }

  /**
   * Gets the value of the 'relationshipType' field.
   * @return The value of the 'relationshipType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getRelationshipType() {
    return relationshipType;
  }

  /**
   * Sets the value of the 'relationshipType' field.
   * @param value the value to set.
   */
  public void setRelationshipType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.relationshipType = value;
  }

  /**
   * Gets the value of the 'subscriberMemberFacingIdentifier' field.
   * @return The value of the 'subscriberMemberFacingIdentifier' field.
   */
  public java.lang.CharSequence getSubscriberMemberFacingIdentifier() {
    return subscriberMemberFacingIdentifier;
  }

  /**
   * Sets the value of the 'subscriberMemberFacingIdentifier' field.
   * @param value the value to set.
   */
  public void setSubscriberMemberFacingIdentifier(java.lang.CharSequence value) {
    this.subscriberMemberFacingIdentifier = value;
  }

  /**
   * Creates a new EligibilityAttributes RecordBuilder.
   * @return A new EligibilityAttributes RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder();
  }

  /**
   * Creates a new EligibilityAttributes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EligibilityAttributes RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder newBuilder(com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder other) {
    return new com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder(other);
  }

  /**
   * Creates a new EligibilityAttributes RecordBuilder by copying an existing EligibilityAttributes instance.
   * @param other The existing instance to copy.
   * @return A new EligibilityAttributes RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder newBuilder(com.uhc.schema.model.eligibility.individual.EligibilityAttributes other) {
    return new com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder(other);
  }

  /**
   * RecordBuilder for EligibilityAttributes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EligibilityAttributes>
    implements org.apache.avro.data.RecordBuilder<EligibilityAttributes> {

    private java.lang.CharSequence enrolleeMemberFacingIdentifier;
    private java.lang.CharSequence memberSequenceNumber;
    private com.uhc.schema.model.eligibility.common.DescriptionType relationshipType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder relationshipTypeBuilder;
    private java.lang.CharSequence subscriberMemberFacingIdentifier;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.enrolleeMemberFacingIdentifier)) {
        this.enrolleeMemberFacingIdentifier = data().deepCopy(fields()[0].schema(), other.enrolleeMemberFacingIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memberSequenceNumber)) {
        this.memberSequenceNumber = data().deepCopy(fields()[1].schema(), other.memberSequenceNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relationshipType)) {
        this.relationshipType = data().deepCopy(fields()[2].schema(), other.relationshipType);
        fieldSetFlags()[2] = true;
      }
      if (other.hasRelationshipTypeBuilder()) {
        this.relationshipTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getRelationshipTypeBuilder());
      }
      if (isValidValue(fields()[3], other.subscriberMemberFacingIdentifier)) {
        this.subscriberMemberFacingIdentifier = data().deepCopy(fields()[3].schema(), other.subscriberMemberFacingIdentifier);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EligibilityAttributes instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.EligibilityAttributes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.enrolleeMemberFacingIdentifier)) {
        this.enrolleeMemberFacingIdentifier = data().deepCopy(fields()[0].schema(), other.enrolleeMemberFacingIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memberSequenceNumber)) {
        this.memberSequenceNumber = data().deepCopy(fields()[1].schema(), other.memberSequenceNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relationshipType)) {
        this.relationshipType = data().deepCopy(fields()[2].schema(), other.relationshipType);
        fieldSetFlags()[2] = true;
      }
      this.relationshipTypeBuilder = null;
      if (isValidValue(fields()[3], other.subscriberMemberFacingIdentifier)) {
        this.subscriberMemberFacingIdentifier = data().deepCopy(fields()[3].schema(), other.subscriberMemberFacingIdentifier);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'enrolleeMemberFacingIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnrolleeMemberFacingIdentifier() {
      return enrolleeMemberFacingIdentifier;
    }

    /**
      * Sets the value of the 'enrolleeMemberFacingIdentifier' field.
      * @param value The value of 'enrolleeMemberFacingIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder setEnrolleeMemberFacingIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.enrolleeMemberFacingIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'enrolleeMemberFacingIdentifier' field has been set.
      * @return True if the 'enrolleeMemberFacingIdentifier' field has been set, false otherwise.
      */
    public boolean hasEnrolleeMemberFacingIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'enrolleeMemberFacingIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder clearEnrolleeMemberFacingIdentifier() {
      enrolleeMemberFacingIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberSequenceNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getMemberSequenceNumber() {
      return memberSequenceNumber;
    }

    /**
      * Sets the value of the 'memberSequenceNumber' field.
      * @param value The value of 'memberSequenceNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder setMemberSequenceNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.memberSequenceNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'memberSequenceNumber' field has been set.
      * @return True if the 'memberSequenceNumber' field has been set, false otherwise.
      */
    public boolean hasMemberSequenceNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'memberSequenceNumber' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder clearMemberSequenceNumber() {
      memberSequenceNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationshipType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getRelationshipType() {
      return relationshipType;
    }

    /**
      * Sets the value of the 'relationshipType' field.
      * @param value The value of 'relationshipType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder setRelationshipType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[2], value);
      this.relationshipTypeBuilder = null;
      this.relationshipType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'relationshipType' field has been set.
      * @return True if the 'relationshipType' field has been set, false otherwise.
      */
    public boolean hasRelationshipType() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'relationshipType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getRelationshipTypeBuilder() {
      if (relationshipTypeBuilder == null) {
        if (hasRelationshipType()) {
          setRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(relationshipType));
        } else {
          setRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return relationshipTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'relationshipType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder setRelationshipTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearRelationshipType();
      relationshipTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'relationshipType' field has an active Builder instance
     * @return True if the 'relationshipType' field has an active Builder instance
     */
    public boolean hasRelationshipTypeBuilder() {
      return relationshipTypeBuilder != null;
    }

    /**
      * Clears the value of the 'relationshipType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder clearRelationshipType() {
      relationshipType = null;
      relationshipTypeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriberMemberFacingIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubscriberMemberFacingIdentifier() {
      return subscriberMemberFacingIdentifier;
    }

    /**
      * Sets the value of the 'subscriberMemberFacingIdentifier' field.
      * @param value The value of 'subscriberMemberFacingIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder setSubscriberMemberFacingIdentifier(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.subscriberMemberFacingIdentifier = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriberMemberFacingIdentifier' field has been set.
      * @return True if the 'subscriberMemberFacingIdentifier' field has been set, false otherwise.
      */
    public boolean hasSubscriberMemberFacingIdentifier() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'subscriberMemberFacingIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.EligibilityAttributes.Builder clearSubscriberMemberFacingIdentifier() {
      subscriberMemberFacingIdentifier = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EligibilityAttributes build() {
      try {
        EligibilityAttributes record = new EligibilityAttributes();
        record.enrolleeMemberFacingIdentifier = fieldSetFlags()[0] ? this.enrolleeMemberFacingIdentifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.memberSequenceNumber = fieldSetFlags()[1] ? this.memberSequenceNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (relationshipTypeBuilder != null) {
          record.relationshipType = this.relationshipTypeBuilder.build();
        } else {
          record.relationshipType = fieldSetFlags()[2] ? this.relationshipType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[2]);
        }
        record.subscriberMemberFacingIdentifier = fieldSetFlags()[3] ? this.subscriberMemberFacingIdentifier : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EligibilityAttributes>
    WRITER$ = (org.apache.avro.io.DatumWriter<EligibilityAttributes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EligibilityAttributes>
    READER$ = (org.apache.avro.io.DatumReader<EligibilityAttributes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
