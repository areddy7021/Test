/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.medicareandretirement;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MedicareAndRetirementPassportProfile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4229549025459060780L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MedicareAndRetirementPassportProfile\",\"namespace\":\"com.uhc.schema.model.eligibility.medicareandretirement\",\"fields\":[{\"name\":\"passportDates\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DateRangeType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MedicareAndRetirementPassportProfile> ENCODER =
      new BinaryMessageEncoder<MedicareAndRetirementPassportProfile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MedicareAndRetirementPassportProfile> DECODER =
      new BinaryMessageDecoder<MedicareAndRetirementPassportProfile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MedicareAndRetirementPassportProfile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MedicareAndRetirementPassportProfile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MedicareAndRetirementPassportProfile>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MedicareAndRetirementPassportProfile to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MedicareAndRetirementPassportProfile from a ByteBuffer. */
  public static MedicareAndRetirementPassportProfile fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.uhc.schema.model.eligibility.common.DateRangeType passportDates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MedicareAndRetirementPassportProfile() {}

  /**
   * All-args constructor.
   * @param passportDates The new value for passportDates
   */
  public MedicareAndRetirementPassportProfile(com.uhc.schema.model.eligibility.common.DateRangeType passportDates) {
    this.passportDates = passportDates;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return passportDates;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: passportDates = (com.uhc.schema.model.eligibility.common.DateRangeType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'passportDates' field.
   * @return The value of the 'passportDates' field.
   */
  public com.uhc.schema.model.eligibility.common.DateRangeType getPassportDates() {
    return passportDates;
  }

  /**
   * Sets the value of the 'passportDates' field.
   * @param value the value to set.
   */
  public void setPassportDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
    this.passportDates = value;
  }

  /**
   * Creates a new MedicareAndRetirementPassportProfile RecordBuilder.
   * @return A new MedicareAndRetirementPassportProfile RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder();
  }

  /**
   * Creates a new MedicareAndRetirementPassportProfile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MedicareAndRetirementPassportProfile RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder newBuilder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder other) {
    return new com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder(other);
  }

  /**
   * Creates a new MedicareAndRetirementPassportProfile RecordBuilder by copying an existing MedicareAndRetirementPassportProfile instance.
   * @param other The existing instance to copy.
   * @return A new MedicareAndRetirementPassportProfile RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder newBuilder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile other) {
    return new com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder(other);
  }

  /**
   * RecordBuilder for MedicareAndRetirementPassportProfile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MedicareAndRetirementPassportProfile>
    implements org.apache.avro.data.RecordBuilder<MedicareAndRetirementPassportProfile> {

    private com.uhc.schema.model.eligibility.common.DateRangeType passportDates;
    private com.uhc.schema.model.eligibility.common.DateRangeType.Builder passportDatesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.passportDates)) {
        this.passportDates = data().deepCopy(fields()[0].schema(), other.passportDates);
        fieldSetFlags()[0] = true;
      }
      if (other.hasPassportDatesBuilder()) {
        this.passportDatesBuilder = com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(other.getPassportDatesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MedicareAndRetirementPassportProfile instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.passportDates)) {
        this.passportDates = data().deepCopy(fields()[0].schema(), other.passportDates);
        fieldSetFlags()[0] = true;
      }
      this.passportDatesBuilder = null;
    }

    /**
      * Gets the value of the 'passportDates' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DateRangeType getPassportDates() {
      return passportDates;
    }

    /**
      * Sets the value of the 'passportDates' field.
      * @param value The value of 'passportDates'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder setPassportDates(com.uhc.schema.model.eligibility.common.DateRangeType value) {
      validate(fields()[0], value);
      this.passportDatesBuilder = null;
      this.passportDates = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'passportDates' field has been set.
      * @return True if the 'passportDates' field has been set, false otherwise.
      */
    public boolean hasPassportDates() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'passportDates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DateRangeType.Builder getPassportDatesBuilder() {
      if (passportDatesBuilder == null) {
        if (hasPassportDates()) {
          setPassportDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder(passportDates));
        } else {
          setPassportDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.newBuilder());
        }
      }
      return passportDatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'passportDates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder setPassportDatesBuilder(com.uhc.schema.model.eligibility.common.DateRangeType.Builder value) {
      clearPassportDates();
      passportDatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'passportDates' field has an active Builder instance
     * @return True if the 'passportDates' field has an active Builder instance
     */
    public boolean hasPassportDatesBuilder() {
      return passportDatesBuilder != null;
    }

    /**
      * Clears the value of the 'passportDates' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.medicareandretirement.MedicareAndRetirementPassportProfile.Builder clearPassportDates() {
      passportDates = null;
      passportDatesBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MedicareAndRetirementPassportProfile build() {
      try {
        MedicareAndRetirementPassportProfile record = new MedicareAndRetirementPassportProfile();
        if (passportDatesBuilder != null) {
          record.passportDates = this.passportDatesBuilder.build();
        } else {
          record.passportDates = fieldSetFlags()[0] ? this.passportDates : (com.uhc.schema.model.eligibility.common.DateRangeType) defaultValue(fields()[0]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MedicareAndRetirementPassportProfile>
    WRITER$ = (org.apache.avro.io.DatumWriter<MedicareAndRetirementPassportProfile>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MedicareAndRetirementPassportProfile>
    READER$ = (org.apache.avro.io.DatumReader<MedicareAndRetirementPassportProfile>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
