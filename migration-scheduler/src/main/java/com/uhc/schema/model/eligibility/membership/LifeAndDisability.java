/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LifeAndDisability extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8025086128221323125L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LifeAndDisability\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"acceleratedDeathBenefit\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AcceleratedDeathBenefit\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"payoutAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"ageReductionAppliedAge\",\"type\":[\"null\",\"string\"],\"doc\":\"Last age achieved when reduction was applied.\",\"default\":null},{\"name\":\"ageReductionAppliedPercent\",\"type\":[\"null\",\"string\"],\"doc\":\"Percent used to reduce benefit when age reduction is met.\",\"default\":null},{\"name\":\"approvedAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Subscriber's maximum approved benefit amount at plan level.\",\"default\":null},{\"name\":\"coverageStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"evidenceOfInsurabilityStatusCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"evidenceOfInsurabilityStatusDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"insuredAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lateEntrantStatus\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"premiumAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Total premium amount.\",\"default\":null},{\"name\":\"requestedAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Amount the member is requesting.\",\"default\":null},{\"name\":\"salaryBenefitMultiplierFactor\",\"type\":[\"null\",\"string\"],\"doc\":\"Selected valid amounts associated with plan code.\",\"default\":null},{\"name\":\"waiverOfPremiumEffectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"waiverOfPremiumIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates a member has been approved for a waiver of premium.\",\"default\":null},{\"name\":\"waiverOfPremiumTerminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LifeAndDisability> ENCODER =
      new BinaryMessageEncoder<LifeAndDisability>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LifeAndDisability> DECODER =
      new BinaryMessageDecoder<LifeAndDisability>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LifeAndDisability> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LifeAndDisability> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LifeAndDisability>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LifeAndDisability to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LifeAndDisability from a ByteBuffer. */
  public static LifeAndDisability fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit acceleratedDeathBenefit;
  /** Last age achieved when reduction was applied. */
  @Deprecated public java.lang.CharSequence ageReductionAppliedAge;
  /** Percent used to reduce benefit when age reduction is met. */
  @Deprecated public java.lang.CharSequence ageReductionAppliedPercent;
  /** Subscriber's maximum approved benefit amount at plan level. */
  @Deprecated public java.lang.CharSequence approvedAmount;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType coverageStatus;
  @Deprecated public java.lang.CharSequence evidenceOfInsurabilityStatusCode;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence evidenceOfInsurabilityStatusDate;
  @Deprecated public java.lang.CharSequence insuredAmount;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType lateEntrantStatus;
  @Deprecated public java.lang.CharSequence planCode;
  /** Total premium amount. */
  @Deprecated public java.lang.CharSequence premiumAmount;
  /** Amount the member is requesting. */
  @Deprecated public java.lang.CharSequence requestedAmount;
  /** Selected valid amounts associated with plan code. */
  @Deprecated public java.lang.CharSequence salaryBenefitMultiplierFactor;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence waiverOfPremiumEffectiveDate;
  /** Indicates a member has been approved for a waiver of premium. */
  @Deprecated public java.lang.CharSequence waiverOfPremiumIndicator;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence waiverOfPremiumTerminationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LifeAndDisability() {}

  /**
   * All-args constructor.
   * @param acceleratedDeathBenefit The new value for acceleratedDeathBenefit
   * @param ageReductionAppliedAge Last age achieved when reduction was applied.
   * @param ageReductionAppliedPercent Percent used to reduce benefit when age reduction is met.
   * @param approvedAmount Subscriber's maximum approved benefit amount at plan level.
   * @param coverageStatus The new value for coverageStatus
   * @param evidenceOfInsurabilityStatusCode The new value for evidenceOfInsurabilityStatusCode
   * @param evidenceOfInsurabilityStatusDate Date format: CCYY-MM-DD
   * @param insuredAmount The new value for insuredAmount
   * @param lateEntrantStatus The new value for lateEntrantStatus
   * @param planCode The new value for planCode
   * @param premiumAmount Total premium amount.
   * @param requestedAmount Amount the member is requesting.
   * @param salaryBenefitMultiplierFactor Selected valid amounts associated with plan code.
   * @param waiverOfPremiumEffectiveDate Date format: CCYY-MM-DD
   * @param waiverOfPremiumIndicator Indicates a member has been approved for a waiver of premium.
   * @param waiverOfPremiumTerminationDate Date format: CCYY-MM-DD
   */
  public LifeAndDisability(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit acceleratedDeathBenefit, java.lang.CharSequence ageReductionAppliedAge, java.lang.CharSequence ageReductionAppliedPercent, java.lang.CharSequence approvedAmount, com.uhc.schema.model.eligibility.common.DescriptionType coverageStatus, java.lang.CharSequence evidenceOfInsurabilityStatusCode, java.lang.CharSequence evidenceOfInsurabilityStatusDate, java.lang.CharSequence insuredAmount, com.uhc.schema.model.eligibility.common.DescriptionType lateEntrantStatus, java.lang.CharSequence planCode, java.lang.CharSequence premiumAmount, java.lang.CharSequence requestedAmount, java.lang.CharSequence salaryBenefitMultiplierFactor, java.lang.CharSequence waiverOfPremiumEffectiveDate, java.lang.CharSequence waiverOfPremiumIndicator, java.lang.CharSequence waiverOfPremiumTerminationDate) {
    this.acceleratedDeathBenefit = acceleratedDeathBenefit;
    this.ageReductionAppliedAge = ageReductionAppliedAge;
    this.ageReductionAppliedPercent = ageReductionAppliedPercent;
    this.approvedAmount = approvedAmount;
    this.coverageStatus = coverageStatus;
    this.evidenceOfInsurabilityStatusCode = evidenceOfInsurabilityStatusCode;
    this.evidenceOfInsurabilityStatusDate = evidenceOfInsurabilityStatusDate;
    this.insuredAmount = insuredAmount;
    this.lateEntrantStatus = lateEntrantStatus;
    this.planCode = planCode;
    this.premiumAmount = premiumAmount;
    this.requestedAmount = requestedAmount;
    this.salaryBenefitMultiplierFactor = salaryBenefitMultiplierFactor;
    this.waiverOfPremiumEffectiveDate = waiverOfPremiumEffectiveDate;
    this.waiverOfPremiumIndicator = waiverOfPremiumIndicator;
    this.waiverOfPremiumTerminationDate = waiverOfPremiumTerminationDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return acceleratedDeathBenefit;
    case 1: return ageReductionAppliedAge;
    case 2: return ageReductionAppliedPercent;
    case 3: return approvedAmount;
    case 4: return coverageStatus;
    case 5: return evidenceOfInsurabilityStatusCode;
    case 6: return evidenceOfInsurabilityStatusDate;
    case 7: return insuredAmount;
    case 8: return lateEntrantStatus;
    case 9: return planCode;
    case 10: return premiumAmount;
    case 11: return requestedAmount;
    case 12: return salaryBenefitMultiplierFactor;
    case 13: return waiverOfPremiumEffectiveDate;
    case 14: return waiverOfPremiumIndicator;
    case 15: return waiverOfPremiumTerminationDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: acceleratedDeathBenefit = (com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit)value$; break;
    case 1: ageReductionAppliedAge = (java.lang.CharSequence)value$; break;
    case 2: ageReductionAppliedPercent = (java.lang.CharSequence)value$; break;
    case 3: approvedAmount = (java.lang.CharSequence)value$; break;
    case 4: coverageStatus = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 5: evidenceOfInsurabilityStatusCode = (java.lang.CharSequence)value$; break;
    case 6: evidenceOfInsurabilityStatusDate = (java.lang.CharSequence)value$; break;
    case 7: insuredAmount = (java.lang.CharSequence)value$; break;
    case 8: lateEntrantStatus = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 9: planCode = (java.lang.CharSequence)value$; break;
    case 10: premiumAmount = (java.lang.CharSequence)value$; break;
    case 11: requestedAmount = (java.lang.CharSequence)value$; break;
    case 12: salaryBenefitMultiplierFactor = (java.lang.CharSequence)value$; break;
    case 13: waiverOfPremiumEffectiveDate = (java.lang.CharSequence)value$; break;
    case 14: waiverOfPremiumIndicator = (java.lang.CharSequence)value$; break;
    case 15: waiverOfPremiumTerminationDate = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'acceleratedDeathBenefit' field.
   * @return The value of the 'acceleratedDeathBenefit' field.
   */
  public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit getAcceleratedDeathBenefit() {
    return acceleratedDeathBenefit;
  }

  /**
   * Sets the value of the 'acceleratedDeathBenefit' field.
   * @param value the value to set.
   */
  public void setAcceleratedDeathBenefit(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit value) {
    this.acceleratedDeathBenefit = value;
  }

  /**
   * Gets the value of the 'ageReductionAppliedAge' field.
   * @return Last age achieved when reduction was applied.
   */
  public java.lang.CharSequence getAgeReductionAppliedAge() {
    return ageReductionAppliedAge;
  }

  /**
   * Sets the value of the 'ageReductionAppliedAge' field.
   * Last age achieved when reduction was applied.
   * @param value the value to set.
   */
  public void setAgeReductionAppliedAge(java.lang.CharSequence value) {
    this.ageReductionAppliedAge = value;
  }

  /**
   * Gets the value of the 'ageReductionAppliedPercent' field.
   * @return Percent used to reduce benefit when age reduction is met.
   */
  public java.lang.CharSequence getAgeReductionAppliedPercent() {
    return ageReductionAppliedPercent;
  }

  /**
   * Sets the value of the 'ageReductionAppliedPercent' field.
   * Percent used to reduce benefit when age reduction is met.
   * @param value the value to set.
   */
  public void setAgeReductionAppliedPercent(java.lang.CharSequence value) {
    this.ageReductionAppliedPercent = value;
  }

  /**
   * Gets the value of the 'approvedAmount' field.
   * @return Subscriber's maximum approved benefit amount at plan level.
   */
  public java.lang.CharSequence getApprovedAmount() {
    return approvedAmount;
  }

  /**
   * Sets the value of the 'approvedAmount' field.
   * Subscriber's maximum approved benefit amount at plan level.
   * @param value the value to set.
   */
  public void setApprovedAmount(java.lang.CharSequence value) {
    this.approvedAmount = value;
  }

  /**
   * Gets the value of the 'coverageStatus' field.
   * @return The value of the 'coverageStatus' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCoverageStatus() {
    return coverageStatus;
  }

  /**
   * Sets the value of the 'coverageStatus' field.
   * @param value the value to set.
   */
  public void setCoverageStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.coverageStatus = value;
  }

  /**
   * Gets the value of the 'evidenceOfInsurabilityStatusCode' field.
   * @return The value of the 'evidenceOfInsurabilityStatusCode' field.
   */
  public java.lang.CharSequence getEvidenceOfInsurabilityStatusCode() {
    return evidenceOfInsurabilityStatusCode;
  }

  /**
   * Sets the value of the 'evidenceOfInsurabilityStatusCode' field.
   * @param value the value to set.
   */
  public void setEvidenceOfInsurabilityStatusCode(java.lang.CharSequence value) {
    this.evidenceOfInsurabilityStatusCode = value;
  }

  /**
   * Gets the value of the 'evidenceOfInsurabilityStatusDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEvidenceOfInsurabilityStatusDate() {
    return evidenceOfInsurabilityStatusDate;
  }

  /**
   * Sets the value of the 'evidenceOfInsurabilityStatusDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEvidenceOfInsurabilityStatusDate(java.lang.CharSequence value) {
    this.evidenceOfInsurabilityStatusDate = value;
  }

  /**
   * Gets the value of the 'insuredAmount' field.
   * @return The value of the 'insuredAmount' field.
   */
  public java.lang.CharSequence getInsuredAmount() {
    return insuredAmount;
  }

  /**
   * Sets the value of the 'insuredAmount' field.
   * @param value the value to set.
   */
  public void setInsuredAmount(java.lang.CharSequence value) {
    this.insuredAmount = value;
  }

  /**
   * Gets the value of the 'lateEntrantStatus' field.
   * @return The value of the 'lateEntrantStatus' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getLateEntrantStatus() {
    return lateEntrantStatus;
  }

  /**
   * Sets the value of the 'lateEntrantStatus' field.
   * @param value the value to set.
   */
  public void setLateEntrantStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.lateEntrantStatus = value;
  }

  /**
   * Gets the value of the 'planCode' field.
   * @return The value of the 'planCode' field.
   */
  public java.lang.CharSequence getPlanCode() {
    return planCode;
  }

  /**
   * Sets the value of the 'planCode' field.
   * @param value the value to set.
   */
  public void setPlanCode(java.lang.CharSequence value) {
    this.planCode = value;
  }

  /**
   * Gets the value of the 'premiumAmount' field.
   * @return Total premium amount.
   */
  public java.lang.CharSequence getPremiumAmount() {
    return premiumAmount;
  }

  /**
   * Sets the value of the 'premiumAmount' field.
   * Total premium amount.
   * @param value the value to set.
   */
  public void setPremiumAmount(java.lang.CharSequence value) {
    this.premiumAmount = value;
  }

  /**
   * Gets the value of the 'requestedAmount' field.
   * @return Amount the member is requesting.
   */
  public java.lang.CharSequence getRequestedAmount() {
    return requestedAmount;
  }

  /**
   * Sets the value of the 'requestedAmount' field.
   * Amount the member is requesting.
   * @param value the value to set.
   */
  public void setRequestedAmount(java.lang.CharSequence value) {
    this.requestedAmount = value;
  }

  /**
   * Gets the value of the 'salaryBenefitMultiplierFactor' field.
   * @return Selected valid amounts associated with plan code.
   */
  public java.lang.CharSequence getSalaryBenefitMultiplierFactor() {
    return salaryBenefitMultiplierFactor;
  }

  /**
   * Sets the value of the 'salaryBenefitMultiplierFactor' field.
   * Selected valid amounts associated with plan code.
   * @param value the value to set.
   */
  public void setSalaryBenefitMultiplierFactor(java.lang.CharSequence value) {
    this.salaryBenefitMultiplierFactor = value;
  }

  /**
   * Gets the value of the 'waiverOfPremiumEffectiveDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getWaiverOfPremiumEffectiveDate() {
    return waiverOfPremiumEffectiveDate;
  }

  /**
   * Sets the value of the 'waiverOfPremiumEffectiveDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setWaiverOfPremiumEffectiveDate(java.lang.CharSequence value) {
    this.waiverOfPremiumEffectiveDate = value;
  }

  /**
   * Gets the value of the 'waiverOfPremiumIndicator' field.
   * @return Indicates a member has been approved for a waiver of premium.
   */
  public java.lang.CharSequence getWaiverOfPremiumIndicator() {
    return waiverOfPremiumIndicator;
  }

  /**
   * Sets the value of the 'waiverOfPremiumIndicator' field.
   * Indicates a member has been approved for a waiver of premium.
   * @param value the value to set.
   */
  public void setWaiverOfPremiumIndicator(java.lang.CharSequence value) {
    this.waiverOfPremiumIndicator = value;
  }

  /**
   * Gets the value of the 'waiverOfPremiumTerminationDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getWaiverOfPremiumTerminationDate() {
    return waiverOfPremiumTerminationDate;
  }

  /**
   * Sets the value of the 'waiverOfPremiumTerminationDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setWaiverOfPremiumTerminationDate(java.lang.CharSequence value) {
    this.waiverOfPremiumTerminationDate = value;
  }

  /**
   * Creates a new LifeAndDisability RecordBuilder.
   * @return A new LifeAndDisability RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder();
  }

  /**
   * Creates a new LifeAndDisability RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LifeAndDisability RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder newBuilder(com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder(other);
  }

  /**
   * Creates a new LifeAndDisability RecordBuilder by copying an existing LifeAndDisability instance.
   * @param other The existing instance to copy.
   * @return A new LifeAndDisability RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder newBuilder(com.uhc.schema.model.eligibility.membership.LifeAndDisability other) {
    return new com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder(other);
  }

  /**
   * RecordBuilder for LifeAndDisability instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LifeAndDisability>
    implements org.apache.avro.data.RecordBuilder<LifeAndDisability> {

    private com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit acceleratedDeathBenefit;
    private com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder acceleratedDeathBenefitBuilder;
    /** Last age achieved when reduction was applied. */
    private java.lang.CharSequence ageReductionAppliedAge;
    /** Percent used to reduce benefit when age reduction is met. */
    private java.lang.CharSequence ageReductionAppliedPercent;
    /** Subscriber's maximum approved benefit amount at plan level. */
    private java.lang.CharSequence approvedAmount;
    private com.uhc.schema.model.eligibility.common.DescriptionType coverageStatus;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder coverageStatusBuilder;
    private java.lang.CharSequence evidenceOfInsurabilityStatusCode;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence evidenceOfInsurabilityStatusDate;
    private java.lang.CharSequence insuredAmount;
    private com.uhc.schema.model.eligibility.common.DescriptionType lateEntrantStatus;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder lateEntrantStatusBuilder;
    private java.lang.CharSequence planCode;
    /** Total premium amount. */
    private java.lang.CharSequence premiumAmount;
    /** Amount the member is requesting. */
    private java.lang.CharSequence requestedAmount;
    /** Selected valid amounts associated with plan code. */
    private java.lang.CharSequence salaryBenefitMultiplierFactor;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence waiverOfPremiumEffectiveDate;
    /** Indicates a member has been approved for a waiver of premium. */
    private java.lang.CharSequence waiverOfPremiumIndicator;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence waiverOfPremiumTerminationDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acceleratedDeathBenefit)) {
        this.acceleratedDeathBenefit = data().deepCopy(fields()[0].schema(), other.acceleratedDeathBenefit);
        fieldSetFlags()[0] = true;
      }
      if (other.hasAcceleratedDeathBenefitBuilder()) {
        this.acceleratedDeathBenefitBuilder = com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.newBuilder(other.getAcceleratedDeathBenefitBuilder());
      }
      if (isValidValue(fields()[1], other.ageReductionAppliedAge)) {
        this.ageReductionAppliedAge = data().deepCopy(fields()[1].schema(), other.ageReductionAppliedAge);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ageReductionAppliedPercent)) {
        this.ageReductionAppliedPercent = data().deepCopy(fields()[2].schema(), other.ageReductionAppliedPercent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.approvedAmount)) {
        this.approvedAmount = data().deepCopy(fields()[3].schema(), other.approvedAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.coverageStatus)) {
        this.coverageStatus = data().deepCopy(fields()[4].schema(), other.coverageStatus);
        fieldSetFlags()[4] = true;
      }
      if (other.hasCoverageStatusBuilder()) {
        this.coverageStatusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCoverageStatusBuilder());
      }
      if (isValidValue(fields()[5], other.evidenceOfInsurabilityStatusCode)) {
        this.evidenceOfInsurabilityStatusCode = data().deepCopy(fields()[5].schema(), other.evidenceOfInsurabilityStatusCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.evidenceOfInsurabilityStatusDate)) {
        this.evidenceOfInsurabilityStatusDate = data().deepCopy(fields()[6].schema(), other.evidenceOfInsurabilityStatusDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.insuredAmount)) {
        this.insuredAmount = data().deepCopy(fields()[7].schema(), other.insuredAmount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lateEntrantStatus)) {
        this.lateEntrantStatus = data().deepCopy(fields()[8].schema(), other.lateEntrantStatus);
        fieldSetFlags()[8] = true;
      }
      if (other.hasLateEntrantStatusBuilder()) {
        this.lateEntrantStatusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getLateEntrantStatusBuilder());
      }
      if (isValidValue(fields()[9], other.planCode)) {
        this.planCode = data().deepCopy(fields()[9].schema(), other.planCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.premiumAmount)) {
        this.premiumAmount = data().deepCopy(fields()[10].schema(), other.premiumAmount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.requestedAmount)) {
        this.requestedAmount = data().deepCopy(fields()[11].schema(), other.requestedAmount);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.salaryBenefitMultiplierFactor)) {
        this.salaryBenefitMultiplierFactor = data().deepCopy(fields()[12].schema(), other.salaryBenefitMultiplierFactor);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.waiverOfPremiumEffectiveDate)) {
        this.waiverOfPremiumEffectiveDate = data().deepCopy(fields()[13].schema(), other.waiverOfPremiumEffectiveDate);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.waiverOfPremiumIndicator)) {
        this.waiverOfPremiumIndicator = data().deepCopy(fields()[14].schema(), other.waiverOfPremiumIndicator);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.waiverOfPremiumTerminationDate)) {
        this.waiverOfPremiumTerminationDate = data().deepCopy(fields()[15].schema(), other.waiverOfPremiumTerminationDate);
        fieldSetFlags()[15] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LifeAndDisability instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.LifeAndDisability other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.acceleratedDeathBenefit)) {
        this.acceleratedDeathBenefit = data().deepCopy(fields()[0].schema(), other.acceleratedDeathBenefit);
        fieldSetFlags()[0] = true;
      }
      this.acceleratedDeathBenefitBuilder = null;
      if (isValidValue(fields()[1], other.ageReductionAppliedAge)) {
        this.ageReductionAppliedAge = data().deepCopy(fields()[1].schema(), other.ageReductionAppliedAge);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ageReductionAppliedPercent)) {
        this.ageReductionAppliedPercent = data().deepCopy(fields()[2].schema(), other.ageReductionAppliedPercent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.approvedAmount)) {
        this.approvedAmount = data().deepCopy(fields()[3].schema(), other.approvedAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.coverageStatus)) {
        this.coverageStatus = data().deepCopy(fields()[4].schema(), other.coverageStatus);
        fieldSetFlags()[4] = true;
      }
      this.coverageStatusBuilder = null;
      if (isValidValue(fields()[5], other.evidenceOfInsurabilityStatusCode)) {
        this.evidenceOfInsurabilityStatusCode = data().deepCopy(fields()[5].schema(), other.evidenceOfInsurabilityStatusCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.evidenceOfInsurabilityStatusDate)) {
        this.evidenceOfInsurabilityStatusDate = data().deepCopy(fields()[6].schema(), other.evidenceOfInsurabilityStatusDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.insuredAmount)) {
        this.insuredAmount = data().deepCopy(fields()[7].schema(), other.insuredAmount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lateEntrantStatus)) {
        this.lateEntrantStatus = data().deepCopy(fields()[8].schema(), other.lateEntrantStatus);
        fieldSetFlags()[8] = true;
      }
      this.lateEntrantStatusBuilder = null;
      if (isValidValue(fields()[9], other.planCode)) {
        this.planCode = data().deepCopy(fields()[9].schema(), other.planCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.premiumAmount)) {
        this.premiumAmount = data().deepCopy(fields()[10].schema(), other.premiumAmount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.requestedAmount)) {
        this.requestedAmount = data().deepCopy(fields()[11].schema(), other.requestedAmount);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.salaryBenefitMultiplierFactor)) {
        this.salaryBenefitMultiplierFactor = data().deepCopy(fields()[12].schema(), other.salaryBenefitMultiplierFactor);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.waiverOfPremiumEffectiveDate)) {
        this.waiverOfPremiumEffectiveDate = data().deepCopy(fields()[13].schema(), other.waiverOfPremiumEffectiveDate);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.waiverOfPremiumIndicator)) {
        this.waiverOfPremiumIndicator = data().deepCopy(fields()[14].schema(), other.waiverOfPremiumIndicator);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.waiverOfPremiumTerminationDate)) {
        this.waiverOfPremiumTerminationDate = data().deepCopy(fields()[15].schema(), other.waiverOfPremiumTerminationDate);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'acceleratedDeathBenefit' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit getAcceleratedDeathBenefit() {
      return acceleratedDeathBenefit;
    }

    /**
      * Sets the value of the 'acceleratedDeathBenefit' field.
      * @param value The value of 'acceleratedDeathBenefit'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setAcceleratedDeathBenefit(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit value) {
      validate(fields()[0], value);
      this.acceleratedDeathBenefitBuilder = null;
      this.acceleratedDeathBenefit = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'acceleratedDeathBenefit' field has been set.
      * @return True if the 'acceleratedDeathBenefit' field has been set, false otherwise.
      */
    public boolean hasAcceleratedDeathBenefit() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'acceleratedDeathBenefit' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder getAcceleratedDeathBenefitBuilder() {
      if (acceleratedDeathBenefitBuilder == null) {
        if (hasAcceleratedDeathBenefit()) {
          setAcceleratedDeathBenefitBuilder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.newBuilder(acceleratedDeathBenefit));
        } else {
          setAcceleratedDeathBenefitBuilder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.newBuilder());
        }
      }
      return acceleratedDeathBenefitBuilder;
    }

    /**
     * Sets the Builder instance for the 'acceleratedDeathBenefit' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setAcceleratedDeathBenefitBuilder(com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit.Builder value) {
      clearAcceleratedDeathBenefit();
      acceleratedDeathBenefitBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'acceleratedDeathBenefit' field has an active Builder instance
     * @return True if the 'acceleratedDeathBenefit' field has an active Builder instance
     */
    public boolean hasAcceleratedDeathBenefitBuilder() {
      return acceleratedDeathBenefitBuilder != null;
    }

    /**
      * Clears the value of the 'acceleratedDeathBenefit' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearAcceleratedDeathBenefit() {
      acceleratedDeathBenefit = null;
      acceleratedDeathBenefitBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ageReductionAppliedAge' field.
      * Last age achieved when reduction was applied.
      * @return The value.
      */
    public java.lang.CharSequence getAgeReductionAppliedAge() {
      return ageReductionAppliedAge;
    }

    /**
      * Sets the value of the 'ageReductionAppliedAge' field.
      * Last age achieved when reduction was applied.
      * @param value The value of 'ageReductionAppliedAge'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setAgeReductionAppliedAge(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ageReductionAppliedAge = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ageReductionAppliedAge' field has been set.
      * Last age achieved when reduction was applied.
      * @return True if the 'ageReductionAppliedAge' field has been set, false otherwise.
      */
    public boolean hasAgeReductionAppliedAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ageReductionAppliedAge' field.
      * Last age achieved when reduction was applied.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearAgeReductionAppliedAge() {
      ageReductionAppliedAge = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ageReductionAppliedPercent' field.
      * Percent used to reduce benefit when age reduction is met.
      * @return The value.
      */
    public java.lang.CharSequence getAgeReductionAppliedPercent() {
      return ageReductionAppliedPercent;
    }

    /**
      * Sets the value of the 'ageReductionAppliedPercent' field.
      * Percent used to reduce benefit when age reduction is met.
      * @param value The value of 'ageReductionAppliedPercent'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setAgeReductionAppliedPercent(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ageReductionAppliedPercent = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ageReductionAppliedPercent' field has been set.
      * Percent used to reduce benefit when age reduction is met.
      * @return True if the 'ageReductionAppliedPercent' field has been set, false otherwise.
      */
    public boolean hasAgeReductionAppliedPercent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ageReductionAppliedPercent' field.
      * Percent used to reduce benefit when age reduction is met.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearAgeReductionAppliedPercent() {
      ageReductionAppliedPercent = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'approvedAmount' field.
      * Subscriber's maximum approved benefit amount at plan level.
      * @return The value.
      */
    public java.lang.CharSequence getApprovedAmount() {
      return approvedAmount;
    }

    /**
      * Sets the value of the 'approvedAmount' field.
      * Subscriber's maximum approved benefit amount at plan level.
      * @param value The value of 'approvedAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setApprovedAmount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.approvedAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'approvedAmount' field has been set.
      * Subscriber's maximum approved benefit amount at plan level.
      * @return True if the 'approvedAmount' field has been set, false otherwise.
      */
    public boolean hasApprovedAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'approvedAmount' field.
      * Subscriber's maximum approved benefit amount at plan level.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearApprovedAmount() {
      approvedAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverageStatus' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCoverageStatus() {
      return coverageStatus;
    }

    /**
      * Sets the value of the 'coverageStatus' field.
      * @param value The value of 'coverageStatus'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setCoverageStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[4], value);
      this.coverageStatusBuilder = null;
      this.coverageStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'coverageStatus' field has been set.
      * @return True if the 'coverageStatus' field has been set, false otherwise.
      */
    public boolean hasCoverageStatus() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'coverageStatus' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCoverageStatusBuilder() {
      if (coverageStatusBuilder == null) {
        if (hasCoverageStatus()) {
          setCoverageStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(coverageStatus));
        } else {
          setCoverageStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return coverageStatusBuilder;
    }

    /**
     * Sets the Builder instance for the 'coverageStatus' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setCoverageStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCoverageStatus();
      coverageStatusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coverageStatus' field has an active Builder instance
     * @return True if the 'coverageStatus' field has an active Builder instance
     */
    public boolean hasCoverageStatusBuilder() {
      return coverageStatusBuilder != null;
    }

    /**
      * Clears the value of the 'coverageStatus' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearCoverageStatus() {
      coverageStatus = null;
      coverageStatusBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'evidenceOfInsurabilityStatusCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getEvidenceOfInsurabilityStatusCode() {
      return evidenceOfInsurabilityStatusCode;
    }

    /**
      * Sets the value of the 'evidenceOfInsurabilityStatusCode' field.
      * @param value The value of 'evidenceOfInsurabilityStatusCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setEvidenceOfInsurabilityStatusCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.evidenceOfInsurabilityStatusCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'evidenceOfInsurabilityStatusCode' field has been set.
      * @return True if the 'evidenceOfInsurabilityStatusCode' field has been set, false otherwise.
      */
    public boolean hasEvidenceOfInsurabilityStatusCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'evidenceOfInsurabilityStatusCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearEvidenceOfInsurabilityStatusCode() {
      evidenceOfInsurabilityStatusCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'evidenceOfInsurabilityStatusDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEvidenceOfInsurabilityStatusDate() {
      return evidenceOfInsurabilityStatusDate;
    }

    /**
      * Sets the value of the 'evidenceOfInsurabilityStatusDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'evidenceOfInsurabilityStatusDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setEvidenceOfInsurabilityStatusDate(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.evidenceOfInsurabilityStatusDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'evidenceOfInsurabilityStatusDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'evidenceOfInsurabilityStatusDate' field has been set, false otherwise.
      */
    public boolean hasEvidenceOfInsurabilityStatusDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'evidenceOfInsurabilityStatusDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearEvidenceOfInsurabilityStatusDate() {
      evidenceOfInsurabilityStatusDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'insuredAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getInsuredAmount() {
      return insuredAmount;
    }

    /**
      * Sets the value of the 'insuredAmount' field.
      * @param value The value of 'insuredAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setInsuredAmount(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.insuredAmount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'insuredAmount' field has been set.
      * @return True if the 'insuredAmount' field has been set, false otherwise.
      */
    public boolean hasInsuredAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'insuredAmount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearInsuredAmount() {
      insuredAmount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lateEntrantStatus' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getLateEntrantStatus() {
      return lateEntrantStatus;
    }

    /**
      * Sets the value of the 'lateEntrantStatus' field.
      * @param value The value of 'lateEntrantStatus'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setLateEntrantStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[8], value);
      this.lateEntrantStatusBuilder = null;
      this.lateEntrantStatus = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lateEntrantStatus' field has been set.
      * @return True if the 'lateEntrantStatus' field has been set, false otherwise.
      */
    public boolean hasLateEntrantStatus() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'lateEntrantStatus' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getLateEntrantStatusBuilder() {
      if (lateEntrantStatusBuilder == null) {
        if (hasLateEntrantStatus()) {
          setLateEntrantStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(lateEntrantStatus));
        } else {
          setLateEntrantStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return lateEntrantStatusBuilder;
    }

    /**
     * Sets the Builder instance for the 'lateEntrantStatus' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setLateEntrantStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearLateEntrantStatus();
      lateEntrantStatusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lateEntrantStatus' field has an active Builder instance
     * @return True if the 'lateEntrantStatus' field has an active Builder instance
     */
    public boolean hasLateEntrantStatusBuilder() {
      return lateEntrantStatusBuilder != null;
    }

    /**
      * Clears the value of the 'lateEntrantStatus' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearLateEntrantStatus() {
      lateEntrantStatus = null;
      lateEntrantStatusBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanCode() {
      return planCode;
    }

    /**
      * Sets the value of the 'planCode' field.
      * @param value The value of 'planCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setPlanCode(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.planCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'planCode' field has been set.
      * @return True if the 'planCode' field has been set, false otherwise.
      */
    public boolean hasPlanCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'planCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearPlanCode() {
      planCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'premiumAmount' field.
      * Total premium amount.
      * @return The value.
      */
    public java.lang.CharSequence getPremiumAmount() {
      return premiumAmount;
    }

    /**
      * Sets the value of the 'premiumAmount' field.
      * Total premium amount.
      * @param value The value of 'premiumAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setPremiumAmount(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.premiumAmount = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'premiumAmount' field has been set.
      * Total premium amount.
      * @return True if the 'premiumAmount' field has been set, false otherwise.
      */
    public boolean hasPremiumAmount() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'premiumAmount' field.
      * Total premium amount.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearPremiumAmount() {
      premiumAmount = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestedAmount' field.
      * Amount the member is requesting.
      * @return The value.
      */
    public java.lang.CharSequence getRequestedAmount() {
      return requestedAmount;
    }

    /**
      * Sets the value of the 'requestedAmount' field.
      * Amount the member is requesting.
      * @param value The value of 'requestedAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setRequestedAmount(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.requestedAmount = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'requestedAmount' field has been set.
      * Amount the member is requesting.
      * @return True if the 'requestedAmount' field has been set, false otherwise.
      */
    public boolean hasRequestedAmount() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'requestedAmount' field.
      * Amount the member is requesting.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearRequestedAmount() {
      requestedAmount = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'salaryBenefitMultiplierFactor' field.
      * Selected valid amounts associated with plan code.
      * @return The value.
      */
    public java.lang.CharSequence getSalaryBenefitMultiplierFactor() {
      return salaryBenefitMultiplierFactor;
    }

    /**
      * Sets the value of the 'salaryBenefitMultiplierFactor' field.
      * Selected valid amounts associated with plan code.
      * @param value The value of 'salaryBenefitMultiplierFactor'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setSalaryBenefitMultiplierFactor(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.salaryBenefitMultiplierFactor = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'salaryBenefitMultiplierFactor' field has been set.
      * Selected valid amounts associated with plan code.
      * @return True if the 'salaryBenefitMultiplierFactor' field has been set, false otherwise.
      */
    public boolean hasSalaryBenefitMultiplierFactor() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'salaryBenefitMultiplierFactor' field.
      * Selected valid amounts associated with plan code.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearSalaryBenefitMultiplierFactor() {
      salaryBenefitMultiplierFactor = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'waiverOfPremiumEffectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getWaiverOfPremiumEffectiveDate() {
      return waiverOfPremiumEffectiveDate;
    }

    /**
      * Sets the value of the 'waiverOfPremiumEffectiveDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'waiverOfPremiumEffectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setWaiverOfPremiumEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.waiverOfPremiumEffectiveDate = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'waiverOfPremiumEffectiveDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'waiverOfPremiumEffectiveDate' field has been set, false otherwise.
      */
    public boolean hasWaiverOfPremiumEffectiveDate() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'waiverOfPremiumEffectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearWaiverOfPremiumEffectiveDate() {
      waiverOfPremiumEffectiveDate = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'waiverOfPremiumIndicator' field.
      * Indicates a member has been approved for a waiver of premium.
      * @return The value.
      */
    public java.lang.CharSequence getWaiverOfPremiumIndicator() {
      return waiverOfPremiumIndicator;
    }

    /**
      * Sets the value of the 'waiverOfPremiumIndicator' field.
      * Indicates a member has been approved for a waiver of premium.
      * @param value The value of 'waiverOfPremiumIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setWaiverOfPremiumIndicator(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.waiverOfPremiumIndicator = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'waiverOfPremiumIndicator' field has been set.
      * Indicates a member has been approved for a waiver of premium.
      * @return True if the 'waiverOfPremiumIndicator' field has been set, false otherwise.
      */
    public boolean hasWaiverOfPremiumIndicator() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'waiverOfPremiumIndicator' field.
      * Indicates a member has been approved for a waiver of premium.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearWaiverOfPremiumIndicator() {
      waiverOfPremiumIndicator = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'waiverOfPremiumTerminationDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getWaiverOfPremiumTerminationDate() {
      return waiverOfPremiumTerminationDate;
    }

    /**
      * Sets the value of the 'waiverOfPremiumTerminationDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'waiverOfPremiumTerminationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder setWaiverOfPremiumTerminationDate(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.waiverOfPremiumTerminationDate = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'waiverOfPremiumTerminationDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'waiverOfPremiumTerminationDate' field has been set, false otherwise.
      */
    public boolean hasWaiverOfPremiumTerminationDate() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'waiverOfPremiumTerminationDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.LifeAndDisability.Builder clearWaiverOfPremiumTerminationDate() {
      waiverOfPremiumTerminationDate = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LifeAndDisability build() {
      try {
        LifeAndDisability record = new LifeAndDisability();
        if (acceleratedDeathBenefitBuilder != null) {
          record.acceleratedDeathBenefit = this.acceleratedDeathBenefitBuilder.build();
        } else {
          record.acceleratedDeathBenefit = fieldSetFlags()[0] ? this.acceleratedDeathBenefit : (com.uhc.schema.model.eligibility.membership.AcceleratedDeathBenefit) defaultValue(fields()[0]);
        }
        record.ageReductionAppliedAge = fieldSetFlags()[1] ? this.ageReductionAppliedAge : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ageReductionAppliedPercent = fieldSetFlags()[2] ? this.ageReductionAppliedPercent : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.approvedAmount = fieldSetFlags()[3] ? this.approvedAmount : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (coverageStatusBuilder != null) {
          record.coverageStatus = this.coverageStatusBuilder.build();
        } else {
          record.coverageStatus = fieldSetFlags()[4] ? this.coverageStatus : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[4]);
        }
        record.evidenceOfInsurabilityStatusCode = fieldSetFlags()[5] ? this.evidenceOfInsurabilityStatusCode : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.evidenceOfInsurabilityStatusDate = fieldSetFlags()[6] ? this.evidenceOfInsurabilityStatusDate : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.insuredAmount = fieldSetFlags()[7] ? this.insuredAmount : (java.lang.CharSequence) defaultValue(fields()[7]);
        if (lateEntrantStatusBuilder != null) {
          record.lateEntrantStatus = this.lateEntrantStatusBuilder.build();
        } else {
          record.lateEntrantStatus = fieldSetFlags()[8] ? this.lateEntrantStatus : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[8]);
        }
        record.planCode = fieldSetFlags()[9] ? this.planCode : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.premiumAmount = fieldSetFlags()[10] ? this.premiumAmount : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.requestedAmount = fieldSetFlags()[11] ? this.requestedAmount : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.salaryBenefitMultiplierFactor = fieldSetFlags()[12] ? this.salaryBenefitMultiplierFactor : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.waiverOfPremiumEffectiveDate = fieldSetFlags()[13] ? this.waiverOfPremiumEffectiveDate : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.waiverOfPremiumIndicator = fieldSetFlags()[14] ? this.waiverOfPremiumIndicator : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.waiverOfPremiumTerminationDate = fieldSetFlags()[15] ? this.waiverOfPremiumTerminationDate : (java.lang.CharSequence) defaultValue(fields()[15]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LifeAndDisability>
    WRITER$ = (org.apache.avro.io.DatumWriter<LifeAndDisability>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LifeAndDisability>
    READER$ = (org.apache.avro.io.DatumReader<LifeAndDisability>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
