/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.individual;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BirthLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4783137473419496921L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BirthLocation\",\"namespace\":\"com.uhc.schema.model.eligibility.individual\",\"fields\":[{\"name\":\"isoCountry\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Country of birth for an individual.\",\"default\":null},{\"name\":\"stateProvinceCode\",\"type\":[\"null\",\"int\"],\"doc\":\"State or Province of birth for an individual.\",\"default\":null},{\"name\":\"townName\",\"type\":[\"null\",\"string\"],\"doc\":\"City or town of birth for an individual.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BirthLocation> ENCODER =
      new BinaryMessageEncoder<BirthLocation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BirthLocation> DECODER =
      new BinaryMessageDecoder<BirthLocation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BirthLocation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BirthLocation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BirthLocation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BirthLocation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BirthLocation from a ByteBuffer. */
  public static BirthLocation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Country of birth for an individual. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType isoCountry;
  /** State or Province of birth for an individual. */
  @Deprecated public java.lang.Integer stateProvinceCode;
  /** City or town of birth for an individual. */
  @Deprecated public java.lang.CharSequence townName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BirthLocation() {}

  /**
   * All-args constructor.
   * @param isoCountry Country of birth for an individual.
   * @param stateProvinceCode State or Province of birth for an individual.
   * @param townName City or town of birth for an individual.
   */
  public BirthLocation(com.uhc.schema.model.eligibility.common.DescriptionType isoCountry, java.lang.Integer stateProvinceCode, java.lang.CharSequence townName) {
    this.isoCountry = isoCountry;
    this.stateProvinceCode = stateProvinceCode;
    this.townName = townName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return isoCountry;
    case 1: return stateProvinceCode;
    case 2: return townName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: isoCountry = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 1: stateProvinceCode = (java.lang.Integer)value$; break;
    case 2: townName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'isoCountry' field.
   * @return Country of birth for an individual.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getIsoCountry() {
    return isoCountry;
  }

  /**
   * Sets the value of the 'isoCountry' field.
   * Country of birth for an individual.
   * @param value the value to set.
   */
  public void setIsoCountry(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.isoCountry = value;
  }

  /**
   * Gets the value of the 'stateProvinceCode' field.
   * @return State or Province of birth for an individual.
   */
  public java.lang.Integer getStateProvinceCode() {
    return stateProvinceCode;
  }

  /**
   * Sets the value of the 'stateProvinceCode' field.
   * State or Province of birth for an individual.
   * @param value the value to set.
   */
  public void setStateProvinceCode(java.lang.Integer value) {
    this.stateProvinceCode = value;
  }

  /**
   * Gets the value of the 'townName' field.
   * @return City or town of birth for an individual.
   */
  public java.lang.CharSequence getTownName() {
    return townName;
  }

  /**
   * Sets the value of the 'townName' field.
   * City or town of birth for an individual.
   * @param value the value to set.
   */
  public void setTownName(java.lang.CharSequence value) {
    this.townName = value;
  }

  /**
   * Creates a new BirthLocation RecordBuilder.
   * @return A new BirthLocation RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.BirthLocation.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.individual.BirthLocation.Builder();
  }

  /**
   * Creates a new BirthLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BirthLocation RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.BirthLocation.Builder newBuilder(com.uhc.schema.model.eligibility.individual.BirthLocation.Builder other) {
    return new com.uhc.schema.model.eligibility.individual.BirthLocation.Builder(other);
  }

  /**
   * Creates a new BirthLocation RecordBuilder by copying an existing BirthLocation instance.
   * @param other The existing instance to copy.
   * @return A new BirthLocation RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.BirthLocation.Builder newBuilder(com.uhc.schema.model.eligibility.individual.BirthLocation other) {
    return new com.uhc.schema.model.eligibility.individual.BirthLocation.Builder(other);
  }

  /**
   * RecordBuilder for BirthLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BirthLocation>
    implements org.apache.avro.data.RecordBuilder<BirthLocation> {

    /** Country of birth for an individual. */
    private com.uhc.schema.model.eligibility.common.DescriptionType isoCountry;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder isoCountryBuilder;
    /** State or Province of birth for an individual. */
    private java.lang.Integer stateProvinceCode;
    /** City or town of birth for an individual. */
    private java.lang.CharSequence townName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.BirthLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isoCountry)) {
        this.isoCountry = data().deepCopy(fields()[0].schema(), other.isoCountry);
        fieldSetFlags()[0] = true;
      }
      if (other.hasIsoCountryBuilder()) {
        this.isoCountryBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getIsoCountryBuilder());
      }
      if (isValidValue(fields()[1], other.stateProvinceCode)) {
        this.stateProvinceCode = data().deepCopy(fields()[1].schema(), other.stateProvinceCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.townName)) {
        this.townName = data().deepCopy(fields()[2].schema(), other.townName);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BirthLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.BirthLocation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.isoCountry)) {
        this.isoCountry = data().deepCopy(fields()[0].schema(), other.isoCountry);
        fieldSetFlags()[0] = true;
      }
      this.isoCountryBuilder = null;
      if (isValidValue(fields()[1], other.stateProvinceCode)) {
        this.stateProvinceCode = data().deepCopy(fields()[1].schema(), other.stateProvinceCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.townName)) {
        this.townName = data().deepCopy(fields()[2].schema(), other.townName);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'isoCountry' field.
      * Country of birth for an individual.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getIsoCountry() {
      return isoCountry;
    }

    /**
      * Sets the value of the 'isoCountry' field.
      * Country of birth for an individual.
      * @param value The value of 'isoCountry'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder setIsoCountry(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[0], value);
      this.isoCountryBuilder = null;
      this.isoCountry = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'isoCountry' field has been set.
      * Country of birth for an individual.
      * @return True if the 'isoCountry' field has been set, false otherwise.
      */
    public boolean hasIsoCountry() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'isoCountry' field and creates one if it doesn't exist yet.
     * Country of birth for an individual.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getIsoCountryBuilder() {
      if (isoCountryBuilder == null) {
        if (hasIsoCountry()) {
          setIsoCountryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(isoCountry));
        } else {
          setIsoCountryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return isoCountryBuilder;
    }

    /**
     * Sets the Builder instance for the 'isoCountry' field
     * Country of birth for an individual.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder setIsoCountryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearIsoCountry();
      isoCountryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'isoCountry' field has an active Builder instance
     * Country of birth for an individual.
     * @return True if the 'isoCountry' field has an active Builder instance
     */
    public boolean hasIsoCountryBuilder() {
      return isoCountryBuilder != null;
    }

    /**
      * Clears the value of the 'isoCountry' field.
      * Country of birth for an individual.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder clearIsoCountry() {
      isoCountry = null;
      isoCountryBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateProvinceCode' field.
      * State or Province of birth for an individual.
      * @return The value.
      */
    public java.lang.Integer getStateProvinceCode() {
      return stateProvinceCode;
    }

    /**
      * Sets the value of the 'stateProvinceCode' field.
      * State or Province of birth for an individual.
      * @param value The value of 'stateProvinceCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder setStateProvinceCode(java.lang.Integer value) {
      validate(fields()[1], value);
      this.stateProvinceCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stateProvinceCode' field has been set.
      * State or Province of birth for an individual.
      * @return True if the 'stateProvinceCode' field has been set, false otherwise.
      */
    public boolean hasStateProvinceCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stateProvinceCode' field.
      * State or Province of birth for an individual.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder clearStateProvinceCode() {
      stateProvinceCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'townName' field.
      * City or town of birth for an individual.
      * @return The value.
      */
    public java.lang.CharSequence getTownName() {
      return townName;
    }

    /**
      * Sets the value of the 'townName' field.
      * City or town of birth for an individual.
      * @param value The value of 'townName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder setTownName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.townName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'townName' field has been set.
      * City or town of birth for an individual.
      * @return True if the 'townName' field has been set, false otherwise.
      */
    public boolean hasTownName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'townName' field.
      * City or town of birth for an individual.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.BirthLocation.Builder clearTownName() {
      townName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BirthLocation build() {
      try {
        BirthLocation record = new BirthLocation();
        if (isoCountryBuilder != null) {
          record.isoCountry = this.isoCountryBuilder.build();
        } else {
          record.isoCountry = fieldSetFlags()[0] ? this.isoCountry : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[0]);
        }
        record.stateProvinceCode = fieldSetFlags()[1] ? this.stateProvinceCode : (java.lang.Integer) defaultValue(fields()[1]);
        record.townName = fieldSetFlags()[2] ? this.townName : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BirthLocation>
    WRITER$ = (org.apache.avro.io.DatumWriter<BirthLocation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BirthLocation>
    READER$ = (org.apache.avro.io.DatumReader<BirthLocation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
