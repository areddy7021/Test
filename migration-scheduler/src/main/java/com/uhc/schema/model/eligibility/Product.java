/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Product extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7698611497446076505L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Product\",\"namespace\":\"com.uhc.schema.model.eligibility\",\"fields\":[{\"name\":\"businessLineTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"categoryType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"healthCoverageType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"productCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"serviceType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"subCategoryTypes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"com.uhc.schema.model.eligibility.common.DescriptionType\"}],\"doc\":\"Defines the subcategory types for a Product.\",\"default\":null},{\"name\":\"versionNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the product.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Product> ENCODER =
      new BinaryMessageEncoder<Product>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Product> DECODER =
      new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Product> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Product> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Product to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Product from a ByteBuffer. */
  public static Product fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence businessLineTypeCode;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType categoryType;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType healthCoverageType;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence productCode;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType serviceType;
  /** Defines the subcategory types for a Product. */
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> subCategoryTypes;
  /** The version of the product. */
  @Deprecated public java.lang.CharSequence versionNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Product() {}

  /**
   * All-args constructor.
   * @param businessLineTypeCode The new value for businessLineTypeCode
   * @param categoryType The new value for categoryType
   * @param healthCoverageType The new value for healthCoverageType
   * @param name The new value for name
   * @param productCode The new value for productCode
   * @param serviceType The new value for serviceType
   * @param subCategoryTypes Defines the subcategory types for a Product.
   * @param versionNumber The version of the product.
   */
  public Product(java.lang.CharSequence businessLineTypeCode, com.uhc.schema.model.eligibility.common.DescriptionType categoryType, com.uhc.schema.model.eligibility.common.DescriptionType healthCoverageType, java.lang.CharSequence name, java.lang.CharSequence productCode, com.uhc.schema.model.eligibility.common.DescriptionType serviceType, java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> subCategoryTypes, java.lang.CharSequence versionNumber) {
    this.businessLineTypeCode = businessLineTypeCode;
    this.categoryType = categoryType;
    this.healthCoverageType = healthCoverageType;
    this.name = name;
    this.productCode = productCode;
    this.serviceType = serviceType;
    this.subCategoryTypes = subCategoryTypes;
    this.versionNumber = versionNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return businessLineTypeCode;
    case 1: return categoryType;
    case 2: return healthCoverageType;
    case 3: return name;
    case 4: return productCode;
    case 5: return serviceType;
    case 6: return subCategoryTypes;
    case 7: return versionNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: businessLineTypeCode = (java.lang.CharSequence)value$; break;
    case 1: categoryType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 2: healthCoverageType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: productCode = (java.lang.CharSequence)value$; break;
    case 5: serviceType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 6: subCategoryTypes = (java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType>)value$; break;
    case 7: versionNumber = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'businessLineTypeCode' field.
   * @return The value of the 'businessLineTypeCode' field.
   */
  public java.lang.CharSequence getBusinessLineTypeCode() {
    return businessLineTypeCode;
  }

  /**
   * Sets the value of the 'businessLineTypeCode' field.
   * @param value the value to set.
   */
  public void setBusinessLineTypeCode(java.lang.CharSequence value) {
    this.businessLineTypeCode = value;
  }

  /**
   * Gets the value of the 'categoryType' field.
   * @return The value of the 'categoryType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getCategoryType() {
    return categoryType;
  }

  /**
   * Sets the value of the 'categoryType' field.
   * @param value the value to set.
   */
  public void setCategoryType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.categoryType = value;
  }

  /**
   * Gets the value of the 'healthCoverageType' field.
   * @return The value of the 'healthCoverageType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getHealthCoverageType() {
    return healthCoverageType;
  }

  /**
   * Sets the value of the 'healthCoverageType' field.
   * @param value the value to set.
   */
  public void setHealthCoverageType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.healthCoverageType = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'productCode' field.
   * @return The value of the 'productCode' field.
   */
  public java.lang.CharSequence getProductCode() {
    return productCode;
  }

  /**
   * Sets the value of the 'productCode' field.
   * @param value the value to set.
   */
  public void setProductCode(java.lang.CharSequence value) {
    this.productCode = value;
  }

  /**
   * Gets the value of the 'serviceType' field.
   * @return The value of the 'serviceType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getServiceType() {
    return serviceType;
  }

  /**
   * Sets the value of the 'serviceType' field.
   * @param value the value to set.
   */
  public void setServiceType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.serviceType = value;
  }

  /**
   * Gets the value of the 'subCategoryTypes' field.
   * @return Defines the subcategory types for a Product.
   */
  public java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> getSubCategoryTypes() {
    return subCategoryTypes;
  }

  /**
   * Sets the value of the 'subCategoryTypes' field.
   * Defines the subcategory types for a Product.
   * @param value the value to set.
   */
  public void setSubCategoryTypes(java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> value) {
    this.subCategoryTypes = value;
  }

  /**
   * Gets the value of the 'versionNumber' field.
   * @return The version of the product.
   */
  public java.lang.CharSequence getVersionNumber() {
    return versionNumber;
  }

  /**
   * Sets the value of the 'versionNumber' field.
   * The version of the product.
   * @param value the value to set.
   */
  public void setVersionNumber(java.lang.CharSequence value) {
    this.versionNumber = value;
  }

  /**
   * Creates a new Product RecordBuilder.
   * @return A new Product RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Product.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.Product.Builder();
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Product RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Product.Builder newBuilder(com.uhc.schema.model.eligibility.Product.Builder other) {
    return new com.uhc.schema.model.eligibility.Product.Builder(other);
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Product instance.
   * @param other The existing instance to copy.
   * @return A new Product RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Product.Builder newBuilder(com.uhc.schema.model.eligibility.Product other) {
    return new com.uhc.schema.model.eligibility.Product.Builder(other);
  }

  /**
   * RecordBuilder for Product instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Product>
    implements org.apache.avro.data.RecordBuilder<Product> {

    private java.lang.CharSequence businessLineTypeCode;
    private com.uhc.schema.model.eligibility.common.DescriptionType categoryType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder categoryTypeBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType healthCoverageType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder healthCoverageTypeBuilder;
    private java.lang.CharSequence name;
    private java.lang.CharSequence productCode;
    private com.uhc.schema.model.eligibility.common.DescriptionType serviceType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder serviceTypeBuilder;
    /** Defines the subcategory types for a Product. */
    private java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> subCategoryTypes;
    /** The version of the product. */
    private java.lang.CharSequence versionNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.Product.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.businessLineTypeCode)) {
        this.businessLineTypeCode = data().deepCopy(fields()[0].schema(), other.businessLineTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.categoryType)) {
        this.categoryType = data().deepCopy(fields()[1].schema(), other.categoryType);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCategoryTypeBuilder()) {
        this.categoryTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getCategoryTypeBuilder());
      }
      if (isValidValue(fields()[2], other.healthCoverageType)) {
        this.healthCoverageType = data().deepCopy(fields()[2].schema(), other.healthCoverageType);
        fieldSetFlags()[2] = true;
      }
      if (other.hasHealthCoverageTypeBuilder()) {
        this.healthCoverageTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getHealthCoverageTypeBuilder());
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productCode)) {
        this.productCode = data().deepCopy(fields()[4].schema(), other.productCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serviceType)) {
        this.serviceType = data().deepCopy(fields()[5].schema(), other.serviceType);
        fieldSetFlags()[5] = true;
      }
      if (other.hasServiceTypeBuilder()) {
        this.serviceTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getServiceTypeBuilder());
      }
      if (isValidValue(fields()[6], other.subCategoryTypes)) {
        this.subCategoryTypes = data().deepCopy(fields()[6].schema(), other.subCategoryTypes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.versionNumber)) {
        this.versionNumber = data().deepCopy(fields()[7].schema(), other.versionNumber);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Product instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.Product other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.businessLineTypeCode)) {
        this.businessLineTypeCode = data().deepCopy(fields()[0].schema(), other.businessLineTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.categoryType)) {
        this.categoryType = data().deepCopy(fields()[1].schema(), other.categoryType);
        fieldSetFlags()[1] = true;
      }
      this.categoryTypeBuilder = null;
      if (isValidValue(fields()[2], other.healthCoverageType)) {
        this.healthCoverageType = data().deepCopy(fields()[2].schema(), other.healthCoverageType);
        fieldSetFlags()[2] = true;
      }
      this.healthCoverageTypeBuilder = null;
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productCode)) {
        this.productCode = data().deepCopy(fields()[4].schema(), other.productCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serviceType)) {
        this.serviceType = data().deepCopy(fields()[5].schema(), other.serviceType);
        fieldSetFlags()[5] = true;
      }
      this.serviceTypeBuilder = null;
      if (isValidValue(fields()[6], other.subCategoryTypes)) {
        this.subCategoryTypes = data().deepCopy(fields()[6].schema(), other.subCategoryTypes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.versionNumber)) {
        this.versionNumber = data().deepCopy(fields()[7].schema(), other.versionNumber);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'businessLineTypeCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getBusinessLineTypeCode() {
      return businessLineTypeCode;
    }

    /**
      * Sets the value of the 'businessLineTypeCode' field.
      * @param value The value of 'businessLineTypeCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setBusinessLineTypeCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.businessLineTypeCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'businessLineTypeCode' field has been set.
      * @return True if the 'businessLineTypeCode' field has been set, false otherwise.
      */
    public boolean hasBusinessLineTypeCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'businessLineTypeCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearBusinessLineTypeCode() {
      businessLineTypeCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'categoryType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getCategoryType() {
      return categoryType;
    }

    /**
      * Sets the value of the 'categoryType' field.
      * @param value The value of 'categoryType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setCategoryType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[1], value);
      this.categoryTypeBuilder = null;
      this.categoryType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'categoryType' field has been set.
      * @return True if the 'categoryType' field has been set, false otherwise.
      */
    public boolean hasCategoryType() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'categoryType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getCategoryTypeBuilder() {
      if (categoryTypeBuilder == null) {
        if (hasCategoryType()) {
          setCategoryTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(categoryType));
        } else {
          setCategoryTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return categoryTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'categoryType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Product.Builder setCategoryTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearCategoryType();
      categoryTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'categoryType' field has an active Builder instance
     * @return True if the 'categoryType' field has an active Builder instance
     */
    public boolean hasCategoryTypeBuilder() {
      return categoryTypeBuilder != null;
    }

    /**
      * Clears the value of the 'categoryType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearCategoryType() {
      categoryType = null;
      categoryTypeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'healthCoverageType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getHealthCoverageType() {
      return healthCoverageType;
    }

    /**
      * Sets the value of the 'healthCoverageType' field.
      * @param value The value of 'healthCoverageType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setHealthCoverageType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[2], value);
      this.healthCoverageTypeBuilder = null;
      this.healthCoverageType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'healthCoverageType' field has been set.
      * @return True if the 'healthCoverageType' field has been set, false otherwise.
      */
    public boolean hasHealthCoverageType() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'healthCoverageType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getHealthCoverageTypeBuilder() {
      if (healthCoverageTypeBuilder == null) {
        if (hasHealthCoverageType()) {
          setHealthCoverageTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(healthCoverageType));
        } else {
          setHealthCoverageTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return healthCoverageTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'healthCoverageType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Product.Builder setHealthCoverageTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearHealthCoverageType();
      healthCoverageTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'healthCoverageType' field has an active Builder instance
     * @return True if the 'healthCoverageType' field has an active Builder instance
     */
    public boolean hasHealthCoverageTypeBuilder() {
      return healthCoverageTypeBuilder != null;
    }

    /**
      * Clears the value of the 'healthCoverageType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearHealthCoverageType() {
      healthCoverageType = null;
      healthCoverageTypeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductCode() {
      return productCode;
    }

    /**
      * Sets the value of the 'productCode' field.
      * @param value The value of 'productCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setProductCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.productCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productCode' field has been set.
      * @return True if the 'productCode' field has been set, false otherwise.
      */
    public boolean hasProductCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearProductCode() {
      productCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getServiceType() {
      return serviceType;
    }

    /**
      * Sets the value of the 'serviceType' field.
      * @param value The value of 'serviceType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setServiceType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[5], value);
      this.serviceTypeBuilder = null;
      this.serviceType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceType' field has been set.
      * @return True if the 'serviceType' field has been set, false otherwise.
      */
    public boolean hasServiceType() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'serviceType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getServiceTypeBuilder() {
      if (serviceTypeBuilder == null) {
        if (hasServiceType()) {
          setServiceTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(serviceType));
        } else {
          setServiceTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return serviceTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'serviceType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Product.Builder setServiceTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearServiceType();
      serviceTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'serviceType' field has an active Builder instance
     * @return True if the 'serviceType' field has an active Builder instance
     */
    public boolean hasServiceTypeBuilder() {
      return serviceTypeBuilder != null;
    }

    /**
      * Clears the value of the 'serviceType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearServiceType() {
      serviceType = null;
      serviceTypeBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'subCategoryTypes' field.
      * Defines the subcategory types for a Product.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> getSubCategoryTypes() {
      return subCategoryTypes;
    }

    /**
      * Sets the value of the 'subCategoryTypes' field.
      * Defines the subcategory types for a Product.
      * @param value The value of 'subCategoryTypes'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setSubCategoryTypes(java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType> value) {
      validate(fields()[6], value);
      this.subCategoryTypes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'subCategoryTypes' field has been set.
      * Defines the subcategory types for a Product.
      * @return True if the 'subCategoryTypes' field has been set, false otherwise.
      */
    public boolean hasSubCategoryTypes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'subCategoryTypes' field.
      * Defines the subcategory types for a Product.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearSubCategoryTypes() {
      subCategoryTypes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'versionNumber' field.
      * The version of the product.
      * @return The value.
      */
    public java.lang.CharSequence getVersionNumber() {
      return versionNumber;
    }

    /**
      * Sets the value of the 'versionNumber' field.
      * The version of the product.
      * @param value The value of 'versionNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder setVersionNumber(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.versionNumber = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'versionNumber' field has been set.
      * The version of the product.
      * @return True if the 'versionNumber' field has been set, false otherwise.
      */
    public boolean hasVersionNumber() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'versionNumber' field.
      * The version of the product.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Product.Builder clearVersionNumber() {
      versionNumber = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Product build() {
      try {
        Product record = new Product();
        record.businessLineTypeCode = fieldSetFlags()[0] ? this.businessLineTypeCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (categoryTypeBuilder != null) {
          record.categoryType = this.categoryTypeBuilder.build();
        } else {
          record.categoryType = fieldSetFlags()[1] ? this.categoryType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[1]);
        }
        if (healthCoverageTypeBuilder != null) {
          record.healthCoverageType = this.healthCoverageTypeBuilder.build();
        } else {
          record.healthCoverageType = fieldSetFlags()[2] ? this.healthCoverageType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[2]);
        }
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.productCode = fieldSetFlags()[4] ? this.productCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (serviceTypeBuilder != null) {
          record.serviceType = this.serviceTypeBuilder.build();
        } else {
          record.serviceType = fieldSetFlags()[5] ? this.serviceType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[5]);
        }
        record.subCategoryTypes = fieldSetFlags()[6] ? this.subCategoryTypes : (java.util.List<com.uhc.schema.model.eligibility.common.DescriptionType>) defaultValue(fields()[6]);
        record.versionNumber = fieldSetFlags()[7] ? this.versionNumber : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Product>
    WRITER$ = (org.apache.avro.io.DatumWriter<Product>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Product>
    READER$ = (org.apache.avro.io.DatumReader<Product>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
