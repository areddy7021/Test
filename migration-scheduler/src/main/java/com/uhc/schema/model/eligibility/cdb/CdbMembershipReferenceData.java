/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.cdb;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CdbMembershipReferenceData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8814075365492749018L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CdbMembershipReferenceData\",\"namespace\":\"com.uhc.schema.model.eligibility.cdb\",\"fields\":[{\"name\":\"coverageLevelTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"coveragePaidThruReasonCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"coverageTypeCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"healthServiceProductCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"healthServiceProductLineCode\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CdbMembershipReferenceData> ENCODER =
      new BinaryMessageEncoder<CdbMembershipReferenceData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CdbMembershipReferenceData> DECODER =
      new BinaryMessageDecoder<CdbMembershipReferenceData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CdbMembershipReferenceData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CdbMembershipReferenceData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CdbMembershipReferenceData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CdbMembershipReferenceData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CdbMembershipReferenceData from a ByteBuffer. */
  public static CdbMembershipReferenceData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence coverageLevelTypeCode;
  @Deprecated public java.lang.CharSequence coveragePaidThruReasonCode;
  @Deprecated public java.lang.CharSequence coverageTypeCode;
  @Deprecated public java.lang.CharSequence healthServiceProductCode;
  @Deprecated public java.lang.CharSequence healthServiceProductLineCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CdbMembershipReferenceData() {}

  /**
   * All-args constructor.
   * @param coverageLevelTypeCode The new value for coverageLevelTypeCode
   * @param coveragePaidThruReasonCode The new value for coveragePaidThruReasonCode
   * @param coverageTypeCode The new value for coverageTypeCode
   * @param healthServiceProductCode The new value for healthServiceProductCode
   * @param healthServiceProductLineCode The new value for healthServiceProductLineCode
   */
  public CdbMembershipReferenceData(java.lang.CharSequence coverageLevelTypeCode, java.lang.CharSequence coveragePaidThruReasonCode, java.lang.CharSequence coverageTypeCode, java.lang.CharSequence healthServiceProductCode, java.lang.CharSequence healthServiceProductLineCode) {
    this.coverageLevelTypeCode = coverageLevelTypeCode;
    this.coveragePaidThruReasonCode = coveragePaidThruReasonCode;
    this.coverageTypeCode = coverageTypeCode;
    this.healthServiceProductCode = healthServiceProductCode;
    this.healthServiceProductLineCode = healthServiceProductLineCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return coverageLevelTypeCode;
    case 1: return coveragePaidThruReasonCode;
    case 2: return coverageTypeCode;
    case 3: return healthServiceProductCode;
    case 4: return healthServiceProductLineCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: coverageLevelTypeCode = (java.lang.CharSequence)value$; break;
    case 1: coveragePaidThruReasonCode = (java.lang.CharSequence)value$; break;
    case 2: coverageTypeCode = (java.lang.CharSequence)value$; break;
    case 3: healthServiceProductCode = (java.lang.CharSequence)value$; break;
    case 4: healthServiceProductLineCode = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'coverageLevelTypeCode' field.
   * @return The value of the 'coverageLevelTypeCode' field.
   */
  public java.lang.CharSequence getCoverageLevelTypeCode() {
    return coverageLevelTypeCode;
  }

  /**
   * Sets the value of the 'coverageLevelTypeCode' field.
   * @param value the value to set.
   */
  public void setCoverageLevelTypeCode(java.lang.CharSequence value) {
    this.coverageLevelTypeCode = value;
  }

  /**
   * Gets the value of the 'coveragePaidThruReasonCode' field.
   * @return The value of the 'coveragePaidThruReasonCode' field.
   */
  public java.lang.CharSequence getCoveragePaidThruReasonCode() {
    return coveragePaidThruReasonCode;
  }

  /**
   * Sets the value of the 'coveragePaidThruReasonCode' field.
   * @param value the value to set.
   */
  public void setCoveragePaidThruReasonCode(java.lang.CharSequence value) {
    this.coveragePaidThruReasonCode = value;
  }

  /**
   * Gets the value of the 'coverageTypeCode' field.
   * @return The value of the 'coverageTypeCode' field.
   */
  public java.lang.CharSequence getCoverageTypeCode() {
    return coverageTypeCode;
  }

  /**
   * Sets the value of the 'coverageTypeCode' field.
   * @param value the value to set.
   */
  public void setCoverageTypeCode(java.lang.CharSequence value) {
    this.coverageTypeCode = value;
  }

  /**
   * Gets the value of the 'healthServiceProductCode' field.
   * @return The value of the 'healthServiceProductCode' field.
   */
  public java.lang.CharSequence getHealthServiceProductCode() {
    return healthServiceProductCode;
  }

  /**
   * Sets the value of the 'healthServiceProductCode' field.
   * @param value the value to set.
   */
  public void setHealthServiceProductCode(java.lang.CharSequence value) {
    this.healthServiceProductCode = value;
  }

  /**
   * Gets the value of the 'healthServiceProductLineCode' field.
   * @return The value of the 'healthServiceProductLineCode' field.
   */
  public java.lang.CharSequence getHealthServiceProductLineCode() {
    return healthServiceProductLineCode;
  }

  /**
   * Sets the value of the 'healthServiceProductLineCode' field.
   * @param value the value to set.
   */
  public void setHealthServiceProductLineCode(java.lang.CharSequence value) {
    this.healthServiceProductLineCode = value;
  }

  /**
   * Creates a new CdbMembershipReferenceData RecordBuilder.
   * @return A new CdbMembershipReferenceData RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder();
  }

  /**
   * Creates a new CdbMembershipReferenceData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CdbMembershipReferenceData RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder newBuilder(com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder other) {
    return new com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder(other);
  }

  /**
   * Creates a new CdbMembershipReferenceData RecordBuilder by copying an existing CdbMembershipReferenceData instance.
   * @param other The existing instance to copy.
   * @return A new CdbMembershipReferenceData RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder newBuilder(com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData other) {
    return new com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder(other);
  }

  /**
   * RecordBuilder for CdbMembershipReferenceData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CdbMembershipReferenceData>
    implements org.apache.avro.data.RecordBuilder<CdbMembershipReferenceData> {

    private java.lang.CharSequence coverageLevelTypeCode;
    private java.lang.CharSequence coveragePaidThruReasonCode;
    private java.lang.CharSequence coverageTypeCode;
    private java.lang.CharSequence healthServiceProductCode;
    private java.lang.CharSequence healthServiceProductLineCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.coverageLevelTypeCode)) {
        this.coverageLevelTypeCode = data().deepCopy(fields()[0].schema(), other.coverageLevelTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coveragePaidThruReasonCode)) {
        this.coveragePaidThruReasonCode = data().deepCopy(fields()[1].schema(), other.coveragePaidThruReasonCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coverageTypeCode)) {
        this.coverageTypeCode = data().deepCopy(fields()[2].schema(), other.coverageTypeCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.healthServiceProductCode)) {
        this.healthServiceProductCode = data().deepCopy(fields()[3].schema(), other.healthServiceProductCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.healthServiceProductLineCode)) {
        this.healthServiceProductLineCode = data().deepCopy(fields()[4].schema(), other.healthServiceProductLineCode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CdbMembershipReferenceData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.coverageLevelTypeCode)) {
        this.coverageLevelTypeCode = data().deepCopy(fields()[0].schema(), other.coverageLevelTypeCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coveragePaidThruReasonCode)) {
        this.coveragePaidThruReasonCode = data().deepCopy(fields()[1].schema(), other.coveragePaidThruReasonCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coverageTypeCode)) {
        this.coverageTypeCode = data().deepCopy(fields()[2].schema(), other.coverageTypeCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.healthServiceProductCode)) {
        this.healthServiceProductCode = data().deepCopy(fields()[3].schema(), other.healthServiceProductCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.healthServiceProductLineCode)) {
        this.healthServiceProductLineCode = data().deepCopy(fields()[4].schema(), other.healthServiceProductLineCode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'coverageLevelTypeCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCoverageLevelTypeCode() {
      return coverageLevelTypeCode;
    }

    /**
      * Sets the value of the 'coverageLevelTypeCode' field.
      * @param value The value of 'coverageLevelTypeCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder setCoverageLevelTypeCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.coverageLevelTypeCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'coverageLevelTypeCode' field has been set.
      * @return True if the 'coverageLevelTypeCode' field has been set, false otherwise.
      */
    public boolean hasCoverageLevelTypeCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'coverageLevelTypeCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder clearCoverageLevelTypeCode() {
      coverageLevelTypeCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'coveragePaidThruReasonCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCoveragePaidThruReasonCode() {
      return coveragePaidThruReasonCode;
    }

    /**
      * Sets the value of the 'coveragePaidThruReasonCode' field.
      * @param value The value of 'coveragePaidThruReasonCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder setCoveragePaidThruReasonCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.coveragePaidThruReasonCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'coveragePaidThruReasonCode' field has been set.
      * @return True if the 'coveragePaidThruReasonCode' field has been set, false otherwise.
      */
    public boolean hasCoveragePaidThruReasonCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'coveragePaidThruReasonCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder clearCoveragePaidThruReasonCode() {
      coveragePaidThruReasonCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverageTypeCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCoverageTypeCode() {
      return coverageTypeCode;
    }

    /**
      * Sets the value of the 'coverageTypeCode' field.
      * @param value The value of 'coverageTypeCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder setCoverageTypeCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.coverageTypeCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'coverageTypeCode' field has been set.
      * @return True if the 'coverageTypeCode' field has been set, false otherwise.
      */
    public boolean hasCoverageTypeCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'coverageTypeCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder clearCoverageTypeCode() {
      coverageTypeCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'healthServiceProductCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getHealthServiceProductCode() {
      return healthServiceProductCode;
    }

    /**
      * Sets the value of the 'healthServiceProductCode' field.
      * @param value The value of 'healthServiceProductCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder setHealthServiceProductCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.healthServiceProductCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'healthServiceProductCode' field has been set.
      * @return True if the 'healthServiceProductCode' field has been set, false otherwise.
      */
    public boolean hasHealthServiceProductCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'healthServiceProductCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder clearHealthServiceProductCode() {
      healthServiceProductCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'healthServiceProductLineCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getHealthServiceProductLineCode() {
      return healthServiceProductLineCode;
    }

    /**
      * Sets the value of the 'healthServiceProductLineCode' field.
      * @param value The value of 'healthServiceProductLineCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder setHealthServiceProductLineCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.healthServiceProductLineCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'healthServiceProductLineCode' field has been set.
      * @return True if the 'healthServiceProductLineCode' field has been set, false otherwise.
      */
    public boolean hasHealthServiceProductLineCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'healthServiceProductLineCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.cdb.CdbMembershipReferenceData.Builder clearHealthServiceProductLineCode() {
      healthServiceProductLineCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CdbMembershipReferenceData build() {
      try {
        CdbMembershipReferenceData record = new CdbMembershipReferenceData();
        record.coverageLevelTypeCode = fieldSetFlags()[0] ? this.coverageLevelTypeCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.coveragePaidThruReasonCode = fieldSetFlags()[1] ? this.coveragePaidThruReasonCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.coverageTypeCode = fieldSetFlags()[2] ? this.coverageTypeCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.healthServiceProductCode = fieldSetFlags()[3] ? this.healthServiceProductCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.healthServiceProductLineCode = fieldSetFlags()[4] ? this.healthServiceProductLineCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CdbMembershipReferenceData>
    WRITER$ = (org.apache.avro.io.DatumWriter<CdbMembershipReferenceData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CdbMembershipReferenceData>
    READER$ = (org.apache.avro.io.DatumReader<CdbMembershipReferenceData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
