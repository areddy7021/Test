/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.common;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Security extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5644451462441404911L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Security\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"securitySourceSystemCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"securityPermission\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SecurityPermission\",\"fields\":[{\"name\":\"securityPermissionValue\",\"type\":[\"null\",\"string\"],\"doc\":\"A security attribute identifying the secure class under which the record instance is administered.\",\"default\":null}]}}],\"doc\":\"Superset of Security permissions\",\"default\":null},{\"name\":\"securityPermissionAny\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"SecurityPermission\"}],\"doc\":\"Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Security> ENCODER =
      new BinaryMessageEncoder<Security>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Security> DECODER =
      new BinaryMessageDecoder<Security>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Security> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Security> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Security>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Security to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Security from a ByteBuffer. */
  public static Security fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence securitySourceSystemCode;
  /** Superset of Security permissions */
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> securityPermission;
  /** Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present. */
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> securityPermissionAny;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Security() {}

  /**
   * All-args constructor.
   * @param securitySourceSystemCode The new value for securitySourceSystemCode
   * @param securityPermission Superset of Security permissions
   * @param securityPermissionAny Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
   */
  public Security(java.lang.CharSequence securitySourceSystemCode, java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> securityPermission, java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> securityPermissionAny) {
    this.securitySourceSystemCode = securitySourceSystemCode;
    this.securityPermission = securityPermission;
    this.securityPermissionAny = securityPermissionAny;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return securitySourceSystemCode;
    case 1: return securityPermission;
    case 2: return securityPermissionAny;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: securitySourceSystemCode = (java.lang.CharSequence)value$; break;
    case 1: securityPermission = (java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission>)value$; break;
    case 2: securityPermissionAny = (java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'securitySourceSystemCode' field.
   * @return The value of the 'securitySourceSystemCode' field.
   */
  public java.lang.CharSequence getSecuritySourceSystemCode() {
    return securitySourceSystemCode;
  }

  /**
   * Sets the value of the 'securitySourceSystemCode' field.
   * @param value the value to set.
   */
  public void setSecuritySourceSystemCode(java.lang.CharSequence value) {
    this.securitySourceSystemCode = value;
  }

  /**
   * Gets the value of the 'securityPermission' field.
   * @return Superset of Security permissions
   */
  public java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> getSecurityPermission() {
    return securityPermission;
  }

  /**
   * Sets the value of the 'securityPermission' field.
   * Superset of Security permissions
   * @param value the value to set.
   */
  public void setSecurityPermission(java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> value) {
    this.securityPermission = value;
  }

  /**
   * Gets the value of the 'securityPermissionAny' field.
   * @return Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
   */
  public java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> getSecurityPermissionAny() {
    return securityPermissionAny;
  }

  /**
   * Sets the value of the 'securityPermissionAny' field.
   * Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
   * @param value the value to set.
   */
  public void setSecurityPermissionAny(java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> value) {
    this.securityPermissionAny = value;
  }

  /**
   * Creates a new Security RecordBuilder.
   * @return A new Security RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.Security.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.common.Security.Builder();
  }

  /**
   * Creates a new Security RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Security RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.Security.Builder newBuilder(com.uhc.schema.model.eligibility.common.Security.Builder other) {
    return new com.uhc.schema.model.eligibility.common.Security.Builder(other);
  }

  /**
   * Creates a new Security RecordBuilder by copying an existing Security instance.
   * @param other The existing instance to copy.
   * @return A new Security RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.Security.Builder newBuilder(com.uhc.schema.model.eligibility.common.Security other) {
    return new com.uhc.schema.model.eligibility.common.Security.Builder(other);
  }

  /**
   * RecordBuilder for Security instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Security>
    implements org.apache.avro.data.RecordBuilder<Security> {

    private java.lang.CharSequence securitySourceSystemCode;
    /** Superset of Security permissions */
    private java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> securityPermission;
    /** Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present. */
    private java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> securityPermissionAny;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.common.Security.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.securitySourceSystemCode)) {
        this.securitySourceSystemCode = data().deepCopy(fields()[0].schema(), other.securitySourceSystemCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.securityPermission)) {
        this.securityPermission = data().deepCopy(fields()[1].schema(), other.securityPermission);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.securityPermissionAny)) {
        this.securityPermissionAny = data().deepCopy(fields()[2].schema(), other.securityPermissionAny);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Security instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.common.Security other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.securitySourceSystemCode)) {
        this.securitySourceSystemCode = data().deepCopy(fields()[0].schema(), other.securitySourceSystemCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.securityPermission)) {
        this.securityPermission = data().deepCopy(fields()[1].schema(), other.securityPermission);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.securityPermissionAny)) {
        this.securityPermissionAny = data().deepCopy(fields()[2].schema(), other.securityPermissionAny);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'securitySourceSystemCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSecuritySourceSystemCode() {
      return securitySourceSystemCode;
    }

    /**
      * Sets the value of the 'securitySourceSystemCode' field.
      * @param value The value of 'securitySourceSystemCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.Security.Builder setSecuritySourceSystemCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.securitySourceSystemCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'securitySourceSystemCode' field has been set.
      * @return True if the 'securitySourceSystemCode' field has been set, false otherwise.
      */
    public boolean hasSecuritySourceSystemCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'securitySourceSystemCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.Security.Builder clearSecuritySourceSystemCode() {
      securitySourceSystemCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'securityPermission' field.
      * Superset of Security permissions
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> getSecurityPermission() {
      return securityPermission;
    }

    /**
      * Sets the value of the 'securityPermission' field.
      * Superset of Security permissions
      * @param value The value of 'securityPermission'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.Security.Builder setSecurityPermission(java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> value) {
      validate(fields()[1], value);
      this.securityPermission = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'securityPermission' field has been set.
      * Superset of Security permissions
      * @return True if the 'securityPermission' field has been set, false otherwise.
      */
    public boolean hasSecurityPermission() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'securityPermission' field.
      * Superset of Security permissions
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.Security.Builder clearSecurityPermission() {
      securityPermission = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'securityPermissionAny' field.
      * Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> getSecurityPermissionAny() {
      return securityPermissionAny;
    }

    /**
      * Sets the value of the 'securityPermissionAny' field.
      * Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
      * @param value The value of 'securityPermissionAny'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.Security.Builder setSecurityPermissionAny(java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission> value) {
      validate(fields()[2], value);
      this.securityPermissionAny = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'securityPermissionAny' field has been set.
      * Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
      * @return True if the 'securityPermissionAny' field has been set, false otherwise.
      */
    public boolean hasSecurityPermissionAny() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'securityPermissionAny' field.
      * Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.Security.Builder clearSecurityPermissionAny() {
      securityPermissionAny = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Security build() {
      try {
        Security record = new Security();
        record.securitySourceSystemCode = fieldSetFlags()[0] ? this.securitySourceSystemCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.securityPermission = fieldSetFlags()[1] ? this.securityPermission : (java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission>) defaultValue(fields()[1]);
        record.securityPermissionAny = fieldSetFlags()[2] ? this.securityPermissionAny : (java.util.List<com.uhc.schema.model.eligibility.common.SecurityPermission>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Security>
    WRITER$ = (org.apache.avro.io.DatumWriter<Security>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Security>
    READER$ = (org.apache.avro.io.DatumReader<Security>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
