/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HoldReasonRestriction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6891497428857335544L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HoldReasonRestriction\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"restrictionIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"A boolean value indication whether the restriction is true or false.\",\"default\":null},{\"name\":\"restrictionType\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.\",\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HoldReasonRestriction> ENCODER =
      new BinaryMessageEncoder<HoldReasonRestriction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HoldReasonRestriction> DECODER =
      new BinaryMessageDecoder<HoldReasonRestriction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<HoldReasonRestriction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<HoldReasonRestriction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HoldReasonRestriction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this HoldReasonRestriction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a HoldReasonRestriction from a ByteBuffer. */
  public static HoldReasonRestriction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** A boolean value indication whether the restriction is true or false. */
  @Deprecated public java.lang.CharSequence restrictionIndicator;
  /** The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing. */
  @Deprecated public java.lang.CharSequence restrictionType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HoldReasonRestriction() {}

  /**
   * All-args constructor.
   * @param restrictionIndicator A boolean value indication whether the restriction is true or false.
   * @param restrictionType The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
   */
  public HoldReasonRestriction(java.lang.CharSequence restrictionIndicator, java.lang.CharSequence restrictionType) {
    this.restrictionIndicator = restrictionIndicator;
    this.restrictionType = restrictionType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return restrictionIndicator;
    case 1: return restrictionType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: restrictionIndicator = (java.lang.CharSequence)value$; break;
    case 1: restrictionType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'restrictionIndicator' field.
   * @return A boolean value indication whether the restriction is true or false.
   */
  public java.lang.CharSequence getRestrictionIndicator() {
    return restrictionIndicator;
  }

  /**
   * Sets the value of the 'restrictionIndicator' field.
   * A boolean value indication whether the restriction is true or false.
   * @param value the value to set.
   */
  public void setRestrictionIndicator(java.lang.CharSequence value) {
    this.restrictionIndicator = value;
  }

  /**
   * Gets the value of the 'restrictionType' field.
   * @return The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
   */
  public java.lang.CharSequence getRestrictionType() {
    return restrictionType;
  }

  /**
   * Sets the value of the 'restrictionType' field.
   * The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
   * @param value the value to set.
   */
  public void setRestrictionType(java.lang.CharSequence value) {
    this.restrictionType = value;
  }

  /**
   * Creates a new HoldReasonRestriction RecordBuilder.
   * @return A new HoldReasonRestriction RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder();
  }

  /**
   * Creates a new HoldReasonRestriction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HoldReasonRestriction RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder newBuilder(com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder(other);
  }

  /**
   * Creates a new HoldReasonRestriction RecordBuilder by copying an existing HoldReasonRestriction instance.
   * @param other The existing instance to copy.
   * @return A new HoldReasonRestriction RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder newBuilder(com.uhc.schema.model.eligibility.membership.HoldReasonRestriction other) {
    return new com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder(other);
  }

  /**
   * RecordBuilder for HoldReasonRestriction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HoldReasonRestriction>
    implements org.apache.avro.data.RecordBuilder<HoldReasonRestriction> {

    /** A boolean value indication whether the restriction is true or false. */
    private java.lang.CharSequence restrictionIndicator;
    /** The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing. */
    private java.lang.CharSequence restrictionType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.restrictionIndicator)) {
        this.restrictionIndicator = data().deepCopy(fields()[0].schema(), other.restrictionIndicator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.restrictionType)) {
        this.restrictionType = data().deepCopy(fields()[1].schema(), other.restrictionType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HoldReasonRestriction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.HoldReasonRestriction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.restrictionIndicator)) {
        this.restrictionIndicator = data().deepCopy(fields()[0].schema(), other.restrictionIndicator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.restrictionType)) {
        this.restrictionType = data().deepCopy(fields()[1].schema(), other.restrictionType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'restrictionIndicator' field.
      * A boolean value indication whether the restriction is true or false.
      * @return The value.
      */
    public java.lang.CharSequence getRestrictionIndicator() {
      return restrictionIndicator;
    }

    /**
      * Sets the value of the 'restrictionIndicator' field.
      * A boolean value indication whether the restriction is true or false.
      * @param value The value of 'restrictionIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder setRestrictionIndicator(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.restrictionIndicator = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'restrictionIndicator' field has been set.
      * A boolean value indication whether the restriction is true or false.
      * @return True if the 'restrictionIndicator' field has been set, false otherwise.
      */
    public boolean hasRestrictionIndicator() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'restrictionIndicator' field.
      * A boolean value indication whether the restriction is true or false.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder clearRestrictionIndicator() {
      restrictionIndicator = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'restrictionType' field.
      * The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
      * @return The value.
      */
    public java.lang.CharSequence getRestrictionType() {
      return restrictionType;
    }

    /**
      * Sets the value of the 'restrictionType' field.
      * The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
      * @param value The value of 'restrictionType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder setRestrictionType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.restrictionType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'restrictionType' field has been set.
      * The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
      * @return True if the 'restrictionType' field has been set, false otherwise.
      */
    public boolean hasRestrictionType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'restrictionType' field.
      * The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReasonRestriction.Builder clearRestrictionType() {
      restrictionType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HoldReasonRestriction build() {
      try {
        HoldReasonRestriction record = new HoldReasonRestriction();
        record.restrictionIndicator = fieldSetFlags()[0] ? this.restrictionIndicator : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.restrictionType = fieldSetFlags()[1] ? this.restrictionType : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HoldReasonRestriction>
    WRITER$ = (org.apache.avro.io.DatumWriter<HoldReasonRestriction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HoldReasonRestriction>
    READER$ = (org.apache.avro.io.DatumReader<HoldReasonRestriction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
