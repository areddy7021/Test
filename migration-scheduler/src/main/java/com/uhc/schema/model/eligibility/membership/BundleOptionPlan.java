/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BundleOptionPlan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7537209241593229064L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BundleOptionPlan\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"bundleOptionPlanType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Code and description for the bundle option plan type. E.g., Utilization, Service.\",\"default\":null},{\"name\":\"designatedVirtualClinicNetworkIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the plan is in a designated virtual clinic network.\",\"default\":null},{\"name\":\"pcpRequiredIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if a Primary Care Physician selection in required.\",\"default\":null},{\"name\":\"planCategory\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"A categorization for a plan.\",\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"doc\":\"The identifier for a plan.\",\"default\":null},{\"name\":\"planExternalIdentifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanExternalIdentifier\",\"fields\":[{\"name\":\"externalEntityIdentifer\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the external entity.\",\"default\":null},{\"name\":\"externalPlanIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the external plan.\",\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the plan entity type.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"planFunctions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanFunction\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"planFunctionCode\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description for the plan function.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"planIncentives\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanIncentive\",\"fields\":[{\"name\":\"annualMaxRewardAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Maximun annual reward amount for the incentive.\",\"default\":null},{\"name\":\"dailyMaxRewardAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Maximum daily reward amount for the incentive.\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"incentiveCalculationBasis\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description describing the calculation basis for the incentive.\",\"default\":null},{\"name\":\"incentiveRewardMethod\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description describing the reward method for the incentive.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"planLanguageText\",\"type\":[\"null\",\"string\"],\"doc\":\"Text language for the plan.\",\"default\":null},{\"name\":\"planLongDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"Description for the plan.\",\"default\":null},{\"name\":\"planName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the plan.\",\"default\":null},{\"name\":\"planVendorCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Code for the plan vendor.\",\"default\":null},{\"name\":\"planVendorName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the plan vendor.\",\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BundleOptionPlan> ENCODER =
      new BinaryMessageEncoder<BundleOptionPlan>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BundleOptionPlan> DECODER =
      new BinaryMessageDecoder<BundleOptionPlan>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BundleOptionPlan> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BundleOptionPlan> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BundleOptionPlan>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BundleOptionPlan to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BundleOptionPlan from a ByteBuffer. */
  public static BundleOptionPlan fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Code and description for the bundle option plan type. E.g., Utilization, Service. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType bundleOptionPlanType;
  /** Indicates if the plan is in a designated virtual clinic network. */
  @Deprecated public java.lang.CharSequence designatedVirtualClinicNetworkIndicator;
  /** Indicates if a Primary Care Physician selection in required. */
  @Deprecated public java.lang.CharSequence pcpRequiredIndicator;
  /** A categorization for a plan. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType planCategory;
  /** The identifier for a plan. */
  @Deprecated public java.lang.CharSequence planCode;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> planExternalIdentifiers;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> planFunctions;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> planIncentives;
  /** Text language for the plan. */
  @Deprecated public java.lang.CharSequence planLanguageText;
  /** Description for the plan. */
  @Deprecated public java.lang.CharSequence planLongDescription;
  /** Name of the plan. */
  @Deprecated public java.lang.CharSequence planName;
  /** Code for the plan vendor. */
  @Deprecated public java.lang.CharSequence planVendorCode;
  /** Name of the plan vendor. */
  @Deprecated public java.lang.CharSequence planVendorName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BundleOptionPlan() {}

  /**
   * All-args constructor.
   * @param bundleOptionPlanType Code and description for the bundle option plan type. E.g., Utilization, Service.
   * @param designatedVirtualClinicNetworkIndicator Indicates if the plan is in a designated virtual clinic network.
   * @param pcpRequiredIndicator Indicates if a Primary Care Physician selection in required.
   * @param planCategory A categorization for a plan.
   * @param planCode The identifier for a plan.
   * @param planExternalIdentifiers The new value for planExternalIdentifiers
   * @param planFunctions The new value for planFunctions
   * @param planIncentives The new value for planIncentives
   * @param planLanguageText Text language for the plan.
   * @param planLongDescription Description for the plan.
   * @param planName Name of the plan.
   * @param planVendorCode Code for the plan vendor.
   * @param planVendorName Name of the plan vendor.
   */
  public BundleOptionPlan(com.uhc.schema.model.eligibility.common.DescriptionType bundleOptionPlanType, java.lang.CharSequence designatedVirtualClinicNetworkIndicator, java.lang.CharSequence pcpRequiredIndicator, com.uhc.schema.model.eligibility.common.DescriptionType planCategory, java.lang.CharSequence planCode, java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> planExternalIdentifiers, java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> planFunctions, java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> planIncentives, java.lang.CharSequence planLanguageText, java.lang.CharSequence planLongDescription, java.lang.CharSequence planName, java.lang.CharSequence planVendorCode, java.lang.CharSequence planVendorName) {
    this.bundleOptionPlanType = bundleOptionPlanType;
    this.designatedVirtualClinicNetworkIndicator = designatedVirtualClinicNetworkIndicator;
    this.pcpRequiredIndicator = pcpRequiredIndicator;
    this.planCategory = planCategory;
    this.planCode = planCode;
    this.planExternalIdentifiers = planExternalIdentifiers;
    this.planFunctions = planFunctions;
    this.planIncentives = planIncentives;
    this.planLanguageText = planLanguageText;
    this.planLongDescription = planLongDescription;
    this.planName = planName;
    this.planVendorCode = planVendorCode;
    this.planVendorName = planVendorName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bundleOptionPlanType;
    case 1: return designatedVirtualClinicNetworkIndicator;
    case 2: return pcpRequiredIndicator;
    case 3: return planCategory;
    case 4: return planCode;
    case 5: return planExternalIdentifiers;
    case 6: return planFunctions;
    case 7: return planIncentives;
    case 8: return planLanguageText;
    case 9: return planLongDescription;
    case 10: return planName;
    case 11: return planVendorCode;
    case 12: return planVendorName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bundleOptionPlanType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 1: designatedVirtualClinicNetworkIndicator = (java.lang.CharSequence)value$; break;
    case 2: pcpRequiredIndicator = (java.lang.CharSequence)value$; break;
    case 3: planCategory = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 4: planCode = (java.lang.CharSequence)value$; break;
    case 5: planExternalIdentifiers = (java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier>)value$; break;
    case 6: planFunctions = (java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction>)value$; break;
    case 7: planIncentives = (java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive>)value$; break;
    case 8: planLanguageText = (java.lang.CharSequence)value$; break;
    case 9: planLongDescription = (java.lang.CharSequence)value$; break;
    case 10: planName = (java.lang.CharSequence)value$; break;
    case 11: planVendorCode = (java.lang.CharSequence)value$; break;
    case 12: planVendorName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bundleOptionPlanType' field.
   * @return Code and description for the bundle option plan type. E.g., Utilization, Service.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getBundleOptionPlanType() {
    return bundleOptionPlanType;
  }

  /**
   * Sets the value of the 'bundleOptionPlanType' field.
   * Code and description for the bundle option plan type. E.g., Utilization, Service.
   * @param value the value to set.
   */
  public void setBundleOptionPlanType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.bundleOptionPlanType = value;
  }

  /**
   * Gets the value of the 'designatedVirtualClinicNetworkIndicator' field.
   * @return Indicates if the plan is in a designated virtual clinic network.
   */
  public java.lang.CharSequence getDesignatedVirtualClinicNetworkIndicator() {
    return designatedVirtualClinicNetworkIndicator;
  }

  /**
   * Sets the value of the 'designatedVirtualClinicNetworkIndicator' field.
   * Indicates if the plan is in a designated virtual clinic network.
   * @param value the value to set.
   */
  public void setDesignatedVirtualClinicNetworkIndicator(java.lang.CharSequence value) {
    this.designatedVirtualClinicNetworkIndicator = value;
  }

  /**
   * Gets the value of the 'pcpRequiredIndicator' field.
   * @return Indicates if a Primary Care Physician selection in required.
   */
  public java.lang.CharSequence getPcpRequiredIndicator() {
    return pcpRequiredIndicator;
  }

  /**
   * Sets the value of the 'pcpRequiredIndicator' field.
   * Indicates if a Primary Care Physician selection in required.
   * @param value the value to set.
   */
  public void setPcpRequiredIndicator(java.lang.CharSequence value) {
    this.pcpRequiredIndicator = value;
  }

  /**
   * Gets the value of the 'planCategory' field.
   * @return A categorization for a plan.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getPlanCategory() {
    return planCategory;
  }

  /**
   * Sets the value of the 'planCategory' field.
   * A categorization for a plan.
   * @param value the value to set.
   */
  public void setPlanCategory(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.planCategory = value;
  }

  /**
   * Gets the value of the 'planCode' field.
   * @return The identifier for a plan.
   */
  public java.lang.CharSequence getPlanCode() {
    return planCode;
  }

  /**
   * Sets the value of the 'planCode' field.
   * The identifier for a plan.
   * @param value the value to set.
   */
  public void setPlanCode(java.lang.CharSequence value) {
    this.planCode = value;
  }

  /**
   * Gets the value of the 'planExternalIdentifiers' field.
   * @return The value of the 'planExternalIdentifiers' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> getPlanExternalIdentifiers() {
    return planExternalIdentifiers;
  }

  /**
   * Sets the value of the 'planExternalIdentifiers' field.
   * @param value the value to set.
   */
  public void setPlanExternalIdentifiers(java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> value) {
    this.planExternalIdentifiers = value;
  }

  /**
   * Gets the value of the 'planFunctions' field.
   * @return The value of the 'planFunctions' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> getPlanFunctions() {
    return planFunctions;
  }

  /**
   * Sets the value of the 'planFunctions' field.
   * @param value the value to set.
   */
  public void setPlanFunctions(java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> value) {
    this.planFunctions = value;
  }

  /**
   * Gets the value of the 'planIncentives' field.
   * @return The value of the 'planIncentives' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> getPlanIncentives() {
    return planIncentives;
  }

  /**
   * Sets the value of the 'planIncentives' field.
   * @param value the value to set.
   */
  public void setPlanIncentives(java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> value) {
    this.planIncentives = value;
  }

  /**
   * Gets the value of the 'planLanguageText' field.
   * @return Text language for the plan.
   */
  public java.lang.CharSequence getPlanLanguageText() {
    return planLanguageText;
  }

  /**
   * Sets the value of the 'planLanguageText' field.
   * Text language for the plan.
   * @param value the value to set.
   */
  public void setPlanLanguageText(java.lang.CharSequence value) {
    this.planLanguageText = value;
  }

  /**
   * Gets the value of the 'planLongDescription' field.
   * @return Description for the plan.
   */
  public java.lang.CharSequence getPlanLongDescription() {
    return planLongDescription;
  }

  /**
   * Sets the value of the 'planLongDescription' field.
   * Description for the plan.
   * @param value the value to set.
   */
  public void setPlanLongDescription(java.lang.CharSequence value) {
    this.planLongDescription = value;
  }

  /**
   * Gets the value of the 'planName' field.
   * @return Name of the plan.
   */
  public java.lang.CharSequence getPlanName() {
    return planName;
  }

  /**
   * Sets the value of the 'planName' field.
   * Name of the plan.
   * @param value the value to set.
   */
  public void setPlanName(java.lang.CharSequence value) {
    this.planName = value;
  }

  /**
   * Gets the value of the 'planVendorCode' field.
   * @return Code for the plan vendor.
   */
  public java.lang.CharSequence getPlanVendorCode() {
    return planVendorCode;
  }

  /**
   * Sets the value of the 'planVendorCode' field.
   * Code for the plan vendor.
   * @param value the value to set.
   */
  public void setPlanVendorCode(java.lang.CharSequence value) {
    this.planVendorCode = value;
  }

  /**
   * Gets the value of the 'planVendorName' field.
   * @return Name of the plan vendor.
   */
  public java.lang.CharSequence getPlanVendorName() {
    return planVendorName;
  }

  /**
   * Sets the value of the 'planVendorName' field.
   * Name of the plan vendor.
   * @param value the value to set.
   */
  public void setPlanVendorName(java.lang.CharSequence value) {
    this.planVendorName = value;
  }

  /**
   * Creates a new BundleOptionPlan RecordBuilder.
   * @return A new BundleOptionPlan RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder();
  }

  /**
   * Creates a new BundleOptionPlan RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BundleOptionPlan RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder newBuilder(com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder(other);
  }

  /**
   * Creates a new BundleOptionPlan RecordBuilder by copying an existing BundleOptionPlan instance.
   * @param other The existing instance to copy.
   * @return A new BundleOptionPlan RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder newBuilder(com.uhc.schema.model.eligibility.membership.BundleOptionPlan other) {
    return new com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder(other);
  }

  /**
   * RecordBuilder for BundleOptionPlan instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BundleOptionPlan>
    implements org.apache.avro.data.RecordBuilder<BundleOptionPlan> {

    /** Code and description for the bundle option plan type. E.g., Utilization, Service. */
    private com.uhc.schema.model.eligibility.common.DescriptionType bundleOptionPlanType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder bundleOptionPlanTypeBuilder;
    /** Indicates if the plan is in a designated virtual clinic network. */
    private java.lang.CharSequence designatedVirtualClinicNetworkIndicator;
    /** Indicates if a Primary Care Physician selection in required. */
    private java.lang.CharSequence pcpRequiredIndicator;
    /** A categorization for a plan. */
    private com.uhc.schema.model.eligibility.common.DescriptionType planCategory;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder planCategoryBuilder;
    /** The identifier for a plan. */
    private java.lang.CharSequence planCode;
    private java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> planExternalIdentifiers;
    private java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> planFunctions;
    private java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> planIncentives;
    /** Text language for the plan. */
    private java.lang.CharSequence planLanguageText;
    /** Description for the plan. */
    private java.lang.CharSequence planLongDescription;
    /** Name of the plan. */
    private java.lang.CharSequence planName;
    /** Code for the plan vendor. */
    private java.lang.CharSequence planVendorCode;
    /** Name of the plan vendor. */
    private java.lang.CharSequence planVendorName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bundleOptionPlanType)) {
        this.bundleOptionPlanType = data().deepCopy(fields()[0].schema(), other.bundleOptionPlanType);
        fieldSetFlags()[0] = true;
      }
      if (other.hasBundleOptionPlanTypeBuilder()) {
        this.bundleOptionPlanTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getBundleOptionPlanTypeBuilder());
      }
      if (isValidValue(fields()[1], other.designatedVirtualClinicNetworkIndicator)) {
        this.designatedVirtualClinicNetworkIndicator = data().deepCopy(fields()[1].schema(), other.designatedVirtualClinicNetworkIndicator);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pcpRequiredIndicator)) {
        this.pcpRequiredIndicator = data().deepCopy(fields()[2].schema(), other.pcpRequiredIndicator);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.planCategory)) {
        this.planCategory = data().deepCopy(fields()[3].schema(), other.planCategory);
        fieldSetFlags()[3] = true;
      }
      if (other.hasPlanCategoryBuilder()) {
        this.planCategoryBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getPlanCategoryBuilder());
      }
      if (isValidValue(fields()[4], other.planCode)) {
        this.planCode = data().deepCopy(fields()[4].schema(), other.planCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.planExternalIdentifiers)) {
        this.planExternalIdentifiers = data().deepCopy(fields()[5].schema(), other.planExternalIdentifiers);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.planFunctions)) {
        this.planFunctions = data().deepCopy(fields()[6].schema(), other.planFunctions);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.planIncentives)) {
        this.planIncentives = data().deepCopy(fields()[7].schema(), other.planIncentives);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.planLanguageText)) {
        this.planLanguageText = data().deepCopy(fields()[8].schema(), other.planLanguageText);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.planLongDescription)) {
        this.planLongDescription = data().deepCopy(fields()[9].schema(), other.planLongDescription);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.planName)) {
        this.planName = data().deepCopy(fields()[10].schema(), other.planName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.planVendorCode)) {
        this.planVendorCode = data().deepCopy(fields()[11].schema(), other.planVendorCode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.planVendorName)) {
        this.planVendorName = data().deepCopy(fields()[12].schema(), other.planVendorName);
        fieldSetFlags()[12] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BundleOptionPlan instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.BundleOptionPlan other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.bundleOptionPlanType)) {
        this.bundleOptionPlanType = data().deepCopy(fields()[0].schema(), other.bundleOptionPlanType);
        fieldSetFlags()[0] = true;
      }
      this.bundleOptionPlanTypeBuilder = null;
      if (isValidValue(fields()[1], other.designatedVirtualClinicNetworkIndicator)) {
        this.designatedVirtualClinicNetworkIndicator = data().deepCopy(fields()[1].schema(), other.designatedVirtualClinicNetworkIndicator);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pcpRequiredIndicator)) {
        this.pcpRequiredIndicator = data().deepCopy(fields()[2].schema(), other.pcpRequiredIndicator);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.planCategory)) {
        this.planCategory = data().deepCopy(fields()[3].schema(), other.planCategory);
        fieldSetFlags()[3] = true;
      }
      this.planCategoryBuilder = null;
      if (isValidValue(fields()[4], other.planCode)) {
        this.planCode = data().deepCopy(fields()[4].schema(), other.planCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.planExternalIdentifiers)) {
        this.planExternalIdentifiers = data().deepCopy(fields()[5].schema(), other.planExternalIdentifiers);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.planFunctions)) {
        this.planFunctions = data().deepCopy(fields()[6].schema(), other.planFunctions);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.planIncentives)) {
        this.planIncentives = data().deepCopy(fields()[7].schema(), other.planIncentives);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.planLanguageText)) {
        this.planLanguageText = data().deepCopy(fields()[8].schema(), other.planLanguageText);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.planLongDescription)) {
        this.planLongDescription = data().deepCopy(fields()[9].schema(), other.planLongDescription);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.planName)) {
        this.planName = data().deepCopy(fields()[10].schema(), other.planName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.planVendorCode)) {
        this.planVendorCode = data().deepCopy(fields()[11].schema(), other.planVendorCode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.planVendorName)) {
        this.planVendorName = data().deepCopy(fields()[12].schema(), other.planVendorName);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'bundleOptionPlanType' field.
      * Code and description for the bundle option plan type. E.g., Utilization, Service.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getBundleOptionPlanType() {
      return bundleOptionPlanType;
    }

    /**
      * Sets the value of the 'bundleOptionPlanType' field.
      * Code and description for the bundle option plan type. E.g., Utilization, Service.
      * @param value The value of 'bundleOptionPlanType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setBundleOptionPlanType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[0], value);
      this.bundleOptionPlanTypeBuilder = null;
      this.bundleOptionPlanType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bundleOptionPlanType' field has been set.
      * Code and description for the bundle option plan type. E.g., Utilization, Service.
      * @return True if the 'bundleOptionPlanType' field has been set, false otherwise.
      */
    public boolean hasBundleOptionPlanType() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'bundleOptionPlanType' field and creates one if it doesn't exist yet.
     * Code and description for the bundle option plan type. E.g., Utilization, Service.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getBundleOptionPlanTypeBuilder() {
      if (bundleOptionPlanTypeBuilder == null) {
        if (hasBundleOptionPlanType()) {
          setBundleOptionPlanTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(bundleOptionPlanType));
        } else {
          setBundleOptionPlanTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return bundleOptionPlanTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'bundleOptionPlanType' field
     * Code and description for the bundle option plan type. E.g., Utilization, Service.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setBundleOptionPlanTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearBundleOptionPlanType();
      bundleOptionPlanTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bundleOptionPlanType' field has an active Builder instance
     * Code and description for the bundle option plan type. E.g., Utilization, Service.
     * @return True if the 'bundleOptionPlanType' field has an active Builder instance
     */
    public boolean hasBundleOptionPlanTypeBuilder() {
      return bundleOptionPlanTypeBuilder != null;
    }

    /**
      * Clears the value of the 'bundleOptionPlanType' field.
      * Code and description for the bundle option plan type. E.g., Utilization, Service.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearBundleOptionPlanType() {
      bundleOptionPlanType = null;
      bundleOptionPlanTypeBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'designatedVirtualClinicNetworkIndicator' field.
      * Indicates if the plan is in a designated virtual clinic network.
      * @return The value.
      */
    public java.lang.CharSequence getDesignatedVirtualClinicNetworkIndicator() {
      return designatedVirtualClinicNetworkIndicator;
    }

    /**
      * Sets the value of the 'designatedVirtualClinicNetworkIndicator' field.
      * Indicates if the plan is in a designated virtual clinic network.
      * @param value The value of 'designatedVirtualClinicNetworkIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setDesignatedVirtualClinicNetworkIndicator(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.designatedVirtualClinicNetworkIndicator = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'designatedVirtualClinicNetworkIndicator' field has been set.
      * Indicates if the plan is in a designated virtual clinic network.
      * @return True if the 'designatedVirtualClinicNetworkIndicator' field has been set, false otherwise.
      */
    public boolean hasDesignatedVirtualClinicNetworkIndicator() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'designatedVirtualClinicNetworkIndicator' field.
      * Indicates if the plan is in a designated virtual clinic network.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearDesignatedVirtualClinicNetworkIndicator() {
      designatedVirtualClinicNetworkIndicator = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pcpRequiredIndicator' field.
      * Indicates if a Primary Care Physician selection in required.
      * @return The value.
      */
    public java.lang.CharSequence getPcpRequiredIndicator() {
      return pcpRequiredIndicator;
    }

    /**
      * Sets the value of the 'pcpRequiredIndicator' field.
      * Indicates if a Primary Care Physician selection in required.
      * @param value The value of 'pcpRequiredIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPcpRequiredIndicator(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.pcpRequiredIndicator = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pcpRequiredIndicator' field has been set.
      * Indicates if a Primary Care Physician selection in required.
      * @return True if the 'pcpRequiredIndicator' field has been set, false otherwise.
      */
    public boolean hasPcpRequiredIndicator() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pcpRequiredIndicator' field.
      * Indicates if a Primary Care Physician selection in required.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPcpRequiredIndicator() {
      pcpRequiredIndicator = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCategory' field.
      * A categorization for a plan.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getPlanCategory() {
      return planCategory;
    }

    /**
      * Sets the value of the 'planCategory' field.
      * A categorization for a plan.
      * @param value The value of 'planCategory'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanCategory(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[3], value);
      this.planCategoryBuilder = null;
      this.planCategory = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'planCategory' field has been set.
      * A categorization for a plan.
      * @return True if the 'planCategory' field has been set, false otherwise.
      */
    public boolean hasPlanCategory() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'planCategory' field and creates one if it doesn't exist yet.
     * A categorization for a plan.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getPlanCategoryBuilder() {
      if (planCategoryBuilder == null) {
        if (hasPlanCategory()) {
          setPlanCategoryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(planCategory));
        } else {
          setPlanCategoryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return planCategoryBuilder;
    }

    /**
     * Sets the Builder instance for the 'planCategory' field
     * A categorization for a plan.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanCategoryBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearPlanCategory();
      planCategoryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'planCategory' field has an active Builder instance
     * A categorization for a plan.
     * @return True if the 'planCategory' field has an active Builder instance
     */
    public boolean hasPlanCategoryBuilder() {
      return planCategoryBuilder != null;
    }

    /**
      * Clears the value of the 'planCategory' field.
      * A categorization for a plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanCategory() {
      planCategory = null;
      planCategoryBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCode' field.
      * The identifier for a plan.
      * @return The value.
      */
    public java.lang.CharSequence getPlanCode() {
      return planCode;
    }

    /**
      * Sets the value of the 'planCode' field.
      * The identifier for a plan.
      * @param value The value of 'planCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.planCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'planCode' field has been set.
      * The identifier for a plan.
      * @return True if the 'planCode' field has been set, false otherwise.
      */
    public boolean hasPlanCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'planCode' field.
      * The identifier for a plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanCode() {
      planCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'planExternalIdentifiers' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> getPlanExternalIdentifiers() {
      return planExternalIdentifiers;
    }

    /**
      * Sets the value of the 'planExternalIdentifiers' field.
      * @param value The value of 'planExternalIdentifiers'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanExternalIdentifiers(java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier> value) {
      validate(fields()[5], value);
      this.planExternalIdentifiers = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'planExternalIdentifiers' field has been set.
      * @return True if the 'planExternalIdentifiers' field has been set, false otherwise.
      */
    public boolean hasPlanExternalIdentifiers() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'planExternalIdentifiers' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanExternalIdentifiers() {
      planExternalIdentifiers = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'planFunctions' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> getPlanFunctions() {
      return planFunctions;
    }

    /**
      * Sets the value of the 'planFunctions' field.
      * @param value The value of 'planFunctions'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanFunctions(java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction> value) {
      validate(fields()[6], value);
      this.planFunctions = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'planFunctions' field has been set.
      * @return True if the 'planFunctions' field has been set, false otherwise.
      */
    public boolean hasPlanFunctions() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'planFunctions' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanFunctions() {
      planFunctions = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'planIncentives' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> getPlanIncentives() {
      return planIncentives;
    }

    /**
      * Sets the value of the 'planIncentives' field.
      * @param value The value of 'planIncentives'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanIncentives(java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive> value) {
      validate(fields()[7], value);
      this.planIncentives = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'planIncentives' field has been set.
      * @return True if the 'planIncentives' field has been set, false otherwise.
      */
    public boolean hasPlanIncentives() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'planIncentives' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanIncentives() {
      planIncentives = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'planLanguageText' field.
      * Text language for the plan.
      * @return The value.
      */
    public java.lang.CharSequence getPlanLanguageText() {
      return planLanguageText;
    }

    /**
      * Sets the value of the 'planLanguageText' field.
      * Text language for the plan.
      * @param value The value of 'planLanguageText'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanLanguageText(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.planLanguageText = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'planLanguageText' field has been set.
      * Text language for the plan.
      * @return True if the 'planLanguageText' field has been set, false otherwise.
      */
    public boolean hasPlanLanguageText() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'planLanguageText' field.
      * Text language for the plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanLanguageText() {
      planLanguageText = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'planLongDescription' field.
      * Description for the plan.
      * @return The value.
      */
    public java.lang.CharSequence getPlanLongDescription() {
      return planLongDescription;
    }

    /**
      * Sets the value of the 'planLongDescription' field.
      * Description for the plan.
      * @param value The value of 'planLongDescription'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanLongDescription(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.planLongDescription = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'planLongDescription' field has been set.
      * Description for the plan.
      * @return True if the 'planLongDescription' field has been set, false otherwise.
      */
    public boolean hasPlanLongDescription() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'planLongDescription' field.
      * Description for the plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanLongDescription() {
      planLongDescription = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'planName' field.
      * Name of the plan.
      * @return The value.
      */
    public java.lang.CharSequence getPlanName() {
      return planName;
    }

    /**
      * Sets the value of the 'planName' field.
      * Name of the plan.
      * @param value The value of 'planName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanName(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.planName = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'planName' field has been set.
      * Name of the plan.
      * @return True if the 'planName' field has been set, false otherwise.
      */
    public boolean hasPlanName() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'planName' field.
      * Name of the plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanName() {
      planName = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'planVendorCode' field.
      * Code for the plan vendor.
      * @return The value.
      */
    public java.lang.CharSequence getPlanVendorCode() {
      return planVendorCode;
    }

    /**
      * Sets the value of the 'planVendorCode' field.
      * Code for the plan vendor.
      * @param value The value of 'planVendorCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanVendorCode(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.planVendorCode = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'planVendorCode' field has been set.
      * Code for the plan vendor.
      * @return True if the 'planVendorCode' field has been set, false otherwise.
      */
    public boolean hasPlanVendorCode() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'planVendorCode' field.
      * Code for the plan vendor.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanVendorCode() {
      planVendorCode = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'planVendorName' field.
      * Name of the plan vendor.
      * @return The value.
      */
    public java.lang.CharSequence getPlanVendorName() {
      return planVendorName;
    }

    /**
      * Sets the value of the 'planVendorName' field.
      * Name of the plan vendor.
      * @param value The value of 'planVendorName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder setPlanVendorName(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.planVendorName = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'planVendorName' field has been set.
      * Name of the plan vendor.
      * @return True if the 'planVendorName' field has been set, false otherwise.
      */
    public boolean hasPlanVendorName() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'planVendorName' field.
      * Name of the plan vendor.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.BundleOptionPlan.Builder clearPlanVendorName() {
      planVendorName = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BundleOptionPlan build() {
      try {
        BundleOptionPlan record = new BundleOptionPlan();
        if (bundleOptionPlanTypeBuilder != null) {
          record.bundleOptionPlanType = this.bundleOptionPlanTypeBuilder.build();
        } else {
          record.bundleOptionPlanType = fieldSetFlags()[0] ? this.bundleOptionPlanType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[0]);
        }
        record.designatedVirtualClinicNetworkIndicator = fieldSetFlags()[1] ? this.designatedVirtualClinicNetworkIndicator : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.pcpRequiredIndicator = fieldSetFlags()[2] ? this.pcpRequiredIndicator : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (planCategoryBuilder != null) {
          record.planCategory = this.planCategoryBuilder.build();
        } else {
          record.planCategory = fieldSetFlags()[3] ? this.planCategory : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[3]);
        }
        record.planCode = fieldSetFlags()[4] ? this.planCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.planExternalIdentifiers = fieldSetFlags()[5] ? this.planExternalIdentifiers : (java.util.List<com.uhc.schema.model.eligibility.membership.PlanExternalIdentifier>) defaultValue(fields()[5]);
        record.planFunctions = fieldSetFlags()[6] ? this.planFunctions : (java.util.List<com.uhc.schema.model.eligibility.membership.PlanFunction>) defaultValue(fields()[6]);
        record.planIncentives = fieldSetFlags()[7] ? this.planIncentives : (java.util.List<com.uhc.schema.model.eligibility.membership.PlanIncentive>) defaultValue(fields()[7]);
        record.planLanguageText = fieldSetFlags()[8] ? this.planLanguageText : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.planLongDescription = fieldSetFlags()[9] ? this.planLongDescription : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.planName = fieldSetFlags()[10] ? this.planName : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.planVendorCode = fieldSetFlags()[11] ? this.planVendorCode : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.planVendorName = fieldSetFlags()[12] ? this.planVendorName : (java.lang.CharSequence) defaultValue(fields()[12]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BundleOptionPlan>
    WRITER$ = (org.apache.avro.io.DatumWriter<BundleOptionPlan>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BundleOptionPlan>
    READER$ = (org.apache.avro.io.DatumReader<BundleOptionPlan>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
