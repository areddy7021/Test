/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HoldReason extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3877741653405073091L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HoldReason\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The start date for the hold.\",\"default\":null},{\"name\":\"holdLevel\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies which domain the hold applies to. Ex: member, group, organization, etc.\",\"default\":null},{\"name\":\"holdNote\",\"type\":[\"null\",\"string\"],\"doc\":\"Free form text allowing user to describe the reason or other pertinent information for the hold.\",\"default\":null},{\"name\":\"holdReasonRestriction\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"HoldReasonRestriction\",\"fields\":[{\"name\":\"restrictionIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"A boolean value indication whether the restriction is true or false.\",\"default\":null},{\"name\":\"restrictionType\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the restriction type. Each restriction type controls what actions the Hold Code requires in regards to processing.\",\"default\":null}],\"default\":null}}],\"default\":null},{\"name\":\"holdType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.\",\"default\":null},{\"name\":\"lastUpdated\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LastUpdated\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"doc\":\"Information about the last update made to a given entity.\",\"fields\":[{\"name\":\"sourceSystemTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"sourceTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",\"string\"],\"doc\":\"The last person or application to update the entity.\",\"default\":null}]}],\"default\":null},{\"name\":\"terminationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The end date for the hold.\",\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HoldReason> ENCODER =
      new BinaryMessageEncoder<HoldReason>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HoldReason> DECODER =
      new BinaryMessageDecoder<HoldReason>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<HoldReason> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<HoldReason> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HoldReason>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this HoldReason to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a HoldReason from a ByteBuffer. */
  public static HoldReason fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The start date for the hold. */
  @Deprecated public java.lang.CharSequence effectiveDate;
  /** Specifies which domain the hold applies to. Ex: member, group, organization, etc. */
  @Deprecated public java.lang.CharSequence holdLevel;
  /** Free form text allowing user to describe the reason or other pertinent information for the hold. */
  @Deprecated public java.lang.CharSequence holdNote;
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> holdReasonRestriction;
  /** Hold codes defined by the business. Each hold code has an array of restrictions that apply to it. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType holdType;
  @Deprecated public com.uhc.schema.model.eligibility.common.LastUpdated lastUpdated;
  /** The end date for the hold. */
  @Deprecated public java.lang.CharSequence terminationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HoldReason() {}

  /**
   * All-args constructor.
   * @param effectiveDate The start date for the hold.
   * @param holdLevel Specifies which domain the hold applies to. Ex: member, group, organization, etc.
   * @param holdNote Free form text allowing user to describe the reason or other pertinent information for the hold.
   * @param holdReasonRestriction The new value for holdReasonRestriction
   * @param holdType Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
   * @param lastUpdated The new value for lastUpdated
   * @param terminationDate The end date for the hold.
   */
  public HoldReason(java.lang.CharSequence effectiveDate, java.lang.CharSequence holdLevel, java.lang.CharSequence holdNote, java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> holdReasonRestriction, com.uhc.schema.model.eligibility.common.DescriptionType holdType, com.uhc.schema.model.eligibility.common.LastUpdated lastUpdated, java.lang.CharSequence terminationDate) {
    this.effectiveDate = effectiveDate;
    this.holdLevel = holdLevel;
    this.holdNote = holdNote;
    this.holdReasonRestriction = holdReasonRestriction;
    this.holdType = holdType;
    this.lastUpdated = lastUpdated;
    this.terminationDate = terminationDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return effectiveDate;
    case 1: return holdLevel;
    case 2: return holdNote;
    case 3: return holdReasonRestriction;
    case 4: return holdType;
    case 5: return lastUpdated;
    case 6: return terminationDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: effectiveDate = (java.lang.CharSequence)value$; break;
    case 1: holdLevel = (java.lang.CharSequence)value$; break;
    case 2: holdNote = (java.lang.CharSequence)value$; break;
    case 3: holdReasonRestriction = (java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction>)value$; break;
    case 4: holdType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 5: lastUpdated = (com.uhc.schema.model.eligibility.common.LastUpdated)value$; break;
    case 6: terminationDate = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'effectiveDate' field.
   * @return The start date for the hold.
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effectiveDate;
  }

  /**
   * Sets the value of the 'effectiveDate' field.
   * The start date for the hold.
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effectiveDate = value;
  }

  /**
   * Gets the value of the 'holdLevel' field.
   * @return Specifies which domain the hold applies to. Ex: member, group, organization, etc.
   */
  public java.lang.CharSequence getHoldLevel() {
    return holdLevel;
  }

  /**
   * Sets the value of the 'holdLevel' field.
   * Specifies which domain the hold applies to. Ex: member, group, organization, etc.
   * @param value the value to set.
   */
  public void setHoldLevel(java.lang.CharSequence value) {
    this.holdLevel = value;
  }

  /**
   * Gets the value of the 'holdNote' field.
   * @return Free form text allowing user to describe the reason or other pertinent information for the hold.
   */
  public java.lang.CharSequence getHoldNote() {
    return holdNote;
  }

  /**
   * Sets the value of the 'holdNote' field.
   * Free form text allowing user to describe the reason or other pertinent information for the hold.
   * @param value the value to set.
   */
  public void setHoldNote(java.lang.CharSequence value) {
    this.holdNote = value;
  }

  /**
   * Gets the value of the 'holdReasonRestriction' field.
   * @return The value of the 'holdReasonRestriction' field.
   */
  public java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> getHoldReasonRestriction() {
    return holdReasonRestriction;
  }

  /**
   * Sets the value of the 'holdReasonRestriction' field.
   * @param value the value to set.
   */
  public void setHoldReasonRestriction(java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> value) {
    this.holdReasonRestriction = value;
  }

  /**
   * Gets the value of the 'holdType' field.
   * @return Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getHoldType() {
    return holdType;
  }

  /**
   * Sets the value of the 'holdType' field.
   * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
   * @param value the value to set.
   */
  public void setHoldType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.holdType = value;
  }

  /**
   * Gets the value of the 'lastUpdated' field.
   * @return The value of the 'lastUpdated' field.
   */
  public com.uhc.schema.model.eligibility.common.LastUpdated getLastUpdated() {
    return lastUpdated;
  }

  /**
   * Sets the value of the 'lastUpdated' field.
   * @param value the value to set.
   */
  public void setLastUpdated(com.uhc.schema.model.eligibility.common.LastUpdated value) {
    this.lastUpdated = value;
  }

  /**
   * Gets the value of the 'terminationDate' field.
   * @return The end date for the hold.
   */
  public java.lang.CharSequence getTerminationDate() {
    return terminationDate;
  }

  /**
   * Sets the value of the 'terminationDate' field.
   * The end date for the hold.
   * @param value the value to set.
   */
  public void setTerminationDate(java.lang.CharSequence value) {
    this.terminationDate = value;
  }

  /**
   * Creates a new HoldReason RecordBuilder.
   * @return A new HoldReason RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.HoldReason.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.HoldReason.Builder();
  }

  /**
   * Creates a new HoldReason RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HoldReason RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.HoldReason.Builder newBuilder(com.uhc.schema.model.eligibility.membership.HoldReason.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.HoldReason.Builder(other);
  }

  /**
   * Creates a new HoldReason RecordBuilder by copying an existing HoldReason instance.
   * @param other The existing instance to copy.
   * @return A new HoldReason RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.HoldReason.Builder newBuilder(com.uhc.schema.model.eligibility.membership.HoldReason other) {
    return new com.uhc.schema.model.eligibility.membership.HoldReason.Builder(other);
  }

  /**
   * RecordBuilder for HoldReason instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HoldReason>
    implements org.apache.avro.data.RecordBuilder<HoldReason> {

    /** The start date for the hold. */
    private java.lang.CharSequence effectiveDate;
    /** Specifies which domain the hold applies to. Ex: member, group, organization, etc. */
    private java.lang.CharSequence holdLevel;
    /** Free form text allowing user to describe the reason or other pertinent information for the hold. */
    private java.lang.CharSequence holdNote;
    private java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> holdReasonRestriction;
    /** Hold codes defined by the business. Each hold code has an array of restrictions that apply to it. */
    private com.uhc.schema.model.eligibility.common.DescriptionType holdType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder holdTypeBuilder;
    private com.uhc.schema.model.eligibility.common.LastUpdated lastUpdated;
    private com.uhc.schema.model.eligibility.common.LastUpdated.Builder lastUpdatedBuilder;
    /** The end date for the hold. */
    private java.lang.CharSequence terminationDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.HoldReason.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[0].schema(), other.effectiveDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.holdLevel)) {
        this.holdLevel = data().deepCopy(fields()[1].schema(), other.holdLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.holdNote)) {
        this.holdNote = data().deepCopy(fields()[2].schema(), other.holdNote);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.holdReasonRestriction)) {
        this.holdReasonRestriction = data().deepCopy(fields()[3].schema(), other.holdReasonRestriction);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.holdType)) {
        this.holdType = data().deepCopy(fields()[4].schema(), other.holdType);
        fieldSetFlags()[4] = true;
      }
      if (other.hasHoldTypeBuilder()) {
        this.holdTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getHoldTypeBuilder());
      }
      if (isValidValue(fields()[5], other.lastUpdated)) {
        this.lastUpdated = data().deepCopy(fields()[5].schema(), other.lastUpdated);
        fieldSetFlags()[5] = true;
      }
      if (other.hasLastUpdatedBuilder()) {
        this.lastUpdatedBuilder = com.uhc.schema.model.eligibility.common.LastUpdated.newBuilder(other.getLastUpdatedBuilder());
      }
      if (isValidValue(fields()[6], other.terminationDate)) {
        this.terminationDate = data().deepCopy(fields()[6].schema(), other.terminationDate);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HoldReason instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.HoldReason other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[0].schema(), other.effectiveDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.holdLevel)) {
        this.holdLevel = data().deepCopy(fields()[1].schema(), other.holdLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.holdNote)) {
        this.holdNote = data().deepCopy(fields()[2].schema(), other.holdNote);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.holdReasonRestriction)) {
        this.holdReasonRestriction = data().deepCopy(fields()[3].schema(), other.holdReasonRestriction);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.holdType)) {
        this.holdType = data().deepCopy(fields()[4].schema(), other.holdType);
        fieldSetFlags()[4] = true;
      }
      this.holdTypeBuilder = null;
      if (isValidValue(fields()[5], other.lastUpdated)) {
        this.lastUpdated = data().deepCopy(fields()[5].schema(), other.lastUpdated);
        fieldSetFlags()[5] = true;
      }
      this.lastUpdatedBuilder = null;
      if (isValidValue(fields()[6], other.terminationDate)) {
        this.terminationDate = data().deepCopy(fields()[6].schema(), other.terminationDate);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'effectiveDate' field.
      * The start date for the hold.
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effectiveDate;
    }

    /**
      * Sets the value of the 'effectiveDate' field.
      * The start date for the hold.
      * @param value The value of 'effectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.effectiveDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDate' field has been set.
      * The start date for the hold.
      * @return True if the 'effectiveDate' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'effectiveDate' field.
      * The start date for the hold.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearEffectiveDate() {
      effectiveDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'holdLevel' field.
      * Specifies which domain the hold applies to. Ex: member, group, organization, etc.
      * @return The value.
      */
    public java.lang.CharSequence getHoldLevel() {
      return holdLevel;
    }

    /**
      * Sets the value of the 'holdLevel' field.
      * Specifies which domain the hold applies to. Ex: member, group, organization, etc.
      * @param value The value of 'holdLevel'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setHoldLevel(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.holdLevel = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'holdLevel' field has been set.
      * Specifies which domain the hold applies to. Ex: member, group, organization, etc.
      * @return True if the 'holdLevel' field has been set, false otherwise.
      */
    public boolean hasHoldLevel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'holdLevel' field.
      * Specifies which domain the hold applies to. Ex: member, group, organization, etc.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearHoldLevel() {
      holdLevel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'holdNote' field.
      * Free form text allowing user to describe the reason or other pertinent information for the hold.
      * @return The value.
      */
    public java.lang.CharSequence getHoldNote() {
      return holdNote;
    }

    /**
      * Sets the value of the 'holdNote' field.
      * Free form text allowing user to describe the reason or other pertinent information for the hold.
      * @param value The value of 'holdNote'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setHoldNote(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.holdNote = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'holdNote' field has been set.
      * Free form text allowing user to describe the reason or other pertinent information for the hold.
      * @return True if the 'holdNote' field has been set, false otherwise.
      */
    public boolean hasHoldNote() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'holdNote' field.
      * Free form text allowing user to describe the reason or other pertinent information for the hold.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearHoldNote() {
      holdNote = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'holdReasonRestriction' field.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> getHoldReasonRestriction() {
      return holdReasonRestriction;
    }

    /**
      * Sets the value of the 'holdReasonRestriction' field.
      * @param value The value of 'holdReasonRestriction'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setHoldReasonRestriction(java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction> value) {
      validate(fields()[3], value);
      this.holdReasonRestriction = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'holdReasonRestriction' field has been set.
      * @return True if the 'holdReasonRestriction' field has been set, false otherwise.
      */
    public boolean hasHoldReasonRestriction() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'holdReasonRestriction' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearHoldReasonRestriction() {
      holdReasonRestriction = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'holdType' field.
      * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getHoldType() {
      return holdType;
    }

    /**
      * Sets the value of the 'holdType' field.
      * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
      * @param value The value of 'holdType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setHoldType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[4], value);
      this.holdTypeBuilder = null;
      this.holdType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'holdType' field has been set.
      * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
      * @return True if the 'holdType' field has been set, false otherwise.
      */
    public boolean hasHoldType() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'holdType' field and creates one if it doesn't exist yet.
     * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getHoldTypeBuilder() {
      if (holdTypeBuilder == null) {
        if (hasHoldType()) {
          setHoldTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(holdType));
        } else {
          setHoldTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return holdTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'holdType' field
     * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setHoldTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearHoldType();
      holdTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'holdType' field has an active Builder instance
     * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
     * @return True if the 'holdType' field has an active Builder instance
     */
    public boolean hasHoldTypeBuilder() {
      return holdTypeBuilder != null;
    }

    /**
      * Clears the value of the 'holdType' field.
      * Hold codes defined by the business. Each hold code has an array of restrictions that apply to it.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearHoldType() {
      holdType = null;
      holdTypeBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdated' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated getLastUpdated() {
      return lastUpdated;
    }

    /**
      * Sets the value of the 'lastUpdated' field.
      * @param value The value of 'lastUpdated'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setLastUpdated(com.uhc.schema.model.eligibility.common.LastUpdated value) {
      validate(fields()[5], value);
      this.lastUpdatedBuilder = null;
      this.lastUpdated = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdated' field has been set.
      * @return True if the 'lastUpdated' field has been set, false otherwise.
      */
    public boolean hasLastUpdated() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'lastUpdated' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder getLastUpdatedBuilder() {
      if (lastUpdatedBuilder == null) {
        if (hasLastUpdated()) {
          setLastUpdatedBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.newBuilder(lastUpdated));
        } else {
          setLastUpdatedBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.newBuilder());
        }
      }
      return lastUpdatedBuilder;
    }

    /**
     * Sets the Builder instance for the 'lastUpdated' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setLastUpdatedBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.Builder value) {
      clearLastUpdated();
      lastUpdatedBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lastUpdated' field has an active Builder instance
     * @return True if the 'lastUpdated' field has an active Builder instance
     */
    public boolean hasLastUpdatedBuilder() {
      return lastUpdatedBuilder != null;
    }

    /**
      * Clears the value of the 'lastUpdated' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearLastUpdated() {
      lastUpdated = null;
      lastUpdatedBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'terminationDate' field.
      * The end date for the hold.
      * @return The value.
      */
    public java.lang.CharSequence getTerminationDate() {
      return terminationDate;
    }

    /**
      * Sets the value of the 'terminationDate' field.
      * The end date for the hold.
      * @param value The value of 'terminationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder setTerminationDate(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.terminationDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'terminationDate' field has been set.
      * The end date for the hold.
      * @return True if the 'terminationDate' field has been set, false otherwise.
      */
    public boolean hasTerminationDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'terminationDate' field.
      * The end date for the hold.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.HoldReason.Builder clearTerminationDate() {
      terminationDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HoldReason build() {
      try {
        HoldReason record = new HoldReason();
        record.effectiveDate = fieldSetFlags()[0] ? this.effectiveDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.holdLevel = fieldSetFlags()[1] ? this.holdLevel : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.holdNote = fieldSetFlags()[2] ? this.holdNote : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.holdReasonRestriction = fieldSetFlags()[3] ? this.holdReasonRestriction : (java.util.List<com.uhc.schema.model.eligibility.membership.HoldReasonRestriction>) defaultValue(fields()[3]);
        if (holdTypeBuilder != null) {
          record.holdType = this.holdTypeBuilder.build();
        } else {
          record.holdType = fieldSetFlags()[4] ? this.holdType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[4]);
        }
        if (lastUpdatedBuilder != null) {
          record.lastUpdated = this.lastUpdatedBuilder.build();
        } else {
          record.lastUpdated = fieldSetFlags()[5] ? this.lastUpdated : (com.uhc.schema.model.eligibility.common.LastUpdated) defaultValue(fields()[5]);
        }
        record.terminationDate = fieldSetFlags()[6] ? this.terminationDate : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HoldReason>
    WRITER$ = (org.apache.avro.io.DatumWriter<HoldReason>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HoldReason>
    READER$ = (org.apache.avro.io.DatumReader<HoldReason>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
