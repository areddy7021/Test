/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlanFunction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8865085887697569827L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanFunction\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"planFunctionCode\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Code and description for the plan function.\",\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlanFunction> ENCODER =
      new BinaryMessageEncoder<PlanFunction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanFunction> DECODER =
      new BinaryMessageDecoder<PlanFunction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PlanFunction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PlanFunction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PlanFunction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PlanFunction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PlanFunction from a ByteBuffer. */
  public static PlanFunction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence effectiveDate;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence expirationDate;
  /** Code and description for the plan function. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType planFunctionCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanFunction() {}

  /**
   * All-args constructor.
   * @param effectiveDate Date format: CCYY-MM-DD
   * @param expirationDate Date format: CCYY-MM-DD
   * @param planFunctionCode Code and description for the plan function.
   */
  public PlanFunction(java.lang.CharSequence effectiveDate, java.lang.CharSequence expirationDate, com.uhc.schema.model.eligibility.common.DescriptionType planFunctionCode) {
    this.effectiveDate = effectiveDate;
    this.expirationDate = expirationDate;
    this.planFunctionCode = planFunctionCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return effectiveDate;
    case 1: return expirationDate;
    case 2: return planFunctionCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: effectiveDate = (java.lang.CharSequence)value$; break;
    case 1: expirationDate = (java.lang.CharSequence)value$; break;
    case 2: planFunctionCode = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'effectiveDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effectiveDate;
  }

  /**
   * Sets the value of the 'effectiveDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effectiveDate = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getExpirationDate() {
    return expirationDate;
  }

  /**
   * Sets the value of the 'expirationDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setExpirationDate(java.lang.CharSequence value) {
    this.expirationDate = value;
  }

  /**
   * Gets the value of the 'planFunctionCode' field.
   * @return Code and description for the plan function.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getPlanFunctionCode() {
    return planFunctionCode;
  }

  /**
   * Sets the value of the 'planFunctionCode' field.
   * Code and description for the plan function.
   * @param value the value to set.
   */
  public void setPlanFunctionCode(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.planFunctionCode = value;
  }

  /**
   * Creates a new PlanFunction RecordBuilder.
   * @return A new PlanFunction RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.PlanFunction.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.PlanFunction.Builder();
  }

  /**
   * Creates a new PlanFunction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanFunction RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.PlanFunction.Builder newBuilder(com.uhc.schema.model.eligibility.membership.PlanFunction.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.PlanFunction.Builder(other);
  }

  /**
   * Creates a new PlanFunction RecordBuilder by copying an existing PlanFunction instance.
   * @param other The existing instance to copy.
   * @return A new PlanFunction RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.PlanFunction.Builder newBuilder(com.uhc.schema.model.eligibility.membership.PlanFunction other) {
    return new com.uhc.schema.model.eligibility.membership.PlanFunction.Builder(other);
  }

  /**
   * RecordBuilder for PlanFunction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanFunction>
    implements org.apache.avro.data.RecordBuilder<PlanFunction> {

    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence effectiveDate;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence expirationDate;
    /** Code and description for the plan function. */
    private com.uhc.schema.model.eligibility.common.DescriptionType planFunctionCode;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder planFunctionCodeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.PlanFunction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[0].schema(), other.effectiveDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[1].schema(), other.expirationDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.planFunctionCode)) {
        this.planFunctionCode = data().deepCopy(fields()[2].schema(), other.planFunctionCode);
        fieldSetFlags()[2] = true;
      }
      if (other.hasPlanFunctionCodeBuilder()) {
        this.planFunctionCodeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getPlanFunctionCodeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PlanFunction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.PlanFunction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[0].schema(), other.effectiveDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[1].schema(), other.expirationDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.planFunctionCode)) {
        this.planFunctionCode = data().deepCopy(fields()[2].schema(), other.planFunctionCode);
        fieldSetFlags()[2] = true;
      }
      this.planFunctionCodeBuilder = null;
    }

    /**
      * Gets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effectiveDate;
    }

    /**
      * Sets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'effectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.effectiveDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'effectiveDate' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder clearEffectiveDate() {
      effectiveDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'expirationDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getExpirationDate() {
      return expirationDate;
    }

    /**
      * Sets the value of the 'expirationDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'expirationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder setExpirationDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.expirationDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'expirationDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'expirationDate' field has been set, false otherwise.
      */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'expirationDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'planFunctionCode' field.
      * Code and description for the plan function.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getPlanFunctionCode() {
      return planFunctionCode;
    }

    /**
      * Sets the value of the 'planFunctionCode' field.
      * Code and description for the plan function.
      * @param value The value of 'planFunctionCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder setPlanFunctionCode(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[2], value);
      this.planFunctionCodeBuilder = null;
      this.planFunctionCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'planFunctionCode' field has been set.
      * Code and description for the plan function.
      * @return True if the 'planFunctionCode' field has been set, false otherwise.
      */
    public boolean hasPlanFunctionCode() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'planFunctionCode' field and creates one if it doesn't exist yet.
     * Code and description for the plan function.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getPlanFunctionCodeBuilder() {
      if (planFunctionCodeBuilder == null) {
        if (hasPlanFunctionCode()) {
          setPlanFunctionCodeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(planFunctionCode));
        } else {
          setPlanFunctionCodeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return planFunctionCodeBuilder;
    }

    /**
     * Sets the Builder instance for the 'planFunctionCode' field
     * Code and description for the plan function.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder setPlanFunctionCodeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearPlanFunctionCode();
      planFunctionCodeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'planFunctionCode' field has an active Builder instance
     * Code and description for the plan function.
     * @return True if the 'planFunctionCode' field has an active Builder instance
     */
    public boolean hasPlanFunctionCodeBuilder() {
      return planFunctionCodeBuilder != null;
    }

    /**
      * Clears the value of the 'planFunctionCode' field.
      * Code and description for the plan function.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanFunction.Builder clearPlanFunctionCode() {
      planFunctionCode = null;
      planFunctionCodeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanFunction build() {
      try {
        PlanFunction record = new PlanFunction();
        record.effectiveDate = fieldSetFlags()[0] ? this.effectiveDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.expirationDate = fieldSetFlags()[1] ? this.expirationDate : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (planFunctionCodeBuilder != null) {
          record.planFunctionCode = this.planFunctionCodeBuilder.build();
        } else {
          record.planFunctionCode = fieldSetFlags()[2] ? this.planFunctionCode : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanFunction>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanFunction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanFunction>
    READER$ = (org.apache.avro.io.DatumReader<PlanFunction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
