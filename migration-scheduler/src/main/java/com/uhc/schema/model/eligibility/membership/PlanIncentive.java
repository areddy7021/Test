/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.membership;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlanIncentive extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -910944052578438798L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanIncentive\",\"namespace\":\"com.uhc.schema.model.eligibility.membership\",\"fields\":[{\"name\":\"annualMaxRewardAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Maximun annual reward amount for the incentive.\",\"default\":null},{\"name\":\"dailyMaxRewardAmount\",\"type\":[\"null\",\"string\"],\"doc\":\"Maximum daily reward amount for the incentive.\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"incentiveCalculationBasis\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Code and description describing the calculation basis for the incentive.\",\"default\":null},{\"name\":\"incentiveRewardMethod\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"doc\":\"Code and description describing the reward method for the incentive.\",\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlanIncentive> ENCODER =
      new BinaryMessageEncoder<PlanIncentive>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanIncentive> DECODER =
      new BinaryMessageDecoder<PlanIncentive>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PlanIncentive> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PlanIncentive> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PlanIncentive>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PlanIncentive to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PlanIncentive from a ByteBuffer. */
  public static PlanIncentive fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Maximun annual reward amount for the incentive. */
  @Deprecated public java.lang.CharSequence annualMaxRewardAmount;
  /** Maximum daily reward amount for the incentive. */
  @Deprecated public java.lang.CharSequence dailyMaxRewardAmount;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence effectiveDate;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence expirationDate;
  /** Code and description describing the calculation basis for the incentive. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType incentiveCalculationBasis;
  /** Code and description describing the reward method for the incentive. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType incentiveRewardMethod;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanIncentive() {}

  /**
   * All-args constructor.
   * @param annualMaxRewardAmount Maximun annual reward amount for the incentive.
   * @param dailyMaxRewardAmount Maximum daily reward amount for the incentive.
   * @param effectiveDate Date format: CCYY-MM-DD
   * @param expirationDate Date format: CCYY-MM-DD
   * @param incentiveCalculationBasis Code and description describing the calculation basis for the incentive.
   * @param incentiveRewardMethod Code and description describing the reward method for the incentive.
   */
  public PlanIncentive(java.lang.CharSequence annualMaxRewardAmount, java.lang.CharSequence dailyMaxRewardAmount, java.lang.CharSequence effectiveDate, java.lang.CharSequence expirationDate, com.uhc.schema.model.eligibility.common.DescriptionType incentiveCalculationBasis, com.uhc.schema.model.eligibility.common.DescriptionType incentiveRewardMethod) {
    this.annualMaxRewardAmount = annualMaxRewardAmount;
    this.dailyMaxRewardAmount = dailyMaxRewardAmount;
    this.effectiveDate = effectiveDate;
    this.expirationDate = expirationDate;
    this.incentiveCalculationBasis = incentiveCalculationBasis;
    this.incentiveRewardMethod = incentiveRewardMethod;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return annualMaxRewardAmount;
    case 1: return dailyMaxRewardAmount;
    case 2: return effectiveDate;
    case 3: return expirationDate;
    case 4: return incentiveCalculationBasis;
    case 5: return incentiveRewardMethod;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: annualMaxRewardAmount = (java.lang.CharSequence)value$; break;
    case 1: dailyMaxRewardAmount = (java.lang.CharSequence)value$; break;
    case 2: effectiveDate = (java.lang.CharSequence)value$; break;
    case 3: expirationDate = (java.lang.CharSequence)value$; break;
    case 4: incentiveCalculationBasis = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 5: incentiveRewardMethod = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'annualMaxRewardAmount' field.
   * @return Maximun annual reward amount for the incentive.
   */
  public java.lang.CharSequence getAnnualMaxRewardAmount() {
    return annualMaxRewardAmount;
  }

  /**
   * Sets the value of the 'annualMaxRewardAmount' field.
   * Maximun annual reward amount for the incentive.
   * @param value the value to set.
   */
  public void setAnnualMaxRewardAmount(java.lang.CharSequence value) {
    this.annualMaxRewardAmount = value;
  }

  /**
   * Gets the value of the 'dailyMaxRewardAmount' field.
   * @return Maximum daily reward amount for the incentive.
   */
  public java.lang.CharSequence getDailyMaxRewardAmount() {
    return dailyMaxRewardAmount;
  }

  /**
   * Sets the value of the 'dailyMaxRewardAmount' field.
   * Maximum daily reward amount for the incentive.
   * @param value the value to set.
   */
  public void setDailyMaxRewardAmount(java.lang.CharSequence value) {
    this.dailyMaxRewardAmount = value;
  }

  /**
   * Gets the value of the 'effectiveDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effectiveDate;
  }

  /**
   * Sets the value of the 'effectiveDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effectiveDate = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getExpirationDate() {
    return expirationDate;
  }

  /**
   * Sets the value of the 'expirationDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setExpirationDate(java.lang.CharSequence value) {
    this.expirationDate = value;
  }

  /**
   * Gets the value of the 'incentiveCalculationBasis' field.
   * @return Code and description describing the calculation basis for the incentive.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getIncentiveCalculationBasis() {
    return incentiveCalculationBasis;
  }

  /**
   * Sets the value of the 'incentiveCalculationBasis' field.
   * Code and description describing the calculation basis for the incentive.
   * @param value the value to set.
   */
  public void setIncentiveCalculationBasis(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.incentiveCalculationBasis = value;
  }

  /**
   * Gets the value of the 'incentiveRewardMethod' field.
   * @return Code and description describing the reward method for the incentive.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getIncentiveRewardMethod() {
    return incentiveRewardMethod;
  }

  /**
   * Sets the value of the 'incentiveRewardMethod' field.
   * Code and description describing the reward method for the incentive.
   * @param value the value to set.
   */
  public void setIncentiveRewardMethod(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.incentiveRewardMethod = value;
  }

  /**
   * Creates a new PlanIncentive RecordBuilder.
   * @return A new PlanIncentive RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder();
  }

  /**
   * Creates a new PlanIncentive RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanIncentive RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder newBuilder(com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder other) {
    return new com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder(other);
  }

  /**
   * Creates a new PlanIncentive RecordBuilder by copying an existing PlanIncentive instance.
   * @param other The existing instance to copy.
   * @return A new PlanIncentive RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder newBuilder(com.uhc.schema.model.eligibility.membership.PlanIncentive other) {
    return new com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder(other);
  }

  /**
   * RecordBuilder for PlanIncentive instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanIncentive>
    implements org.apache.avro.data.RecordBuilder<PlanIncentive> {

    /** Maximun annual reward amount for the incentive. */
    private java.lang.CharSequence annualMaxRewardAmount;
    /** Maximum daily reward amount for the incentive. */
    private java.lang.CharSequence dailyMaxRewardAmount;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence effectiveDate;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence expirationDate;
    /** Code and description describing the calculation basis for the incentive. */
    private com.uhc.schema.model.eligibility.common.DescriptionType incentiveCalculationBasis;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder incentiveCalculationBasisBuilder;
    /** Code and description describing the reward method for the incentive. */
    private com.uhc.schema.model.eligibility.common.DescriptionType incentiveRewardMethod;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder incentiveRewardMethodBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.annualMaxRewardAmount)) {
        this.annualMaxRewardAmount = data().deepCopy(fields()[0].schema(), other.annualMaxRewardAmount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dailyMaxRewardAmount)) {
        this.dailyMaxRewardAmount = data().deepCopy(fields()[1].schema(), other.dailyMaxRewardAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[2].schema(), other.effectiveDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[3].schema(), other.expirationDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.incentiveCalculationBasis)) {
        this.incentiveCalculationBasis = data().deepCopy(fields()[4].schema(), other.incentiveCalculationBasis);
        fieldSetFlags()[4] = true;
      }
      if (other.hasIncentiveCalculationBasisBuilder()) {
        this.incentiveCalculationBasisBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getIncentiveCalculationBasisBuilder());
      }
      if (isValidValue(fields()[5], other.incentiveRewardMethod)) {
        this.incentiveRewardMethod = data().deepCopy(fields()[5].schema(), other.incentiveRewardMethod);
        fieldSetFlags()[5] = true;
      }
      if (other.hasIncentiveRewardMethodBuilder()) {
        this.incentiveRewardMethodBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getIncentiveRewardMethodBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PlanIncentive instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.membership.PlanIncentive other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.annualMaxRewardAmount)) {
        this.annualMaxRewardAmount = data().deepCopy(fields()[0].schema(), other.annualMaxRewardAmount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dailyMaxRewardAmount)) {
        this.dailyMaxRewardAmount = data().deepCopy(fields()[1].schema(), other.dailyMaxRewardAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.effectiveDate)) {
        this.effectiveDate = data().deepCopy(fields()[2].schema(), other.effectiveDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[3].schema(), other.expirationDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.incentiveCalculationBasis)) {
        this.incentiveCalculationBasis = data().deepCopy(fields()[4].schema(), other.incentiveCalculationBasis);
        fieldSetFlags()[4] = true;
      }
      this.incentiveCalculationBasisBuilder = null;
      if (isValidValue(fields()[5], other.incentiveRewardMethod)) {
        this.incentiveRewardMethod = data().deepCopy(fields()[5].schema(), other.incentiveRewardMethod);
        fieldSetFlags()[5] = true;
      }
      this.incentiveRewardMethodBuilder = null;
    }

    /**
      * Gets the value of the 'annualMaxRewardAmount' field.
      * Maximun annual reward amount for the incentive.
      * @return The value.
      */
    public java.lang.CharSequence getAnnualMaxRewardAmount() {
      return annualMaxRewardAmount;
    }

    /**
      * Sets the value of the 'annualMaxRewardAmount' field.
      * Maximun annual reward amount for the incentive.
      * @param value The value of 'annualMaxRewardAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setAnnualMaxRewardAmount(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.annualMaxRewardAmount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'annualMaxRewardAmount' field has been set.
      * Maximun annual reward amount for the incentive.
      * @return True if the 'annualMaxRewardAmount' field has been set, false otherwise.
      */
    public boolean hasAnnualMaxRewardAmount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'annualMaxRewardAmount' field.
      * Maximun annual reward amount for the incentive.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder clearAnnualMaxRewardAmount() {
      annualMaxRewardAmount = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dailyMaxRewardAmount' field.
      * Maximum daily reward amount for the incentive.
      * @return The value.
      */
    public java.lang.CharSequence getDailyMaxRewardAmount() {
      return dailyMaxRewardAmount;
    }

    /**
      * Sets the value of the 'dailyMaxRewardAmount' field.
      * Maximum daily reward amount for the incentive.
      * @param value The value of 'dailyMaxRewardAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setDailyMaxRewardAmount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dailyMaxRewardAmount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dailyMaxRewardAmount' field has been set.
      * Maximum daily reward amount for the incentive.
      * @return True if the 'dailyMaxRewardAmount' field has been set, false otherwise.
      */
    public boolean hasDailyMaxRewardAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dailyMaxRewardAmount' field.
      * Maximum daily reward amount for the incentive.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder clearDailyMaxRewardAmount() {
      dailyMaxRewardAmount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effectiveDate;
    }

    /**
      * Sets the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'effectiveDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.effectiveDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'effectiveDate' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'effectiveDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder clearEffectiveDate() {
      effectiveDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'expirationDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getExpirationDate() {
      return expirationDate;
    }

    /**
      * Sets the value of the 'expirationDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'expirationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setExpirationDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.expirationDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'expirationDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'expirationDate' field has been set, false otherwise.
      */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'expirationDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'incentiveCalculationBasis' field.
      * Code and description describing the calculation basis for the incentive.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getIncentiveCalculationBasis() {
      return incentiveCalculationBasis;
    }

    /**
      * Sets the value of the 'incentiveCalculationBasis' field.
      * Code and description describing the calculation basis for the incentive.
      * @param value The value of 'incentiveCalculationBasis'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setIncentiveCalculationBasis(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[4], value);
      this.incentiveCalculationBasisBuilder = null;
      this.incentiveCalculationBasis = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'incentiveCalculationBasis' field has been set.
      * Code and description describing the calculation basis for the incentive.
      * @return True if the 'incentiveCalculationBasis' field has been set, false otherwise.
      */
    public boolean hasIncentiveCalculationBasis() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'incentiveCalculationBasis' field and creates one if it doesn't exist yet.
     * Code and description describing the calculation basis for the incentive.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getIncentiveCalculationBasisBuilder() {
      if (incentiveCalculationBasisBuilder == null) {
        if (hasIncentiveCalculationBasis()) {
          setIncentiveCalculationBasisBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(incentiveCalculationBasis));
        } else {
          setIncentiveCalculationBasisBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return incentiveCalculationBasisBuilder;
    }

    /**
     * Sets the Builder instance for the 'incentiveCalculationBasis' field
     * Code and description describing the calculation basis for the incentive.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setIncentiveCalculationBasisBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearIncentiveCalculationBasis();
      incentiveCalculationBasisBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'incentiveCalculationBasis' field has an active Builder instance
     * Code and description describing the calculation basis for the incentive.
     * @return True if the 'incentiveCalculationBasis' field has an active Builder instance
     */
    public boolean hasIncentiveCalculationBasisBuilder() {
      return incentiveCalculationBasisBuilder != null;
    }

    /**
      * Clears the value of the 'incentiveCalculationBasis' field.
      * Code and description describing the calculation basis for the incentive.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder clearIncentiveCalculationBasis() {
      incentiveCalculationBasis = null;
      incentiveCalculationBasisBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'incentiveRewardMethod' field.
      * Code and description describing the reward method for the incentive.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getIncentiveRewardMethod() {
      return incentiveRewardMethod;
    }

    /**
      * Sets the value of the 'incentiveRewardMethod' field.
      * Code and description describing the reward method for the incentive.
      * @param value The value of 'incentiveRewardMethod'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setIncentiveRewardMethod(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[5], value);
      this.incentiveRewardMethodBuilder = null;
      this.incentiveRewardMethod = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'incentiveRewardMethod' field has been set.
      * Code and description describing the reward method for the incentive.
      * @return True if the 'incentiveRewardMethod' field has been set, false otherwise.
      */
    public boolean hasIncentiveRewardMethod() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'incentiveRewardMethod' field and creates one if it doesn't exist yet.
     * Code and description describing the reward method for the incentive.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getIncentiveRewardMethodBuilder() {
      if (incentiveRewardMethodBuilder == null) {
        if (hasIncentiveRewardMethod()) {
          setIncentiveRewardMethodBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(incentiveRewardMethod));
        } else {
          setIncentiveRewardMethodBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return incentiveRewardMethodBuilder;
    }

    /**
     * Sets the Builder instance for the 'incentiveRewardMethod' field
     * Code and description describing the reward method for the incentive.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder setIncentiveRewardMethodBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearIncentiveRewardMethod();
      incentiveRewardMethodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'incentiveRewardMethod' field has an active Builder instance
     * Code and description describing the reward method for the incentive.
     * @return True if the 'incentiveRewardMethod' field has an active Builder instance
     */
    public boolean hasIncentiveRewardMethodBuilder() {
      return incentiveRewardMethodBuilder != null;
    }

    /**
      * Clears the value of the 'incentiveRewardMethod' field.
      * Code and description describing the reward method for the incentive.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.membership.PlanIncentive.Builder clearIncentiveRewardMethod() {
      incentiveRewardMethod = null;
      incentiveRewardMethodBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanIncentive build() {
      try {
        PlanIncentive record = new PlanIncentive();
        record.annualMaxRewardAmount = fieldSetFlags()[0] ? this.annualMaxRewardAmount : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dailyMaxRewardAmount = fieldSetFlags()[1] ? this.dailyMaxRewardAmount : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.effectiveDate = fieldSetFlags()[2] ? this.effectiveDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.expirationDate = fieldSetFlags()[3] ? this.expirationDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (incentiveCalculationBasisBuilder != null) {
          record.incentiveCalculationBasis = this.incentiveCalculationBasisBuilder.build();
        } else {
          record.incentiveCalculationBasis = fieldSetFlags()[4] ? this.incentiveCalculationBasis : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[4]);
        }
        if (incentiveRewardMethodBuilder != null) {
          record.incentiveRewardMethod = this.incentiveRewardMethodBuilder.build();
        } else {
          record.incentiveRewardMethod = fieldSetFlags()[5] ? this.incentiveRewardMethod : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[5]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanIncentive>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanIncentive>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanIncentive>
    READER$ = (org.apache.avro.io.DatumReader<PlanIncentive>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
