/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.individual;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Language extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 293861384036721996L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Language\",\"namespace\":\"com.uhc.schema.model.eligibility.individual\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Defines the language use type, e.g., Spoken, Written\",\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Language> ENCODER =
      new BinaryMessageEncoder<Language>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Language> DECODER =
      new BinaryMessageDecoder<Language>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Language> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Language> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Language>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Language to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Language from a ByteBuffer. */
  public static Language fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence code;
  /** Defines the language use type, e.g., Spoken, Written */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType type;
  @Deprecated public java.lang.CharSequence value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Language() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param type Defines the language use type, e.g., Spoken, Written
   * @param value The new value for value
   */
  public Language(java.lang.CharSequence code, com.uhc.schema.model.eligibility.common.DescriptionType type, java.lang.CharSequence value) {
    this.code = code;
    this.type = type;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return type;
    case 2: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: type = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 2: value = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Defines the language use type, e.g., Spoken, Written
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Defines the language use type, e.g., Spoken, Written
   * @param value the value to set.
   */
  public void setType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Creates a new Language RecordBuilder.
   * @return A new Language RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.Language.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.individual.Language.Builder();
  }

  /**
   * Creates a new Language RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Language RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.Language.Builder newBuilder(com.uhc.schema.model.eligibility.individual.Language.Builder other) {
    return new com.uhc.schema.model.eligibility.individual.Language.Builder(other);
  }

  /**
   * Creates a new Language RecordBuilder by copying an existing Language instance.
   * @param other The existing instance to copy.
   * @return A new Language RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.Language.Builder newBuilder(com.uhc.schema.model.eligibility.individual.Language other) {
    return new com.uhc.schema.model.eligibility.individual.Language.Builder(other);
  }

  /**
   * RecordBuilder for Language instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Language>
    implements org.apache.avro.data.RecordBuilder<Language> {

    private java.lang.CharSequence code;
    /** Defines the language use type, e.g., Spoken, Written */
    private com.uhc.schema.model.eligibility.common.DescriptionType type;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder typeBuilder;
    private java.lang.CharSequence value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.Language.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (other.hasTypeBuilder()) {
        this.typeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getTypeBuilder());
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Language instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.Language other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      this.typeBuilder = null;
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Language.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Language.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Defines the language use type, e.g., Spoken, Written
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * Defines the language use type, e.g., Spoken, Written
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Language.Builder setType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[1], value);
      this.typeBuilder = null;
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Defines the language use type, e.g., Spoken, Written
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'type' field and creates one if it doesn't exist yet.
     * Defines the language use type, e.g., Spoken, Written
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getTypeBuilder() {
      if (typeBuilder == null) {
        if (hasType()) {
          setTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(type));
        } else {
          setTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return typeBuilder;
    }

    /**
     * Sets the Builder instance for the 'type' field
     * Defines the language use type, e.g., Spoken, Written
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.Language.Builder setTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearType();
      typeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'type' field has an active Builder instance
     * Defines the language use type, e.g., Spoken, Written
     * @return True if the 'type' field has an active Builder instance
     */
    public boolean hasTypeBuilder() {
      return typeBuilder != null;
    }

    /**
      * Clears the value of the 'type' field.
      * Defines the language use type, e.g., Spoken, Written
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Language.Builder clearType() {
      type = null;
      typeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Language.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Language.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Language build() {
      try {
        Language record = new Language();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (typeBuilder != null) {
          record.type = this.typeBuilder.build();
        } else {
          record.type = fieldSetFlags()[1] ? this.type : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[1]);
        }
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Language>
    WRITER$ = (org.apache.avro.io.DatumWriter<Language>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Language>
    READER$ = (org.apache.avro.io.DatumReader<Language>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
