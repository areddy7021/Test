/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.individual;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1580199359929935002L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employment\",\"namespace\":\"com.uhc.schema.model.eligibility.individual\",\"fields\":[{\"name\":\"cancellationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"classType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"departmentNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The unique identifier assigned to the employer location.\",\"default\":null},{\"name\":\"divisionNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The unique identifier assigned to the reporting category for the employer.\",\"default\":null},{\"name\":\"employeeIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"hireDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"isExecutiveIndicator\",\"type\":\"boolean\",\"doc\":\"Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.\",\"default\":false},{\"name\":\"organizationIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"retirementDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"salaryAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"salaryFrequencyType\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"com.uhc.schema.model.eligibility.common.DescriptionType\"],\"default\":null},{\"name\":\"workHourCount\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employment> ENCODER =
      new BinaryMessageEncoder<Employment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employment> DECODER =
      new BinaryMessageDecoder<Employment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employment>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employment to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employment from a ByteBuffer. */
  public static Employment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence cancellationDate;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType classType;
  /** The unique identifier assigned to the employer location. */
  @Deprecated public java.lang.CharSequence departmentNumber;
  /** The unique identifier assigned to the reporting category for the employer. */
  @Deprecated public java.lang.CharSequence divisionNumber;
  @Deprecated public java.lang.CharSequence employeeIdentifier;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence endDate;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence hireDate;
  /** Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not. */
  @Deprecated public boolean isExecutiveIndicator;
  @Deprecated public java.lang.CharSequence organizationIdentifier;
  /** Date format: CCYY-MM-DD */
  @Deprecated public java.lang.CharSequence retirementDate;
  @Deprecated public java.lang.CharSequence salaryAmount;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType salaryFrequencyType;
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType status;
  @Deprecated public java.lang.Integer workHourCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employment() {}

  /**
   * All-args constructor.
   * @param cancellationDate Date format: CCYY-MM-DD
   * @param classType The new value for classType
   * @param departmentNumber The unique identifier assigned to the employer location.
   * @param divisionNumber The unique identifier assigned to the reporting category for the employer.
   * @param employeeIdentifier The new value for employeeIdentifier
   * @param endDate Date format: CCYY-MM-DD
   * @param hireDate Date format: CCYY-MM-DD
   * @param isExecutiveIndicator Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
   * @param organizationIdentifier The new value for organizationIdentifier
   * @param retirementDate Date format: CCYY-MM-DD
   * @param salaryAmount The new value for salaryAmount
   * @param salaryFrequencyType The new value for salaryFrequencyType
   * @param status The new value for status
   * @param workHourCount The new value for workHourCount
   */
  public Employment(java.lang.CharSequence cancellationDate, com.uhc.schema.model.eligibility.common.DescriptionType classType, java.lang.CharSequence departmentNumber, java.lang.CharSequence divisionNumber, java.lang.CharSequence employeeIdentifier, java.lang.CharSequence endDate, java.lang.CharSequence hireDate, java.lang.Boolean isExecutiveIndicator, java.lang.CharSequence organizationIdentifier, java.lang.CharSequence retirementDate, java.lang.CharSequence salaryAmount, com.uhc.schema.model.eligibility.common.DescriptionType salaryFrequencyType, com.uhc.schema.model.eligibility.common.DescriptionType status, java.lang.Integer workHourCount) {
    this.cancellationDate = cancellationDate;
    this.classType = classType;
    this.departmentNumber = departmentNumber;
    this.divisionNumber = divisionNumber;
    this.employeeIdentifier = employeeIdentifier;
    this.endDate = endDate;
    this.hireDate = hireDate;
    this.isExecutiveIndicator = isExecutiveIndicator;
    this.organizationIdentifier = organizationIdentifier;
    this.retirementDate = retirementDate;
    this.salaryAmount = salaryAmount;
    this.salaryFrequencyType = salaryFrequencyType;
    this.status = status;
    this.workHourCount = workHourCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cancellationDate;
    case 1: return classType;
    case 2: return departmentNumber;
    case 3: return divisionNumber;
    case 4: return employeeIdentifier;
    case 5: return endDate;
    case 6: return hireDate;
    case 7: return isExecutiveIndicator;
    case 8: return organizationIdentifier;
    case 9: return retirementDate;
    case 10: return salaryAmount;
    case 11: return salaryFrequencyType;
    case 12: return status;
    case 13: return workHourCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cancellationDate = (java.lang.CharSequence)value$; break;
    case 1: classType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 2: departmentNumber = (java.lang.CharSequence)value$; break;
    case 3: divisionNumber = (java.lang.CharSequence)value$; break;
    case 4: employeeIdentifier = (java.lang.CharSequence)value$; break;
    case 5: endDate = (java.lang.CharSequence)value$; break;
    case 6: hireDate = (java.lang.CharSequence)value$; break;
    case 7: isExecutiveIndicator = (java.lang.Boolean)value$; break;
    case 8: organizationIdentifier = (java.lang.CharSequence)value$; break;
    case 9: retirementDate = (java.lang.CharSequence)value$; break;
    case 10: salaryAmount = (java.lang.CharSequence)value$; break;
    case 11: salaryFrequencyType = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 12: status = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 13: workHourCount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cancellationDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getCancellationDate() {
    return cancellationDate;
  }

  /**
   * Sets the value of the 'cancellationDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setCancellationDate(java.lang.CharSequence value) {
    this.cancellationDate = value;
  }

  /**
   * Gets the value of the 'classType' field.
   * @return The value of the 'classType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getClassType() {
    return classType;
  }

  /**
   * Sets the value of the 'classType' field.
   * @param value the value to set.
   */
  public void setClassType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.classType = value;
  }

  /**
   * Gets the value of the 'departmentNumber' field.
   * @return The unique identifier assigned to the employer location.
   */
  public java.lang.CharSequence getDepartmentNumber() {
    return departmentNumber;
  }

  /**
   * Sets the value of the 'departmentNumber' field.
   * The unique identifier assigned to the employer location.
   * @param value the value to set.
   */
  public void setDepartmentNumber(java.lang.CharSequence value) {
    this.departmentNumber = value;
  }

  /**
   * Gets the value of the 'divisionNumber' field.
   * @return The unique identifier assigned to the reporting category for the employer.
   */
  public java.lang.CharSequence getDivisionNumber() {
    return divisionNumber;
  }

  /**
   * Sets the value of the 'divisionNumber' field.
   * The unique identifier assigned to the reporting category for the employer.
   * @param value the value to set.
   */
  public void setDivisionNumber(java.lang.CharSequence value) {
    this.divisionNumber = value;
  }

  /**
   * Gets the value of the 'employeeIdentifier' field.
   * @return The value of the 'employeeIdentifier' field.
   */
  public java.lang.CharSequence getEmployeeIdentifier() {
    return employeeIdentifier;
  }

  /**
   * Sets the value of the 'employeeIdentifier' field.
   * @param value the value to set.
   */
  public void setEmployeeIdentifier(java.lang.CharSequence value) {
    this.employeeIdentifier = value;
  }

  /**
   * Gets the value of the 'endDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getEndDate() {
    return endDate;
  }

  /**
   * Sets the value of the 'endDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setEndDate(java.lang.CharSequence value) {
    this.endDate = value;
  }

  /**
   * Gets the value of the 'hireDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getHireDate() {
    return hireDate;
  }

  /**
   * Sets the value of the 'hireDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setHireDate(java.lang.CharSequence value) {
    this.hireDate = value;
  }

  /**
   * Gets the value of the 'isExecutiveIndicator' field.
   * @return Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
   */
  public java.lang.Boolean getIsExecutiveIndicator() {
    return isExecutiveIndicator;
  }

  /**
   * Sets the value of the 'isExecutiveIndicator' field.
   * Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
   * @param value the value to set.
   */
  public void setIsExecutiveIndicator(java.lang.Boolean value) {
    this.isExecutiveIndicator = value;
  }

  /**
   * Gets the value of the 'organizationIdentifier' field.
   * @return The value of the 'organizationIdentifier' field.
   */
  public java.lang.CharSequence getOrganizationIdentifier() {
    return organizationIdentifier;
  }

  /**
   * Sets the value of the 'organizationIdentifier' field.
   * @param value the value to set.
   */
  public void setOrganizationIdentifier(java.lang.CharSequence value) {
    this.organizationIdentifier = value;
  }

  /**
   * Gets the value of the 'retirementDate' field.
   * @return Date format: CCYY-MM-DD
   */
  public java.lang.CharSequence getRetirementDate() {
    return retirementDate;
  }

  /**
   * Sets the value of the 'retirementDate' field.
   * Date format: CCYY-MM-DD
   * @param value the value to set.
   */
  public void setRetirementDate(java.lang.CharSequence value) {
    this.retirementDate = value;
  }

  /**
   * Gets the value of the 'salaryAmount' field.
   * @return The value of the 'salaryAmount' field.
   */
  public java.lang.CharSequence getSalaryAmount() {
    return salaryAmount;
  }

  /**
   * Sets the value of the 'salaryAmount' field.
   * @param value the value to set.
   */
  public void setSalaryAmount(java.lang.CharSequence value) {
    this.salaryAmount = value;
  }

  /**
   * Gets the value of the 'salaryFrequencyType' field.
   * @return The value of the 'salaryFrequencyType' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getSalaryFrequencyType() {
    return salaryFrequencyType;
  }

  /**
   * Sets the value of the 'salaryFrequencyType' field.
   * @param value the value to set.
   */
  public void setSalaryFrequencyType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.salaryFrequencyType = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'workHourCount' field.
   * @return The value of the 'workHourCount' field.
   */
  public java.lang.Integer getWorkHourCount() {
    return workHourCount;
  }

  /**
   * Sets the value of the 'workHourCount' field.
   * @param value the value to set.
   */
  public void setWorkHourCount(java.lang.Integer value) {
    this.workHourCount = value;
  }

  /**
   * Creates a new Employment RecordBuilder.
   * @return A new Employment RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.Employment.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.individual.Employment.Builder();
  }

  /**
   * Creates a new Employment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employment RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.Employment.Builder newBuilder(com.uhc.schema.model.eligibility.individual.Employment.Builder other) {
    return new com.uhc.schema.model.eligibility.individual.Employment.Builder(other);
  }

  /**
   * Creates a new Employment RecordBuilder by copying an existing Employment instance.
   * @param other The existing instance to copy.
   * @return A new Employment RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.Employment.Builder newBuilder(com.uhc.schema.model.eligibility.individual.Employment other) {
    return new com.uhc.schema.model.eligibility.individual.Employment.Builder(other);
  }

  /**
   * RecordBuilder for Employment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employment>
    implements org.apache.avro.data.RecordBuilder<Employment> {

    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence cancellationDate;
    private com.uhc.schema.model.eligibility.common.DescriptionType classType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder classTypeBuilder;
    /** The unique identifier assigned to the employer location. */
    private java.lang.CharSequence departmentNumber;
    /** The unique identifier assigned to the reporting category for the employer. */
    private java.lang.CharSequence divisionNumber;
    private java.lang.CharSequence employeeIdentifier;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence endDate;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence hireDate;
    /** Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not. */
    private boolean isExecutiveIndicator;
    private java.lang.CharSequence organizationIdentifier;
    /** Date format: CCYY-MM-DD */
    private java.lang.CharSequence retirementDate;
    private java.lang.CharSequence salaryAmount;
    private com.uhc.schema.model.eligibility.common.DescriptionType salaryFrequencyType;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder salaryFrequencyTypeBuilder;
    private com.uhc.schema.model.eligibility.common.DescriptionType status;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder statusBuilder;
    private java.lang.Integer workHourCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.Employment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cancellationDate)) {
        this.cancellationDate = data().deepCopy(fields()[0].schema(), other.cancellationDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.classType)) {
        this.classType = data().deepCopy(fields()[1].schema(), other.classType);
        fieldSetFlags()[1] = true;
      }
      if (other.hasClassTypeBuilder()) {
        this.classTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getClassTypeBuilder());
      }
      if (isValidValue(fields()[2], other.departmentNumber)) {
        this.departmentNumber = data().deepCopy(fields()[2].schema(), other.departmentNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.divisionNumber)) {
        this.divisionNumber = data().deepCopy(fields()[3].schema(), other.divisionNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.employeeIdentifier)) {
        this.employeeIdentifier = data().deepCopy(fields()[4].schema(), other.employeeIdentifier);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endDate)) {
        this.endDate = data().deepCopy(fields()[5].schema(), other.endDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hireDate)) {
        this.hireDate = data().deepCopy(fields()[6].schema(), other.hireDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isExecutiveIndicator)) {
        this.isExecutiveIndicator = data().deepCopy(fields()[7].schema(), other.isExecutiveIndicator);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.organizationIdentifier)) {
        this.organizationIdentifier = data().deepCopy(fields()[8].schema(), other.organizationIdentifier);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.retirementDate)) {
        this.retirementDate = data().deepCopy(fields()[9].schema(), other.retirementDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.salaryAmount)) {
        this.salaryAmount = data().deepCopy(fields()[10].schema(), other.salaryAmount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.salaryFrequencyType)) {
        this.salaryFrequencyType = data().deepCopy(fields()[11].schema(), other.salaryFrequencyType);
        fieldSetFlags()[11] = true;
      }
      if (other.hasSalaryFrequencyTypeBuilder()) {
        this.salaryFrequencyTypeBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getSalaryFrequencyTypeBuilder());
      }
      if (isValidValue(fields()[12], other.status)) {
        this.status = data().deepCopy(fields()[12].schema(), other.status);
        fieldSetFlags()[12] = true;
      }
      if (other.hasStatusBuilder()) {
        this.statusBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getStatusBuilder());
      }
      if (isValidValue(fields()[13], other.workHourCount)) {
        this.workHourCount = data().deepCopy(fields()[13].schema(), other.workHourCount);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Employment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.Employment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cancellationDate)) {
        this.cancellationDate = data().deepCopy(fields()[0].schema(), other.cancellationDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.classType)) {
        this.classType = data().deepCopy(fields()[1].schema(), other.classType);
        fieldSetFlags()[1] = true;
      }
      this.classTypeBuilder = null;
      if (isValidValue(fields()[2], other.departmentNumber)) {
        this.departmentNumber = data().deepCopy(fields()[2].schema(), other.departmentNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.divisionNumber)) {
        this.divisionNumber = data().deepCopy(fields()[3].schema(), other.divisionNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.employeeIdentifier)) {
        this.employeeIdentifier = data().deepCopy(fields()[4].schema(), other.employeeIdentifier);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endDate)) {
        this.endDate = data().deepCopy(fields()[5].schema(), other.endDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hireDate)) {
        this.hireDate = data().deepCopy(fields()[6].schema(), other.hireDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isExecutiveIndicator)) {
        this.isExecutiveIndicator = data().deepCopy(fields()[7].schema(), other.isExecutiveIndicator);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.organizationIdentifier)) {
        this.organizationIdentifier = data().deepCopy(fields()[8].schema(), other.organizationIdentifier);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.retirementDate)) {
        this.retirementDate = data().deepCopy(fields()[9].schema(), other.retirementDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.salaryAmount)) {
        this.salaryAmount = data().deepCopy(fields()[10].schema(), other.salaryAmount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.salaryFrequencyType)) {
        this.salaryFrequencyType = data().deepCopy(fields()[11].schema(), other.salaryFrequencyType);
        fieldSetFlags()[11] = true;
      }
      this.salaryFrequencyTypeBuilder = null;
      if (isValidValue(fields()[12], other.status)) {
        this.status = data().deepCopy(fields()[12].schema(), other.status);
        fieldSetFlags()[12] = true;
      }
      this.statusBuilder = null;
      if (isValidValue(fields()[13], other.workHourCount)) {
        this.workHourCount = data().deepCopy(fields()[13].schema(), other.workHourCount);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'cancellationDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getCancellationDate() {
      return cancellationDate;
    }

    /**
      * Sets the value of the 'cancellationDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'cancellationDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setCancellationDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.cancellationDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cancellationDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'cancellationDate' field has been set, false otherwise.
      */
    public boolean hasCancellationDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cancellationDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearCancellationDate() {
      cancellationDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'classType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getClassType() {
      return classType;
    }

    /**
      * Sets the value of the 'classType' field.
      * @param value The value of 'classType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setClassType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[1], value);
      this.classTypeBuilder = null;
      this.classType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'classType' field has been set.
      * @return True if the 'classType' field has been set, false otherwise.
      */
    public boolean hasClassType() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'classType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getClassTypeBuilder() {
      if (classTypeBuilder == null) {
        if (hasClassType()) {
          setClassTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(classType));
        } else {
          setClassTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return classTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'classType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setClassTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearClassType();
      classTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'classType' field has an active Builder instance
     * @return True if the 'classType' field has an active Builder instance
     */
    public boolean hasClassTypeBuilder() {
      return classTypeBuilder != null;
    }

    /**
      * Clears the value of the 'classType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearClassType() {
      classType = null;
      classTypeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'departmentNumber' field.
      * The unique identifier assigned to the employer location.
      * @return The value.
      */
    public java.lang.CharSequence getDepartmentNumber() {
      return departmentNumber;
    }

    /**
      * Sets the value of the 'departmentNumber' field.
      * The unique identifier assigned to the employer location.
      * @param value The value of 'departmentNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setDepartmentNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.departmentNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'departmentNumber' field has been set.
      * The unique identifier assigned to the employer location.
      * @return True if the 'departmentNumber' field has been set, false otherwise.
      */
    public boolean hasDepartmentNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'departmentNumber' field.
      * The unique identifier assigned to the employer location.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearDepartmentNumber() {
      departmentNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'divisionNumber' field.
      * The unique identifier assigned to the reporting category for the employer.
      * @return The value.
      */
    public java.lang.CharSequence getDivisionNumber() {
      return divisionNumber;
    }

    /**
      * Sets the value of the 'divisionNumber' field.
      * The unique identifier assigned to the reporting category for the employer.
      * @param value The value of 'divisionNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setDivisionNumber(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.divisionNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'divisionNumber' field has been set.
      * The unique identifier assigned to the reporting category for the employer.
      * @return True if the 'divisionNumber' field has been set, false otherwise.
      */
    public boolean hasDivisionNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'divisionNumber' field.
      * The unique identifier assigned to the reporting category for the employer.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearDivisionNumber() {
      divisionNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'employeeIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmployeeIdentifier() {
      return employeeIdentifier;
    }

    /**
      * Sets the value of the 'employeeIdentifier' field.
      * @param value The value of 'employeeIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setEmployeeIdentifier(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.employeeIdentifier = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'employeeIdentifier' field has been set.
      * @return True if the 'employeeIdentifier' field has been set, false otherwise.
      */
    public boolean hasEmployeeIdentifier() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'employeeIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearEmployeeIdentifier() {
      employeeIdentifier = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getEndDate() {
      return endDate;
    }

    /**
      * Sets the value of the 'endDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'endDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setEndDate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.endDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'endDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'endDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'endDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearEndDate() {
      endDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hireDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getHireDate() {
      return hireDate;
    }

    /**
      * Sets the value of the 'hireDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'hireDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setHireDate(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.hireDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hireDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'hireDate' field has been set, false otherwise.
      */
    public boolean hasHireDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hireDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearHireDate() {
      hireDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isExecutiveIndicator' field.
      * Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
      * @return The value.
      */
    public java.lang.Boolean getIsExecutiveIndicator() {
      return isExecutiveIndicator;
    }

    /**
      * Sets the value of the 'isExecutiveIndicator' field.
      * Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
      * @param value The value of 'isExecutiveIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setIsExecutiveIndicator(boolean value) {
      validate(fields()[7], value);
      this.isExecutiveIndicator = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isExecutiveIndicator' field has been set.
      * Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
      * @return True if the 'isExecutiveIndicator' field has been set, false otherwise.
      */
    public boolean hasIsExecutiveIndicator() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isExecutiveIndicator' field.
      * Indicates if a member is an Executive and therefore eligible for the Executive Physical. A value of true indicates that they are eligible, while a value of false indicates they are not.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearIsExecutiveIndicator() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrganizationIdentifier() {
      return organizationIdentifier;
    }

    /**
      * Sets the value of the 'organizationIdentifier' field.
      * @param value The value of 'organizationIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setOrganizationIdentifier(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.organizationIdentifier = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationIdentifier' field has been set.
      * @return True if the 'organizationIdentifier' field has been set, false otherwise.
      */
    public boolean hasOrganizationIdentifier() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'organizationIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearOrganizationIdentifier() {
      organizationIdentifier = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'retirementDate' field.
      * Date format: CCYY-MM-DD
      * @return The value.
      */
    public java.lang.CharSequence getRetirementDate() {
      return retirementDate;
    }

    /**
      * Sets the value of the 'retirementDate' field.
      * Date format: CCYY-MM-DD
      * @param value The value of 'retirementDate'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setRetirementDate(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.retirementDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'retirementDate' field has been set.
      * Date format: CCYY-MM-DD
      * @return True if the 'retirementDate' field has been set, false otherwise.
      */
    public boolean hasRetirementDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'retirementDate' field.
      * Date format: CCYY-MM-DD
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearRetirementDate() {
      retirementDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'salaryAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getSalaryAmount() {
      return salaryAmount;
    }

    /**
      * Sets the value of the 'salaryAmount' field.
      * @param value The value of 'salaryAmount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setSalaryAmount(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.salaryAmount = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'salaryAmount' field has been set.
      * @return True if the 'salaryAmount' field has been set, false otherwise.
      */
    public boolean hasSalaryAmount() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'salaryAmount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearSalaryAmount() {
      salaryAmount = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'salaryFrequencyType' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getSalaryFrequencyType() {
      return salaryFrequencyType;
    }

    /**
      * Sets the value of the 'salaryFrequencyType' field.
      * @param value The value of 'salaryFrequencyType'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setSalaryFrequencyType(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[11], value);
      this.salaryFrequencyTypeBuilder = null;
      this.salaryFrequencyType = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'salaryFrequencyType' field has been set.
      * @return True if the 'salaryFrequencyType' field has been set, false otherwise.
      */
    public boolean hasSalaryFrequencyType() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'salaryFrequencyType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getSalaryFrequencyTypeBuilder() {
      if (salaryFrequencyTypeBuilder == null) {
        if (hasSalaryFrequencyType()) {
          setSalaryFrequencyTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(salaryFrequencyType));
        } else {
          setSalaryFrequencyTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return salaryFrequencyTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'salaryFrequencyType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setSalaryFrequencyTypeBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearSalaryFrequencyType();
      salaryFrequencyTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'salaryFrequencyType' field has an active Builder instance
     * @return True if the 'salaryFrequencyType' field has an active Builder instance
     */
    public boolean hasSalaryFrequencyTypeBuilder() {
      return salaryFrequencyTypeBuilder != null;
    }

    /**
      * Clears the value of the 'salaryFrequencyType' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearSalaryFrequencyType() {
      salaryFrequencyType = null;
      salaryFrequencyTypeBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setStatus(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[12], value);
      this.statusBuilder = null;
      this.status = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'status' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getStatusBuilder() {
      if (statusBuilder == null) {
        if (hasStatus()) {
          setStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(status));
        } else {
          setStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return statusBuilder;
    }

    /**
     * Sets the Builder instance for the 'status' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setStatusBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearStatus();
      statusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'status' field has an active Builder instance
     * @return True if the 'status' field has an active Builder instance
     */
    public boolean hasStatusBuilder() {
      return statusBuilder != null;
    }

    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearStatus() {
      status = null;
      statusBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'workHourCount' field.
      * @return The value.
      */
    public java.lang.Integer getWorkHourCount() {
      return workHourCount;
    }

    /**
      * Sets the value of the 'workHourCount' field.
      * @param value The value of 'workHourCount'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder setWorkHourCount(java.lang.Integer value) {
      validate(fields()[13], value);
      this.workHourCount = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'workHourCount' field has been set.
      * @return True if the 'workHourCount' field has been set, false otherwise.
      */
    public boolean hasWorkHourCount() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'workHourCount' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.Employment.Builder clearWorkHourCount() {
      workHourCount = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employment build() {
      try {
        Employment record = new Employment();
        record.cancellationDate = fieldSetFlags()[0] ? this.cancellationDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (classTypeBuilder != null) {
          record.classType = this.classTypeBuilder.build();
        } else {
          record.classType = fieldSetFlags()[1] ? this.classType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[1]);
        }
        record.departmentNumber = fieldSetFlags()[2] ? this.departmentNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.divisionNumber = fieldSetFlags()[3] ? this.divisionNumber : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.employeeIdentifier = fieldSetFlags()[4] ? this.employeeIdentifier : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.endDate = fieldSetFlags()[5] ? this.endDate : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.hireDate = fieldSetFlags()[6] ? this.hireDate : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.isExecutiveIndicator = fieldSetFlags()[7] ? this.isExecutiveIndicator : (java.lang.Boolean) defaultValue(fields()[7]);
        record.organizationIdentifier = fieldSetFlags()[8] ? this.organizationIdentifier : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.retirementDate = fieldSetFlags()[9] ? this.retirementDate : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.salaryAmount = fieldSetFlags()[10] ? this.salaryAmount : (java.lang.CharSequence) defaultValue(fields()[10]);
        if (salaryFrequencyTypeBuilder != null) {
          record.salaryFrequencyType = this.salaryFrequencyTypeBuilder.build();
        } else {
          record.salaryFrequencyType = fieldSetFlags()[11] ? this.salaryFrequencyType : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[11]);
        }
        if (statusBuilder != null) {
          record.status = this.statusBuilder.build();
        } else {
          record.status = fieldSetFlags()[12] ? this.status : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[12]);
        }
        record.workHourCount = fieldSetFlags()[13] ? this.workHourCount : (java.lang.Integer) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employment>
    READER$ = (org.apache.avro.io.DatumReader<Employment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
