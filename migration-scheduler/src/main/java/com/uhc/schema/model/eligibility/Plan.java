/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Plan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6649416767330261410L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Plan\",\"namespace\":\"com.uhc.schema.model.eligibility\",\"fields\":[{\"name\":\"dentalRewardsIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.\",\"default\":null},{\"name\":\"designatedNetwork\",\"type\":[\"null\",\"string\"],\"doc\":\"The default healthcare network assigned to the plan.\",\"default\":null},{\"name\":\"designatedVirtualClinicalNetworkBenefitIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the plan has a benefit which is in a designated virtual clinic network.\",\"default\":null},{\"name\":\"employerGroupIndicator\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fundingArrangement\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DescriptionType\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"Identifies the financial arrangements between UHG and Customers.\",\"default\":null},{\"name\":\"hasRxBenefitIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the plan has an RX benefit. Ex: Y, N.\",\"default\":null},{\"name\":\"isEHBPlan\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies plan as an Essential Health Benefit plan. Ex: Y, N.\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"networkProviderRelationshipIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.\",\"default\":null},{\"name\":\"networkScheduleAlternateIdentifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NetworkScheduleAlternateIdentifier\",\"namespace\":\"com.uhc.schema.model.eligibility.plan\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identifier\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"doc\":\"A list of alteranate network schedule identfiers as defined by their source systems.\",\"default\":null},{\"name\":\"networkScheduleIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies the network schedule used by the benefit bundle option.\",\"default\":null},{\"name\":\"optionDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"Description for the plan option.\",\"default\":null},{\"name\":\"optionId\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier of the plan option.\",\"default\":null},{\"name\":\"planCategorizationAttributes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PlanCategorizationAttributes\",\"namespace\":\"com.uhc.schema.model.eligibility.plan\",\"fields\":[{\"name\":\"attributeName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the attribute.\",\"default\":null},{\"name\":\"attributeValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Value for the attribute.\",\"default\":null},{\"name\":\"benefitPeriodCalculationBasis\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates when a given attribute should be considered ‘effective’ in respect to a group’s policy year. Ex: DateCertain, OnRenewal\",\"default\":null},{\"name\":\"effectiveDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Effective date for the attribute. Date format: CCYY-MM-DD\",\"default\":null},{\"name\":\"expirationDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Expiration date for the attribute. Date format: CCYY-MM-DD\",\"default\":null}]}}],\"doc\":\"A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.\",\"default\":null},{\"name\":\"planCategoryName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planSubCategoryName\",\"type\":[\"null\",\"string\"],\"doc\":\"The subcategory name for the member's Plan.\",\"default\":null},{\"name\":\"planTypeDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planTypeIdentifier\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"planTypeName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"riderBit\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"security\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Security\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"fields\":[{\"name\":\"securitySourceSystemCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"securityPermission\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SecurityPermission\",\"fields\":[{\"name\":\"securityPermissionValue\",\"type\":[\"null\",\"string\"],\"doc\":\"A security attribute identifying the secure class under which the record instance is administered.\",\"default\":null}]}}],\"doc\":\"Superset of Security permissions\",\"default\":null},{\"name\":\"securityPermissionAny\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"SecurityPermission\"}],\"doc\":\"Subset of security permissions This is used for source systems that require at least one permission from the superset of permissions to be present.\",\"default\":null}]}],\"default\":null},{\"name\":\"sourceSystemCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"versionNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the plan.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Plan> ENCODER =
      new BinaryMessageEncoder<Plan>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Plan> DECODER =
      new BinaryMessageDecoder<Plan>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Plan> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Plan> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Plan>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Plan to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Plan from a ByteBuffer. */
  public static Plan fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N. */
  @Deprecated public java.lang.CharSequence dentalRewardsIndicator;
  /** The default healthcare network assigned to the plan. */
  @Deprecated public java.lang.CharSequence designatedNetwork;
  /** Indicates if the plan has a benefit which is in a designated virtual clinic network. */
  @Deprecated public java.lang.CharSequence designatedVirtualClinicalNetworkBenefitIndicator;
  @Deprecated public java.lang.CharSequence employerGroupIndicator;
  /** Identifies the financial arrangements between UHG and Customers. */
  @Deprecated public com.uhc.schema.model.eligibility.common.DescriptionType fundingArrangement;
  /** Indicates if the plan has an RX benefit. Ex: Y, N. */
  @Deprecated public java.lang.CharSequence hasRxBenefitIndicator;
  /** Identifies plan as an Essential Health Benefit plan. Ex: Y, N. */
  @Deprecated public java.lang.CharSequence isEHBPlan;
  @Deprecated public java.lang.CharSequence name;
  /** Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements. */
  @Deprecated public java.lang.CharSequence networkProviderRelationshipIdentifier;
  /** A list of alteranate network schedule identfiers as defined by their source systems. */
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> networkScheduleAlternateIdentifiers;
  /** Identifies the network schedule used by the benefit bundle option. */
  @Deprecated public java.lang.CharSequence networkScheduleIdentifier;
  /** Description for the plan option. */
  @Deprecated public java.lang.CharSequence optionDescription;
  /** Identifier of the plan option. */
  @Deprecated public java.lang.CharSequence optionId;
  /** A list of attributes and attribute values that can be added to an Attribute Schedule for a plan. */
  @Deprecated public java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> planCategorizationAttributes;
  @Deprecated public java.lang.CharSequence planCategoryName;
  @Deprecated public java.lang.CharSequence planCode;
  @Deprecated public java.lang.CharSequence planDescription;
  /** The subcategory name for the member's Plan. */
  @Deprecated public java.lang.CharSequence planSubCategoryName;
  @Deprecated public java.lang.CharSequence planTypeDescription;
  @Deprecated public java.lang.CharSequence planTypeIdentifier;
  @Deprecated public java.lang.CharSequence planTypeName;
  @Deprecated public java.lang.Integer riderBit;
  @Deprecated public com.uhc.schema.model.eligibility.common.Security security;
  @Deprecated public java.lang.CharSequence sourceSystemCode;
  /** The version of the plan. */
  @Deprecated public java.lang.CharSequence versionNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Plan() {}

  /**
   * All-args constructor.
   * @param dentalRewardsIndicator Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
   * @param designatedNetwork The default healthcare network assigned to the plan.
   * @param designatedVirtualClinicalNetworkBenefitIndicator Indicates if the plan has a benefit which is in a designated virtual clinic network.
   * @param employerGroupIndicator The new value for employerGroupIndicator
   * @param fundingArrangement Identifies the financial arrangements between UHG and Customers.
   * @param hasRxBenefitIndicator Indicates if the plan has an RX benefit. Ex: Y, N.
   * @param isEHBPlan Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
   * @param name The new value for name
   * @param networkProviderRelationshipIdentifier Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
   * @param networkScheduleAlternateIdentifiers A list of alteranate network schedule identfiers as defined by their source systems.
   * @param networkScheduleIdentifier Identifies the network schedule used by the benefit bundle option.
   * @param optionDescription Description for the plan option.
   * @param optionId Identifier of the plan option.
   * @param planCategorizationAttributes A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
   * @param planCategoryName The new value for planCategoryName
   * @param planCode The new value for planCode
   * @param planDescription The new value for planDescription
   * @param planSubCategoryName The subcategory name for the member's Plan.
   * @param planTypeDescription The new value for planTypeDescription
   * @param planTypeIdentifier The new value for planTypeIdentifier
   * @param planTypeName The new value for planTypeName
   * @param riderBit The new value for riderBit
   * @param security The new value for security
   * @param sourceSystemCode The new value for sourceSystemCode
   * @param versionNumber The version of the plan.
   */
  public Plan(java.lang.CharSequence dentalRewardsIndicator, java.lang.CharSequence designatedNetwork, java.lang.CharSequence designatedVirtualClinicalNetworkBenefitIndicator, java.lang.CharSequence employerGroupIndicator, com.uhc.schema.model.eligibility.common.DescriptionType fundingArrangement, java.lang.CharSequence hasRxBenefitIndicator, java.lang.CharSequence isEHBPlan, java.lang.CharSequence name, java.lang.CharSequence networkProviderRelationshipIdentifier, java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> networkScheduleAlternateIdentifiers, java.lang.CharSequence networkScheduleIdentifier, java.lang.CharSequence optionDescription, java.lang.CharSequence optionId, java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> planCategorizationAttributes, java.lang.CharSequence planCategoryName, java.lang.CharSequence planCode, java.lang.CharSequence planDescription, java.lang.CharSequence planSubCategoryName, java.lang.CharSequence planTypeDescription, java.lang.CharSequence planTypeIdentifier, java.lang.CharSequence planTypeName, java.lang.Integer riderBit, com.uhc.schema.model.eligibility.common.Security security, java.lang.CharSequence sourceSystemCode, java.lang.CharSequence versionNumber) {
    this.dentalRewardsIndicator = dentalRewardsIndicator;
    this.designatedNetwork = designatedNetwork;
    this.designatedVirtualClinicalNetworkBenefitIndicator = designatedVirtualClinicalNetworkBenefitIndicator;
    this.employerGroupIndicator = employerGroupIndicator;
    this.fundingArrangement = fundingArrangement;
    this.hasRxBenefitIndicator = hasRxBenefitIndicator;
    this.isEHBPlan = isEHBPlan;
    this.name = name;
    this.networkProviderRelationshipIdentifier = networkProviderRelationshipIdentifier;
    this.networkScheduleAlternateIdentifiers = networkScheduleAlternateIdentifiers;
    this.networkScheduleIdentifier = networkScheduleIdentifier;
    this.optionDescription = optionDescription;
    this.optionId = optionId;
    this.planCategorizationAttributes = planCategorizationAttributes;
    this.planCategoryName = planCategoryName;
    this.planCode = planCode;
    this.planDescription = planDescription;
    this.planSubCategoryName = planSubCategoryName;
    this.planTypeDescription = planTypeDescription;
    this.planTypeIdentifier = planTypeIdentifier;
    this.planTypeName = planTypeName;
    this.riderBit = riderBit;
    this.security = security;
    this.sourceSystemCode = sourceSystemCode;
    this.versionNumber = versionNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dentalRewardsIndicator;
    case 1: return designatedNetwork;
    case 2: return designatedVirtualClinicalNetworkBenefitIndicator;
    case 3: return employerGroupIndicator;
    case 4: return fundingArrangement;
    case 5: return hasRxBenefitIndicator;
    case 6: return isEHBPlan;
    case 7: return name;
    case 8: return networkProviderRelationshipIdentifier;
    case 9: return networkScheduleAlternateIdentifiers;
    case 10: return networkScheduleIdentifier;
    case 11: return optionDescription;
    case 12: return optionId;
    case 13: return planCategorizationAttributes;
    case 14: return planCategoryName;
    case 15: return planCode;
    case 16: return planDescription;
    case 17: return planSubCategoryName;
    case 18: return planTypeDescription;
    case 19: return planTypeIdentifier;
    case 20: return planTypeName;
    case 21: return riderBit;
    case 22: return security;
    case 23: return sourceSystemCode;
    case 24: return versionNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dentalRewardsIndicator = (java.lang.CharSequence)value$; break;
    case 1: designatedNetwork = (java.lang.CharSequence)value$; break;
    case 2: designatedVirtualClinicalNetworkBenefitIndicator = (java.lang.CharSequence)value$; break;
    case 3: employerGroupIndicator = (java.lang.CharSequence)value$; break;
    case 4: fundingArrangement = (com.uhc.schema.model.eligibility.common.DescriptionType)value$; break;
    case 5: hasRxBenefitIndicator = (java.lang.CharSequence)value$; break;
    case 6: isEHBPlan = (java.lang.CharSequence)value$; break;
    case 7: name = (java.lang.CharSequence)value$; break;
    case 8: networkProviderRelationshipIdentifier = (java.lang.CharSequence)value$; break;
    case 9: networkScheduleAlternateIdentifiers = (java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier>)value$; break;
    case 10: networkScheduleIdentifier = (java.lang.CharSequence)value$; break;
    case 11: optionDescription = (java.lang.CharSequence)value$; break;
    case 12: optionId = (java.lang.CharSequence)value$; break;
    case 13: planCategorizationAttributes = (java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes>)value$; break;
    case 14: planCategoryName = (java.lang.CharSequence)value$; break;
    case 15: planCode = (java.lang.CharSequence)value$; break;
    case 16: planDescription = (java.lang.CharSequence)value$; break;
    case 17: planSubCategoryName = (java.lang.CharSequence)value$; break;
    case 18: planTypeDescription = (java.lang.CharSequence)value$; break;
    case 19: planTypeIdentifier = (java.lang.CharSequence)value$; break;
    case 20: planTypeName = (java.lang.CharSequence)value$; break;
    case 21: riderBit = (java.lang.Integer)value$; break;
    case 22: security = (com.uhc.schema.model.eligibility.common.Security)value$; break;
    case 23: sourceSystemCode = (java.lang.CharSequence)value$; break;
    case 24: versionNumber = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dentalRewardsIndicator' field.
   * @return Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
   */
  public java.lang.CharSequence getDentalRewardsIndicator() {
    return dentalRewardsIndicator;
  }

  /**
   * Sets the value of the 'dentalRewardsIndicator' field.
   * Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
   * @param value the value to set.
   */
  public void setDentalRewardsIndicator(java.lang.CharSequence value) {
    this.dentalRewardsIndicator = value;
  }

  /**
   * Gets the value of the 'designatedNetwork' field.
   * @return The default healthcare network assigned to the plan.
   */
  public java.lang.CharSequence getDesignatedNetwork() {
    return designatedNetwork;
  }

  /**
   * Sets the value of the 'designatedNetwork' field.
   * The default healthcare network assigned to the plan.
   * @param value the value to set.
   */
  public void setDesignatedNetwork(java.lang.CharSequence value) {
    this.designatedNetwork = value;
  }

  /**
   * Gets the value of the 'designatedVirtualClinicalNetworkBenefitIndicator' field.
   * @return Indicates if the plan has a benefit which is in a designated virtual clinic network.
   */
  public java.lang.CharSequence getDesignatedVirtualClinicalNetworkBenefitIndicator() {
    return designatedVirtualClinicalNetworkBenefitIndicator;
  }

  /**
   * Sets the value of the 'designatedVirtualClinicalNetworkBenefitIndicator' field.
   * Indicates if the plan has a benefit which is in a designated virtual clinic network.
   * @param value the value to set.
   */
  public void setDesignatedVirtualClinicalNetworkBenefitIndicator(java.lang.CharSequence value) {
    this.designatedVirtualClinicalNetworkBenefitIndicator = value;
  }

  /**
   * Gets the value of the 'employerGroupIndicator' field.
   * @return The value of the 'employerGroupIndicator' field.
   */
  public java.lang.CharSequence getEmployerGroupIndicator() {
    return employerGroupIndicator;
  }

  /**
   * Sets the value of the 'employerGroupIndicator' field.
   * @param value the value to set.
   */
  public void setEmployerGroupIndicator(java.lang.CharSequence value) {
    this.employerGroupIndicator = value;
  }

  /**
   * Gets the value of the 'fundingArrangement' field.
   * @return Identifies the financial arrangements between UHG and Customers.
   */
  public com.uhc.schema.model.eligibility.common.DescriptionType getFundingArrangement() {
    return fundingArrangement;
  }

  /**
   * Sets the value of the 'fundingArrangement' field.
   * Identifies the financial arrangements between UHG and Customers.
   * @param value the value to set.
   */
  public void setFundingArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
    this.fundingArrangement = value;
  }

  /**
   * Gets the value of the 'hasRxBenefitIndicator' field.
   * @return Indicates if the plan has an RX benefit. Ex: Y, N.
   */
  public java.lang.CharSequence getHasRxBenefitIndicator() {
    return hasRxBenefitIndicator;
  }

  /**
   * Sets the value of the 'hasRxBenefitIndicator' field.
   * Indicates if the plan has an RX benefit. Ex: Y, N.
   * @param value the value to set.
   */
  public void setHasRxBenefitIndicator(java.lang.CharSequence value) {
    this.hasRxBenefitIndicator = value;
  }

  /**
   * Gets the value of the 'isEHBPlan' field.
   * @return Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
   */
  public java.lang.CharSequence getIsEHBPlan() {
    return isEHBPlan;
  }

  /**
   * Sets the value of the 'isEHBPlan' field.
   * Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
   * @param value the value to set.
   */
  public void setIsEHBPlan(java.lang.CharSequence value) {
    this.isEHBPlan = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'networkProviderRelationshipIdentifier' field.
   * @return Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
   */
  public java.lang.CharSequence getNetworkProviderRelationshipIdentifier() {
    return networkProviderRelationshipIdentifier;
  }

  /**
   * Sets the value of the 'networkProviderRelationshipIdentifier' field.
   * Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
   * @param value the value to set.
   */
  public void setNetworkProviderRelationshipIdentifier(java.lang.CharSequence value) {
    this.networkProviderRelationshipIdentifier = value;
  }

  /**
   * Gets the value of the 'networkScheduleAlternateIdentifiers' field.
   * @return A list of alteranate network schedule identfiers as defined by their source systems.
   */
  public java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> getNetworkScheduleAlternateIdentifiers() {
    return networkScheduleAlternateIdentifiers;
  }

  /**
   * Sets the value of the 'networkScheduleAlternateIdentifiers' field.
   * A list of alteranate network schedule identfiers as defined by their source systems.
   * @param value the value to set.
   */
  public void setNetworkScheduleAlternateIdentifiers(java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> value) {
    this.networkScheduleAlternateIdentifiers = value;
  }

  /**
   * Gets the value of the 'networkScheduleIdentifier' field.
   * @return Identifies the network schedule used by the benefit bundle option.
   */
  public java.lang.CharSequence getNetworkScheduleIdentifier() {
    return networkScheduleIdentifier;
  }

  /**
   * Sets the value of the 'networkScheduleIdentifier' field.
   * Identifies the network schedule used by the benefit bundle option.
   * @param value the value to set.
   */
  public void setNetworkScheduleIdentifier(java.lang.CharSequence value) {
    this.networkScheduleIdentifier = value;
  }

  /**
   * Gets the value of the 'optionDescription' field.
   * @return Description for the plan option.
   */
  public java.lang.CharSequence getOptionDescription() {
    return optionDescription;
  }

  /**
   * Sets the value of the 'optionDescription' field.
   * Description for the plan option.
   * @param value the value to set.
   */
  public void setOptionDescription(java.lang.CharSequence value) {
    this.optionDescription = value;
  }

  /**
   * Gets the value of the 'optionId' field.
   * @return Identifier of the plan option.
   */
  public java.lang.CharSequence getOptionId() {
    return optionId;
  }

  /**
   * Sets the value of the 'optionId' field.
   * Identifier of the plan option.
   * @param value the value to set.
   */
  public void setOptionId(java.lang.CharSequence value) {
    this.optionId = value;
  }

  /**
   * Gets the value of the 'planCategorizationAttributes' field.
   * @return A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
   */
  public java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> getPlanCategorizationAttributes() {
    return planCategorizationAttributes;
  }

  /**
   * Sets the value of the 'planCategorizationAttributes' field.
   * A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
   * @param value the value to set.
   */
  public void setPlanCategorizationAttributes(java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> value) {
    this.planCategorizationAttributes = value;
  }

  /**
   * Gets the value of the 'planCategoryName' field.
   * @return The value of the 'planCategoryName' field.
   */
  public java.lang.CharSequence getPlanCategoryName() {
    return planCategoryName;
  }

  /**
   * Sets the value of the 'planCategoryName' field.
   * @param value the value to set.
   */
  public void setPlanCategoryName(java.lang.CharSequence value) {
    this.planCategoryName = value;
  }

  /**
   * Gets the value of the 'planCode' field.
   * @return The value of the 'planCode' field.
   */
  public java.lang.CharSequence getPlanCode() {
    return planCode;
  }

  /**
   * Sets the value of the 'planCode' field.
   * @param value the value to set.
   */
  public void setPlanCode(java.lang.CharSequence value) {
    this.planCode = value;
  }

  /**
   * Gets the value of the 'planDescription' field.
   * @return The value of the 'planDescription' field.
   */
  public java.lang.CharSequence getPlanDescription() {
    return planDescription;
  }

  /**
   * Sets the value of the 'planDescription' field.
   * @param value the value to set.
   */
  public void setPlanDescription(java.lang.CharSequence value) {
    this.planDescription = value;
  }

  /**
   * Gets the value of the 'planSubCategoryName' field.
   * @return The subcategory name for the member's Plan.
   */
  public java.lang.CharSequence getPlanSubCategoryName() {
    return planSubCategoryName;
  }

  /**
   * Sets the value of the 'planSubCategoryName' field.
   * The subcategory name for the member's Plan.
   * @param value the value to set.
   */
  public void setPlanSubCategoryName(java.lang.CharSequence value) {
    this.planSubCategoryName = value;
  }

  /**
   * Gets the value of the 'planTypeDescription' field.
   * @return The value of the 'planTypeDescription' field.
   */
  public java.lang.CharSequence getPlanTypeDescription() {
    return planTypeDescription;
  }

  /**
   * Sets the value of the 'planTypeDescription' field.
   * @param value the value to set.
   */
  public void setPlanTypeDescription(java.lang.CharSequence value) {
    this.planTypeDescription = value;
  }

  /**
   * Gets the value of the 'planTypeIdentifier' field.
   * @return The value of the 'planTypeIdentifier' field.
   */
  public java.lang.CharSequence getPlanTypeIdentifier() {
    return planTypeIdentifier;
  }

  /**
   * Sets the value of the 'planTypeIdentifier' field.
   * @param value the value to set.
   */
  public void setPlanTypeIdentifier(java.lang.CharSequence value) {
    this.planTypeIdentifier = value;
  }

  /**
   * Gets the value of the 'planTypeName' field.
   * @return The value of the 'planTypeName' field.
   */
  public java.lang.CharSequence getPlanTypeName() {
    return planTypeName;
  }

  /**
   * Sets the value of the 'planTypeName' field.
   * @param value the value to set.
   */
  public void setPlanTypeName(java.lang.CharSequence value) {
    this.planTypeName = value;
  }

  /**
   * Gets the value of the 'riderBit' field.
   * @return The value of the 'riderBit' field.
   */
  public java.lang.Integer getRiderBit() {
    return riderBit;
  }

  /**
   * Sets the value of the 'riderBit' field.
   * @param value the value to set.
   */
  public void setRiderBit(java.lang.Integer value) {
    this.riderBit = value;
  }

  /**
   * Gets the value of the 'security' field.
   * @return The value of the 'security' field.
   */
  public com.uhc.schema.model.eligibility.common.Security getSecurity() {
    return security;
  }

  /**
   * Sets the value of the 'security' field.
   * @param value the value to set.
   */
  public void setSecurity(com.uhc.schema.model.eligibility.common.Security value) {
    this.security = value;
  }

  /**
   * Gets the value of the 'sourceSystemCode' field.
   * @return The value of the 'sourceSystemCode' field.
   */
  public java.lang.CharSequence getSourceSystemCode() {
    return sourceSystemCode;
  }

  /**
   * Sets the value of the 'sourceSystemCode' field.
   * @param value the value to set.
   */
  public void setSourceSystemCode(java.lang.CharSequence value) {
    this.sourceSystemCode = value;
  }

  /**
   * Gets the value of the 'versionNumber' field.
   * @return The version of the plan.
   */
  public java.lang.CharSequence getVersionNumber() {
    return versionNumber;
  }

  /**
   * Sets the value of the 'versionNumber' field.
   * The version of the plan.
   * @param value the value to set.
   */
  public void setVersionNumber(java.lang.CharSequence value) {
    this.versionNumber = value;
  }

  /**
   * Creates a new Plan RecordBuilder.
   * @return A new Plan RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Plan.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.Plan.Builder();
  }

  /**
   * Creates a new Plan RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Plan RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Plan.Builder newBuilder(com.uhc.schema.model.eligibility.Plan.Builder other) {
    return new com.uhc.schema.model.eligibility.Plan.Builder(other);
  }

  /**
   * Creates a new Plan RecordBuilder by copying an existing Plan instance.
   * @param other The existing instance to copy.
   * @return A new Plan RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.Plan.Builder newBuilder(com.uhc.schema.model.eligibility.Plan other) {
    return new com.uhc.schema.model.eligibility.Plan.Builder(other);
  }

  /**
   * RecordBuilder for Plan instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Plan>
    implements org.apache.avro.data.RecordBuilder<Plan> {

    /** Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N. */
    private java.lang.CharSequence dentalRewardsIndicator;
    /** The default healthcare network assigned to the plan. */
    private java.lang.CharSequence designatedNetwork;
    /** Indicates if the plan has a benefit which is in a designated virtual clinic network. */
    private java.lang.CharSequence designatedVirtualClinicalNetworkBenefitIndicator;
    private java.lang.CharSequence employerGroupIndicator;
    /** Identifies the financial arrangements between UHG and Customers. */
    private com.uhc.schema.model.eligibility.common.DescriptionType fundingArrangement;
    private com.uhc.schema.model.eligibility.common.DescriptionType.Builder fundingArrangementBuilder;
    /** Indicates if the plan has an RX benefit. Ex: Y, N. */
    private java.lang.CharSequence hasRxBenefitIndicator;
    /** Identifies plan as an Essential Health Benefit plan. Ex: Y, N. */
    private java.lang.CharSequence isEHBPlan;
    private java.lang.CharSequence name;
    /** Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements. */
    private java.lang.CharSequence networkProviderRelationshipIdentifier;
    /** A list of alteranate network schedule identfiers as defined by their source systems. */
    private java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> networkScheduleAlternateIdentifiers;
    /** Identifies the network schedule used by the benefit bundle option. */
    private java.lang.CharSequence networkScheduleIdentifier;
    /** Description for the plan option. */
    private java.lang.CharSequence optionDescription;
    /** Identifier of the plan option. */
    private java.lang.CharSequence optionId;
    /** A list of attributes and attribute values that can be added to an Attribute Schedule for a plan. */
    private java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> planCategorizationAttributes;
    private java.lang.CharSequence planCategoryName;
    private java.lang.CharSequence planCode;
    private java.lang.CharSequence planDescription;
    /** The subcategory name for the member's Plan. */
    private java.lang.CharSequence planSubCategoryName;
    private java.lang.CharSequence planTypeDescription;
    private java.lang.CharSequence planTypeIdentifier;
    private java.lang.CharSequence planTypeName;
    private java.lang.Integer riderBit;
    private com.uhc.schema.model.eligibility.common.Security security;
    private com.uhc.schema.model.eligibility.common.Security.Builder securityBuilder;
    private java.lang.CharSequence sourceSystemCode;
    /** The version of the plan. */
    private java.lang.CharSequence versionNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.Plan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dentalRewardsIndicator)) {
        this.dentalRewardsIndicator = data().deepCopy(fields()[0].schema(), other.dentalRewardsIndicator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.designatedNetwork)) {
        this.designatedNetwork = data().deepCopy(fields()[1].schema(), other.designatedNetwork);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.designatedVirtualClinicalNetworkBenefitIndicator)) {
        this.designatedVirtualClinicalNetworkBenefitIndicator = data().deepCopy(fields()[2].schema(), other.designatedVirtualClinicalNetworkBenefitIndicator);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.employerGroupIndicator)) {
        this.employerGroupIndicator = data().deepCopy(fields()[3].schema(), other.employerGroupIndicator);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fundingArrangement)) {
        this.fundingArrangement = data().deepCopy(fields()[4].schema(), other.fundingArrangement);
        fieldSetFlags()[4] = true;
      }
      if (other.hasFundingArrangementBuilder()) {
        this.fundingArrangementBuilder = com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(other.getFundingArrangementBuilder());
      }
      if (isValidValue(fields()[5], other.hasRxBenefitIndicator)) {
        this.hasRxBenefitIndicator = data().deepCopy(fields()[5].schema(), other.hasRxBenefitIndicator);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isEHBPlan)) {
        this.isEHBPlan = data().deepCopy(fields()[6].schema(), other.isEHBPlan);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.name)) {
        this.name = data().deepCopy(fields()[7].schema(), other.name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.networkProviderRelationshipIdentifier)) {
        this.networkProviderRelationshipIdentifier = data().deepCopy(fields()[8].schema(), other.networkProviderRelationshipIdentifier);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.networkScheduleAlternateIdentifiers)) {
        this.networkScheduleAlternateIdentifiers = data().deepCopy(fields()[9].schema(), other.networkScheduleAlternateIdentifiers);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.networkScheduleIdentifier)) {
        this.networkScheduleIdentifier = data().deepCopy(fields()[10].schema(), other.networkScheduleIdentifier);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.optionDescription)) {
        this.optionDescription = data().deepCopy(fields()[11].schema(), other.optionDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.optionId)) {
        this.optionId = data().deepCopy(fields()[12].schema(), other.optionId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.planCategorizationAttributes)) {
        this.planCategorizationAttributes = data().deepCopy(fields()[13].schema(), other.planCategorizationAttributes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.planCategoryName)) {
        this.planCategoryName = data().deepCopy(fields()[14].schema(), other.planCategoryName);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.planCode)) {
        this.planCode = data().deepCopy(fields()[15].schema(), other.planCode);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.planDescription)) {
        this.planDescription = data().deepCopy(fields()[16].schema(), other.planDescription);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.planSubCategoryName)) {
        this.planSubCategoryName = data().deepCopy(fields()[17].schema(), other.planSubCategoryName);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.planTypeDescription)) {
        this.planTypeDescription = data().deepCopy(fields()[18].schema(), other.planTypeDescription);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.planTypeIdentifier)) {
        this.planTypeIdentifier = data().deepCopy(fields()[19].schema(), other.planTypeIdentifier);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.planTypeName)) {
        this.planTypeName = data().deepCopy(fields()[20].schema(), other.planTypeName);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.riderBit)) {
        this.riderBit = data().deepCopy(fields()[21].schema(), other.riderBit);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.security)) {
        this.security = data().deepCopy(fields()[22].schema(), other.security);
        fieldSetFlags()[22] = true;
      }
      if (other.hasSecurityBuilder()) {
        this.securityBuilder = com.uhc.schema.model.eligibility.common.Security.newBuilder(other.getSecurityBuilder());
      }
      if (isValidValue(fields()[23], other.sourceSystemCode)) {
        this.sourceSystemCode = data().deepCopy(fields()[23].schema(), other.sourceSystemCode);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.versionNumber)) {
        this.versionNumber = data().deepCopy(fields()[24].schema(), other.versionNumber);
        fieldSetFlags()[24] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Plan instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.Plan other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.dentalRewardsIndicator)) {
        this.dentalRewardsIndicator = data().deepCopy(fields()[0].schema(), other.dentalRewardsIndicator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.designatedNetwork)) {
        this.designatedNetwork = data().deepCopy(fields()[1].schema(), other.designatedNetwork);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.designatedVirtualClinicalNetworkBenefitIndicator)) {
        this.designatedVirtualClinicalNetworkBenefitIndicator = data().deepCopy(fields()[2].schema(), other.designatedVirtualClinicalNetworkBenefitIndicator);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.employerGroupIndicator)) {
        this.employerGroupIndicator = data().deepCopy(fields()[3].schema(), other.employerGroupIndicator);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fundingArrangement)) {
        this.fundingArrangement = data().deepCopy(fields()[4].schema(), other.fundingArrangement);
        fieldSetFlags()[4] = true;
      }
      this.fundingArrangementBuilder = null;
      if (isValidValue(fields()[5], other.hasRxBenefitIndicator)) {
        this.hasRxBenefitIndicator = data().deepCopy(fields()[5].schema(), other.hasRxBenefitIndicator);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isEHBPlan)) {
        this.isEHBPlan = data().deepCopy(fields()[6].schema(), other.isEHBPlan);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.name)) {
        this.name = data().deepCopy(fields()[7].schema(), other.name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.networkProviderRelationshipIdentifier)) {
        this.networkProviderRelationshipIdentifier = data().deepCopy(fields()[8].schema(), other.networkProviderRelationshipIdentifier);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.networkScheduleAlternateIdentifiers)) {
        this.networkScheduleAlternateIdentifiers = data().deepCopy(fields()[9].schema(), other.networkScheduleAlternateIdentifiers);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.networkScheduleIdentifier)) {
        this.networkScheduleIdentifier = data().deepCopy(fields()[10].schema(), other.networkScheduleIdentifier);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.optionDescription)) {
        this.optionDescription = data().deepCopy(fields()[11].schema(), other.optionDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.optionId)) {
        this.optionId = data().deepCopy(fields()[12].schema(), other.optionId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.planCategorizationAttributes)) {
        this.planCategorizationAttributes = data().deepCopy(fields()[13].schema(), other.planCategorizationAttributes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.planCategoryName)) {
        this.planCategoryName = data().deepCopy(fields()[14].schema(), other.planCategoryName);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.planCode)) {
        this.planCode = data().deepCopy(fields()[15].schema(), other.planCode);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.planDescription)) {
        this.planDescription = data().deepCopy(fields()[16].schema(), other.planDescription);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.planSubCategoryName)) {
        this.planSubCategoryName = data().deepCopy(fields()[17].schema(), other.planSubCategoryName);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.planTypeDescription)) {
        this.planTypeDescription = data().deepCopy(fields()[18].schema(), other.planTypeDescription);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.planTypeIdentifier)) {
        this.planTypeIdentifier = data().deepCopy(fields()[19].schema(), other.planTypeIdentifier);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.planTypeName)) {
        this.planTypeName = data().deepCopy(fields()[20].schema(), other.planTypeName);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.riderBit)) {
        this.riderBit = data().deepCopy(fields()[21].schema(), other.riderBit);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.security)) {
        this.security = data().deepCopy(fields()[22].schema(), other.security);
        fieldSetFlags()[22] = true;
      }
      this.securityBuilder = null;
      if (isValidValue(fields()[23], other.sourceSystemCode)) {
        this.sourceSystemCode = data().deepCopy(fields()[23].schema(), other.sourceSystemCode);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.versionNumber)) {
        this.versionNumber = data().deepCopy(fields()[24].schema(), other.versionNumber);
        fieldSetFlags()[24] = true;
      }
    }

    /**
      * Gets the value of the 'dentalRewardsIndicator' field.
      * Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
      * @return The value.
      */
    public java.lang.CharSequence getDentalRewardsIndicator() {
      return dentalRewardsIndicator;
    }

    /**
      * Sets the value of the 'dentalRewardsIndicator' field.
      * Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
      * @param value The value of 'dentalRewardsIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setDentalRewardsIndicator(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dentalRewardsIndicator = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dentalRewardsIndicator' field has been set.
      * Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
      * @return True if the 'dentalRewardsIndicator' field has been set, false otherwise.
      */
    public boolean hasDentalRewardsIndicator() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dentalRewardsIndicator' field.
      * Identifies whether the member’s plan contains a Consumer Max Multiplier, where rollover benefits are offered. Ex: Y, N.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearDentalRewardsIndicator() {
      dentalRewardsIndicator = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'designatedNetwork' field.
      * The default healthcare network assigned to the plan.
      * @return The value.
      */
    public java.lang.CharSequence getDesignatedNetwork() {
      return designatedNetwork;
    }

    /**
      * Sets the value of the 'designatedNetwork' field.
      * The default healthcare network assigned to the plan.
      * @param value The value of 'designatedNetwork'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setDesignatedNetwork(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.designatedNetwork = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'designatedNetwork' field has been set.
      * The default healthcare network assigned to the plan.
      * @return True if the 'designatedNetwork' field has been set, false otherwise.
      */
    public boolean hasDesignatedNetwork() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'designatedNetwork' field.
      * The default healthcare network assigned to the plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearDesignatedNetwork() {
      designatedNetwork = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'designatedVirtualClinicalNetworkBenefitIndicator' field.
      * Indicates if the plan has a benefit which is in a designated virtual clinic network.
      * @return The value.
      */
    public java.lang.CharSequence getDesignatedVirtualClinicalNetworkBenefitIndicator() {
      return designatedVirtualClinicalNetworkBenefitIndicator;
    }

    /**
      * Sets the value of the 'designatedVirtualClinicalNetworkBenefitIndicator' field.
      * Indicates if the plan has a benefit which is in a designated virtual clinic network.
      * @param value The value of 'designatedVirtualClinicalNetworkBenefitIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setDesignatedVirtualClinicalNetworkBenefitIndicator(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.designatedVirtualClinicalNetworkBenefitIndicator = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'designatedVirtualClinicalNetworkBenefitIndicator' field has been set.
      * Indicates if the plan has a benefit which is in a designated virtual clinic network.
      * @return True if the 'designatedVirtualClinicalNetworkBenefitIndicator' field has been set, false otherwise.
      */
    public boolean hasDesignatedVirtualClinicalNetworkBenefitIndicator() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'designatedVirtualClinicalNetworkBenefitIndicator' field.
      * Indicates if the plan has a benefit which is in a designated virtual clinic network.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearDesignatedVirtualClinicalNetworkBenefitIndicator() {
      designatedVirtualClinicalNetworkBenefitIndicator = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'employerGroupIndicator' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmployerGroupIndicator() {
      return employerGroupIndicator;
    }

    /**
      * Sets the value of the 'employerGroupIndicator' field.
      * @param value The value of 'employerGroupIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setEmployerGroupIndicator(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.employerGroupIndicator = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'employerGroupIndicator' field has been set.
      * @return True if the 'employerGroupIndicator' field has been set, false otherwise.
      */
    public boolean hasEmployerGroupIndicator() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'employerGroupIndicator' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearEmployerGroupIndicator() {
      employerGroupIndicator = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fundingArrangement' field.
      * Identifies the financial arrangements between UHG and Customers.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.DescriptionType getFundingArrangement() {
      return fundingArrangement;
    }

    /**
      * Sets the value of the 'fundingArrangement' field.
      * Identifies the financial arrangements between UHG and Customers.
      * @param value The value of 'fundingArrangement'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setFundingArrangement(com.uhc.schema.model.eligibility.common.DescriptionType value) {
      validate(fields()[4], value);
      this.fundingArrangementBuilder = null;
      this.fundingArrangement = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fundingArrangement' field has been set.
      * Identifies the financial arrangements between UHG and Customers.
      * @return True if the 'fundingArrangement' field has been set, false otherwise.
      */
    public boolean hasFundingArrangement() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'fundingArrangement' field and creates one if it doesn't exist yet.
     * Identifies the financial arrangements between UHG and Customers.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.DescriptionType.Builder getFundingArrangementBuilder() {
      if (fundingArrangementBuilder == null) {
        if (hasFundingArrangement()) {
          setFundingArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder(fundingArrangement));
        } else {
          setFundingArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.newBuilder());
        }
      }
      return fundingArrangementBuilder;
    }

    /**
     * Sets the Builder instance for the 'fundingArrangement' field
     * Identifies the financial arrangements between UHG and Customers.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Plan.Builder setFundingArrangementBuilder(com.uhc.schema.model.eligibility.common.DescriptionType.Builder value) {
      clearFundingArrangement();
      fundingArrangementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fundingArrangement' field has an active Builder instance
     * Identifies the financial arrangements between UHG and Customers.
     * @return True if the 'fundingArrangement' field has an active Builder instance
     */
    public boolean hasFundingArrangementBuilder() {
      return fundingArrangementBuilder != null;
    }

    /**
      * Clears the value of the 'fundingArrangement' field.
      * Identifies the financial arrangements between UHG and Customers.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearFundingArrangement() {
      fundingArrangement = null;
      fundingArrangementBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasRxBenefitIndicator' field.
      * Indicates if the plan has an RX benefit. Ex: Y, N.
      * @return The value.
      */
    public java.lang.CharSequence getHasRxBenefitIndicator() {
      return hasRxBenefitIndicator;
    }

    /**
      * Sets the value of the 'hasRxBenefitIndicator' field.
      * Indicates if the plan has an RX benefit. Ex: Y, N.
      * @param value The value of 'hasRxBenefitIndicator'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setHasRxBenefitIndicator(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.hasRxBenefitIndicator = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hasRxBenefitIndicator' field has been set.
      * Indicates if the plan has an RX benefit. Ex: Y, N.
      * @return True if the 'hasRxBenefitIndicator' field has been set, false otherwise.
      */
    public boolean hasHasRxBenefitIndicator() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hasRxBenefitIndicator' field.
      * Indicates if the plan has an RX benefit. Ex: Y, N.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearHasRxBenefitIndicator() {
      hasRxBenefitIndicator = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isEHBPlan' field.
      * Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
      * @return The value.
      */
    public java.lang.CharSequence getIsEHBPlan() {
      return isEHBPlan;
    }

    /**
      * Sets the value of the 'isEHBPlan' field.
      * Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
      * @param value The value of 'isEHBPlan'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setIsEHBPlan(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.isEHBPlan = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isEHBPlan' field has been set.
      * Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
      * @return True if the 'isEHBPlan' field has been set, false otherwise.
      */
    public boolean hasIsEHBPlan() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isEHBPlan' field.
      * Identifies plan as an Essential Health Benefit plan. Ex: Y, N.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearIsEHBPlan() {
      isEHBPlan = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.name = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearName() {
      name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'networkProviderRelationshipIdentifier' field.
      * Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
      * @return The value.
      */
    public java.lang.CharSequence getNetworkProviderRelationshipIdentifier() {
      return networkProviderRelationshipIdentifier;
    }

    /**
      * Sets the value of the 'networkProviderRelationshipIdentifier' field.
      * Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
      * @param value The value of 'networkProviderRelationshipIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setNetworkProviderRelationshipIdentifier(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.networkProviderRelationshipIdentifier = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'networkProviderRelationshipIdentifier' field has been set.
      * Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
      * @return True if the 'networkProviderRelationshipIdentifier' field has been set, false otherwise.
      */
    public boolean hasNetworkProviderRelationshipIdentifier() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'networkProviderRelationshipIdentifier' field.
      * Identifier used to link the plan provider (and their agreement) to one or more product structures for use in identifying pricing arrangements.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearNetworkProviderRelationshipIdentifier() {
      networkProviderRelationshipIdentifier = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'networkScheduleAlternateIdentifiers' field.
      * A list of alteranate network schedule identfiers as defined by their source systems.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> getNetworkScheduleAlternateIdentifiers() {
      return networkScheduleAlternateIdentifiers;
    }

    /**
      * Sets the value of the 'networkScheduleAlternateIdentifiers' field.
      * A list of alteranate network schedule identfiers as defined by their source systems.
      * @param value The value of 'networkScheduleAlternateIdentifiers'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setNetworkScheduleAlternateIdentifiers(java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier> value) {
      validate(fields()[9], value);
      this.networkScheduleAlternateIdentifiers = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'networkScheduleAlternateIdentifiers' field has been set.
      * A list of alteranate network schedule identfiers as defined by their source systems.
      * @return True if the 'networkScheduleAlternateIdentifiers' field has been set, false otherwise.
      */
    public boolean hasNetworkScheduleAlternateIdentifiers() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'networkScheduleAlternateIdentifiers' field.
      * A list of alteranate network schedule identfiers as defined by their source systems.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearNetworkScheduleAlternateIdentifiers() {
      networkScheduleAlternateIdentifiers = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'networkScheduleIdentifier' field.
      * Identifies the network schedule used by the benefit bundle option.
      * @return The value.
      */
    public java.lang.CharSequence getNetworkScheduleIdentifier() {
      return networkScheduleIdentifier;
    }

    /**
      * Sets the value of the 'networkScheduleIdentifier' field.
      * Identifies the network schedule used by the benefit bundle option.
      * @param value The value of 'networkScheduleIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setNetworkScheduleIdentifier(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.networkScheduleIdentifier = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'networkScheduleIdentifier' field has been set.
      * Identifies the network schedule used by the benefit bundle option.
      * @return True if the 'networkScheduleIdentifier' field has been set, false otherwise.
      */
    public boolean hasNetworkScheduleIdentifier() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'networkScheduleIdentifier' field.
      * Identifies the network schedule used by the benefit bundle option.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearNetworkScheduleIdentifier() {
      networkScheduleIdentifier = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'optionDescription' field.
      * Description for the plan option.
      * @return The value.
      */
    public java.lang.CharSequence getOptionDescription() {
      return optionDescription;
    }

    /**
      * Sets the value of the 'optionDescription' field.
      * Description for the plan option.
      * @param value The value of 'optionDescription'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setOptionDescription(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.optionDescription = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'optionDescription' field has been set.
      * Description for the plan option.
      * @return True if the 'optionDescription' field has been set, false otherwise.
      */
    public boolean hasOptionDescription() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'optionDescription' field.
      * Description for the plan option.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearOptionDescription() {
      optionDescription = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'optionId' field.
      * Identifier of the plan option.
      * @return The value.
      */
    public java.lang.CharSequence getOptionId() {
      return optionId;
    }

    /**
      * Sets the value of the 'optionId' field.
      * Identifier of the plan option.
      * @param value The value of 'optionId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setOptionId(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.optionId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'optionId' field has been set.
      * Identifier of the plan option.
      * @return True if the 'optionId' field has been set, false otherwise.
      */
    public boolean hasOptionId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'optionId' field.
      * Identifier of the plan option.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearOptionId() {
      optionId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCategorizationAttributes' field.
      * A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
      * @return The value.
      */
    public java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> getPlanCategorizationAttributes() {
      return planCategorizationAttributes;
    }

    /**
      * Sets the value of the 'planCategorizationAttributes' field.
      * A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
      * @param value The value of 'planCategorizationAttributes'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanCategorizationAttributes(java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes> value) {
      validate(fields()[13], value);
      this.planCategorizationAttributes = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'planCategorizationAttributes' field has been set.
      * A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
      * @return True if the 'planCategorizationAttributes' field has been set, false otherwise.
      */
    public boolean hasPlanCategorizationAttributes() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'planCategorizationAttributes' field.
      * A list of attributes and attribute values that can be added to an Attribute Schedule for a plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanCategorizationAttributes() {
      planCategorizationAttributes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCategoryName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanCategoryName() {
      return planCategoryName;
    }

    /**
      * Sets the value of the 'planCategoryName' field.
      * @param value The value of 'planCategoryName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanCategoryName(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.planCategoryName = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'planCategoryName' field has been set.
      * @return True if the 'planCategoryName' field has been set, false otherwise.
      */
    public boolean hasPlanCategoryName() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'planCategoryName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanCategoryName() {
      planCategoryName = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'planCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanCode() {
      return planCode;
    }

    /**
      * Sets the value of the 'planCode' field.
      * @param value The value of 'planCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanCode(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.planCode = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'planCode' field has been set.
      * @return True if the 'planCode' field has been set, false otherwise.
      */
    public boolean hasPlanCode() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'planCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanCode() {
      planCode = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'planDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanDescription() {
      return planDescription;
    }

    /**
      * Sets the value of the 'planDescription' field.
      * @param value The value of 'planDescription'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanDescription(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.planDescription = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'planDescription' field has been set.
      * @return True if the 'planDescription' field has been set, false otherwise.
      */
    public boolean hasPlanDescription() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'planDescription' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanDescription() {
      planDescription = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'planSubCategoryName' field.
      * The subcategory name for the member's Plan.
      * @return The value.
      */
    public java.lang.CharSequence getPlanSubCategoryName() {
      return planSubCategoryName;
    }

    /**
      * Sets the value of the 'planSubCategoryName' field.
      * The subcategory name for the member's Plan.
      * @param value The value of 'planSubCategoryName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanSubCategoryName(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.planSubCategoryName = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'planSubCategoryName' field has been set.
      * The subcategory name for the member's Plan.
      * @return True if the 'planSubCategoryName' field has been set, false otherwise.
      */
    public boolean hasPlanSubCategoryName() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'planSubCategoryName' field.
      * The subcategory name for the member's Plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanSubCategoryName() {
      planSubCategoryName = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'planTypeDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanTypeDescription() {
      return planTypeDescription;
    }

    /**
      * Sets the value of the 'planTypeDescription' field.
      * @param value The value of 'planTypeDescription'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanTypeDescription(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.planTypeDescription = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'planTypeDescription' field has been set.
      * @return True if the 'planTypeDescription' field has been set, false otherwise.
      */
    public boolean hasPlanTypeDescription() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'planTypeDescription' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanTypeDescription() {
      planTypeDescription = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'planTypeIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanTypeIdentifier() {
      return planTypeIdentifier;
    }

    /**
      * Sets the value of the 'planTypeIdentifier' field.
      * @param value The value of 'planTypeIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanTypeIdentifier(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.planTypeIdentifier = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'planTypeIdentifier' field has been set.
      * @return True if the 'planTypeIdentifier' field has been set, false otherwise.
      */
    public boolean hasPlanTypeIdentifier() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'planTypeIdentifier' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanTypeIdentifier() {
      planTypeIdentifier = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'planTypeName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanTypeName() {
      return planTypeName;
    }

    /**
      * Sets the value of the 'planTypeName' field.
      * @param value The value of 'planTypeName'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setPlanTypeName(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.planTypeName = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'planTypeName' field has been set.
      * @return True if the 'planTypeName' field has been set, false otherwise.
      */
    public boolean hasPlanTypeName() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'planTypeName' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearPlanTypeName() {
      planTypeName = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'riderBit' field.
      * @return The value.
      */
    public java.lang.Integer getRiderBit() {
      return riderBit;
    }

    /**
      * Sets the value of the 'riderBit' field.
      * @param value The value of 'riderBit'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setRiderBit(java.lang.Integer value) {
      validate(fields()[21], value);
      this.riderBit = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'riderBit' field has been set.
      * @return True if the 'riderBit' field has been set, false otherwise.
      */
    public boolean hasRiderBit() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'riderBit' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearRiderBit() {
      riderBit = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'security' field.
      * @return The value.
      */
    public com.uhc.schema.model.eligibility.common.Security getSecurity() {
      return security;
    }

    /**
      * Sets the value of the 'security' field.
      * @param value The value of 'security'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setSecurity(com.uhc.schema.model.eligibility.common.Security value) {
      validate(fields()[22], value);
      this.securityBuilder = null;
      this.security = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'security' field has been set.
      * @return True if the 'security' field has been set, false otherwise.
      */
    public boolean hasSecurity() {
      return fieldSetFlags()[22];
    }

    /**
     * Gets the Builder instance for the 'security' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.common.Security.Builder getSecurityBuilder() {
      if (securityBuilder == null) {
        if (hasSecurity()) {
          setSecurityBuilder(com.uhc.schema.model.eligibility.common.Security.newBuilder(security));
        } else {
          setSecurityBuilder(com.uhc.schema.model.eligibility.common.Security.newBuilder());
        }
      }
      return securityBuilder;
    }

    /**
     * Sets the Builder instance for the 'security' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.uhc.schema.model.eligibility.Plan.Builder setSecurityBuilder(com.uhc.schema.model.eligibility.common.Security.Builder value) {
      clearSecurity();
      securityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'security' field has an active Builder instance
     * @return True if the 'security' field has an active Builder instance
     */
    public boolean hasSecurityBuilder() {
      return securityBuilder != null;
    }

    /**
      * Clears the value of the 'security' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearSecurity() {
      security = null;
      securityBuilder = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystemCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceSystemCode() {
      return sourceSystemCode;
    }

    /**
      * Sets the value of the 'sourceSystemCode' field.
      * @param value The value of 'sourceSystemCode'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setSourceSystemCode(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.sourceSystemCode = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemCode' field has been set.
      * @return True if the 'sourceSystemCode' field has been set, false otherwise.
      */
    public boolean hasSourceSystemCode() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'sourceSystemCode' field.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearSourceSystemCode() {
      sourceSystemCode = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'versionNumber' field.
      * The version of the plan.
      * @return The value.
      */
    public java.lang.CharSequence getVersionNumber() {
      return versionNumber;
    }

    /**
      * Sets the value of the 'versionNumber' field.
      * The version of the plan.
      * @param value The value of 'versionNumber'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder setVersionNumber(java.lang.CharSequence value) {
      validate(fields()[24], value);
      this.versionNumber = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'versionNumber' field has been set.
      * The version of the plan.
      * @return True if the 'versionNumber' field has been set, false otherwise.
      */
    public boolean hasVersionNumber() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'versionNumber' field.
      * The version of the plan.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.Plan.Builder clearVersionNumber() {
      versionNumber = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Plan build() {
      try {
        Plan record = new Plan();
        record.dentalRewardsIndicator = fieldSetFlags()[0] ? this.dentalRewardsIndicator : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.designatedNetwork = fieldSetFlags()[1] ? this.designatedNetwork : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.designatedVirtualClinicalNetworkBenefitIndicator = fieldSetFlags()[2] ? this.designatedVirtualClinicalNetworkBenefitIndicator : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.employerGroupIndicator = fieldSetFlags()[3] ? this.employerGroupIndicator : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (fundingArrangementBuilder != null) {
          record.fundingArrangement = this.fundingArrangementBuilder.build();
        } else {
          record.fundingArrangement = fieldSetFlags()[4] ? this.fundingArrangement : (com.uhc.schema.model.eligibility.common.DescriptionType) defaultValue(fields()[4]);
        }
        record.hasRxBenefitIndicator = fieldSetFlags()[5] ? this.hasRxBenefitIndicator : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.isEHBPlan = fieldSetFlags()[6] ? this.isEHBPlan : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.name = fieldSetFlags()[7] ? this.name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.networkProviderRelationshipIdentifier = fieldSetFlags()[8] ? this.networkProviderRelationshipIdentifier : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.networkScheduleAlternateIdentifiers = fieldSetFlags()[9] ? this.networkScheduleAlternateIdentifiers : (java.util.List<com.uhc.schema.model.eligibility.plan.NetworkScheduleAlternateIdentifier>) defaultValue(fields()[9]);
        record.networkScheduleIdentifier = fieldSetFlags()[10] ? this.networkScheduleIdentifier : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.optionDescription = fieldSetFlags()[11] ? this.optionDescription : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.optionId = fieldSetFlags()[12] ? this.optionId : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.planCategorizationAttributes = fieldSetFlags()[13] ? this.planCategorizationAttributes : (java.util.List<com.uhc.schema.model.eligibility.plan.PlanCategorizationAttributes>) defaultValue(fields()[13]);
        record.planCategoryName = fieldSetFlags()[14] ? this.planCategoryName : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.planCode = fieldSetFlags()[15] ? this.planCode : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.planDescription = fieldSetFlags()[16] ? this.planDescription : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.planSubCategoryName = fieldSetFlags()[17] ? this.planSubCategoryName : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.planTypeDescription = fieldSetFlags()[18] ? this.planTypeDescription : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.planTypeIdentifier = fieldSetFlags()[19] ? this.planTypeIdentifier : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.planTypeName = fieldSetFlags()[20] ? this.planTypeName : (java.lang.CharSequence) defaultValue(fields()[20]);
        record.riderBit = fieldSetFlags()[21] ? this.riderBit : (java.lang.Integer) defaultValue(fields()[21]);
        if (securityBuilder != null) {
          record.security = this.securityBuilder.build();
        } else {
          record.security = fieldSetFlags()[22] ? this.security : (com.uhc.schema.model.eligibility.common.Security) defaultValue(fields()[22]);
        }
        record.sourceSystemCode = fieldSetFlags()[23] ? this.sourceSystemCode : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.versionNumber = fieldSetFlags()[24] ? this.versionNumber : (java.lang.CharSequence) defaultValue(fields()[24]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Plan>
    WRITER$ = (org.apache.avro.io.DatumWriter<Plan>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Plan>
    READER$ = (org.apache.avro.io.DatumReader<Plan>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
