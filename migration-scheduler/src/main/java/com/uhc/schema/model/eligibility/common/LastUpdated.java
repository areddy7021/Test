/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.common;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information about the last update made to a given entity. */
@org.apache.avro.specific.AvroGenerated
public class LastUpdated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2726358941581206343L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LastUpdated\",\"namespace\":\"com.uhc.schema.model.eligibility.common\",\"doc\":\"Information about the last update made to a given entity.\",\"fields\":[{\"name\":\"sourceSystemTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"sourceTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",\"string\"],\"doc\":\"The last person or application to update the entity.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LastUpdated> ENCODER =
      new BinaryMessageEncoder<LastUpdated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LastUpdated> DECODER =
      new BinaryMessageDecoder<LastUpdated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LastUpdated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LastUpdated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LastUpdated>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LastUpdated to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LastUpdated from a ByteBuffer. */
  public static LastUpdated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ */
  @Deprecated public java.lang.CharSequence sourceSystemTimestamp;
  /** The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ */
  @Deprecated public java.lang.CharSequence sourceTimestamp;
  /** The last person or application to update the entity. */
  @Deprecated public java.lang.CharSequence userId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LastUpdated() {}

  /**
   * All-args constructor.
   * @param sourceSystemTimestamp The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   * @param sourceTimestamp The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   * @param userId The last person or application to update the entity.
   */
  public LastUpdated(java.lang.CharSequence sourceSystemTimestamp, java.lang.CharSequence sourceTimestamp, java.lang.CharSequence userId) {
    this.sourceSystemTimestamp = sourceSystemTimestamp;
    this.sourceTimestamp = sourceTimestamp;
    this.userId = userId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sourceSystemTimestamp;
    case 1: return sourceTimestamp;
    case 2: return userId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sourceSystemTimestamp = (java.lang.CharSequence)value$; break;
    case 1: sourceTimestamp = (java.lang.CharSequence)value$; break;
    case 2: userId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sourceSystemTimestamp' field.
   * @return The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   */
  public java.lang.CharSequence getSourceSystemTimestamp() {
    return sourceSystemTimestamp;
  }

  /**
   * Sets the value of the 'sourceSystemTimestamp' field.
   * The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   * @param value the value to set.
   */
  public void setSourceSystemTimestamp(java.lang.CharSequence value) {
    this.sourceSystemTimestamp = value;
  }

  /**
   * Gets the value of the 'sourceTimestamp' field.
   * @return The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   */
  public java.lang.CharSequence getSourceTimestamp() {
    return sourceTimestamp;
  }

  /**
   * Sets the value of the 'sourceTimestamp' field.
   * The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
   * @param value the value to set.
   */
  public void setSourceTimestamp(java.lang.CharSequence value) {
    this.sourceTimestamp = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The last person or application to update the entity.
   */
  public java.lang.CharSequence getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * The last person or application to update the entity.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.userId = value;
  }

  /**
   * Creates a new LastUpdated RecordBuilder.
   * @return A new LastUpdated RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.LastUpdated.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.common.LastUpdated.Builder();
  }

  /**
   * Creates a new LastUpdated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LastUpdated RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.LastUpdated.Builder newBuilder(com.uhc.schema.model.eligibility.common.LastUpdated.Builder other) {
    return new com.uhc.schema.model.eligibility.common.LastUpdated.Builder(other);
  }

  /**
   * Creates a new LastUpdated RecordBuilder by copying an existing LastUpdated instance.
   * @param other The existing instance to copy.
   * @return A new LastUpdated RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.common.LastUpdated.Builder newBuilder(com.uhc.schema.model.eligibility.common.LastUpdated other) {
    return new com.uhc.schema.model.eligibility.common.LastUpdated.Builder(other);
  }

  /**
   * RecordBuilder for LastUpdated instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LastUpdated>
    implements org.apache.avro.data.RecordBuilder<LastUpdated> {

    /** The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ */
    private java.lang.CharSequence sourceSystemTimestamp;
    /** The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ */
    private java.lang.CharSequence sourceTimestamp;
    /** The last person or application to update the entity. */
    private java.lang.CharSequence userId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.common.LastUpdated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sourceSystemTimestamp)) {
        this.sourceSystemTimestamp = data().deepCopy(fields()[0].schema(), other.sourceSystemTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceTimestamp)) {
        this.sourceTimestamp = data().deepCopy(fields()[1].schema(), other.sourceTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LastUpdated instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.common.LastUpdated other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sourceSystemTimestamp)) {
        this.sourceSystemTimestamp = data().deepCopy(fields()[0].schema(), other.sourceSystemTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceTimestamp)) {
        this.sourceTimestamp = data().deepCopy(fields()[1].schema(), other.sourceTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'sourceSystemTimestamp' field.
      * The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return The value.
      */
    public java.lang.CharSequence getSourceSystemTimestamp() {
      return sourceSystemTimestamp;
    }

    /**
      * Sets the value of the 'sourceSystemTimestamp' field.
      * The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @param value The value of 'sourceSystemTimestamp'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder setSourceSystemTimestamp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sourceSystemTimestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystemTimestamp' field has been set.
      * The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return True if the 'sourceSystemTimestamp' field has been set, false otherwise.
      */
    public boolean hasSourceSystemTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sourceSystemTimestamp' field.
      * The last time the entity was updated on the source system (CDB ROW_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder clearSourceSystemTimestamp() {
      sourceSystemTimestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceTimestamp' field.
      * The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return The value.
      */
    public java.lang.CharSequence getSourceTimestamp() {
      return sourceTimestamp;
    }

    /**
      * Sets the value of the 'sourceTimestamp' field.
      * The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @param value The value of 'sourceTimestamp'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder setSourceTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sourceTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceTimestamp' field has been set.
      * The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return True if the 'sourceTimestamp' field has been set, false otherwise.
      */
    public boolean hasSourceTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sourceTimestamp' field.
      * The last time the entity was updated on the originating source (CDB SRC_TMSTMP) in format (UTC timezone): CCYY-MM-DDThh:mm:ss.sssZ
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder clearSourceTimestamp() {
      sourceTimestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * The last person or application to update the entity.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * The last person or application to update the entity.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * The last person or application to update the entity.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * The last person or application to update the entity.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.common.LastUpdated.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LastUpdated build() {
      try {
        LastUpdated record = new LastUpdated();
        record.sourceSystemTimestamp = fieldSetFlags()[0] ? this.sourceSystemTimestamp : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sourceTimestamp = fieldSetFlags()[1] ? this.sourceTimestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LastUpdated>
    WRITER$ = (org.apache.avro.io.DatumWriter<LastUpdated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LastUpdated>
    READER$ = (org.apache.avro.io.DatumReader<LastUpdated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
