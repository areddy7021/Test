/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.eligibility.individual;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PriorMemberFacingIds extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6096941648386581340L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PriorMemberFacingIds\",\"namespace\":\"com.uhc.schema.model.eligibility.individual\",\"fields\":[{\"name\":\"enrolleeMemberFacingIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.\",\"default\":null},{\"name\":\"organizationIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the Organization of the Individual.\",\"default\":null},{\"name\":\"subscriberMemberFacingIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PriorMemberFacingIds> ENCODER =
      new BinaryMessageEncoder<PriorMemberFacingIds>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PriorMemberFacingIds> DECODER =
      new BinaryMessageDecoder<PriorMemberFacingIds>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PriorMemberFacingIds> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PriorMemberFacingIds> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PriorMemberFacingIds>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PriorMemberFacingIds to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PriorMemberFacingIds from a ByteBuffer. */
  public static PriorMemberFacingIds fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee. */
  @Deprecated public java.lang.CharSequence enrolleeMemberFacingIdentifier;
  /** Identifier for the Organization of the Individual. */
  @Deprecated public java.lang.CharSequence organizationIdentifier;
  /** External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee. */
  @Deprecated public java.lang.CharSequence subscriberMemberFacingIdentifier;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PriorMemberFacingIds() {}

  /**
   * All-args constructor.
   * @param enrolleeMemberFacingIdentifier External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
   * @param organizationIdentifier Identifier for the Organization of the Individual.
   * @param subscriberMemberFacingIdentifier External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
   */
  public PriorMemberFacingIds(java.lang.CharSequence enrolleeMemberFacingIdentifier, java.lang.CharSequence organizationIdentifier, java.lang.CharSequence subscriberMemberFacingIdentifier) {
    this.enrolleeMemberFacingIdentifier = enrolleeMemberFacingIdentifier;
    this.organizationIdentifier = organizationIdentifier;
    this.subscriberMemberFacingIdentifier = subscriberMemberFacingIdentifier;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return enrolleeMemberFacingIdentifier;
    case 1: return organizationIdentifier;
    case 2: return subscriberMemberFacingIdentifier;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: enrolleeMemberFacingIdentifier = (java.lang.CharSequence)value$; break;
    case 1: organizationIdentifier = (java.lang.CharSequence)value$; break;
    case 2: subscriberMemberFacingIdentifier = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'enrolleeMemberFacingIdentifier' field.
   * @return External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
   */
  public java.lang.CharSequence getEnrolleeMemberFacingIdentifier() {
    return enrolleeMemberFacingIdentifier;
  }

  /**
   * Sets the value of the 'enrolleeMemberFacingIdentifier' field.
   * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
   * @param value the value to set.
   */
  public void setEnrolleeMemberFacingIdentifier(java.lang.CharSequence value) {
    this.enrolleeMemberFacingIdentifier = value;
  }

  /**
   * Gets the value of the 'organizationIdentifier' field.
   * @return Identifier for the Organization of the Individual.
   */
  public java.lang.CharSequence getOrganizationIdentifier() {
    return organizationIdentifier;
  }

  /**
   * Sets the value of the 'organizationIdentifier' field.
   * Identifier for the Organization of the Individual.
   * @param value the value to set.
   */
  public void setOrganizationIdentifier(java.lang.CharSequence value) {
    this.organizationIdentifier = value;
  }

  /**
   * Gets the value of the 'subscriberMemberFacingIdentifier' field.
   * @return External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
   */
  public java.lang.CharSequence getSubscriberMemberFacingIdentifier() {
    return subscriberMemberFacingIdentifier;
  }

  /**
   * Sets the value of the 'subscriberMemberFacingIdentifier' field.
   * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
   * @param value the value to set.
   */
  public void setSubscriberMemberFacingIdentifier(java.lang.CharSequence value) {
    this.subscriberMemberFacingIdentifier = value;
  }

  /**
   * Creates a new PriorMemberFacingIds RecordBuilder.
   * @return A new PriorMemberFacingIds RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder newBuilder() {
    return new com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder();
  }

  /**
   * Creates a new PriorMemberFacingIds RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PriorMemberFacingIds RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder newBuilder(com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder other) {
    return new com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder(other);
  }

  /**
   * Creates a new PriorMemberFacingIds RecordBuilder by copying an existing PriorMemberFacingIds instance.
   * @param other The existing instance to copy.
   * @return A new PriorMemberFacingIds RecordBuilder
   */
  public static com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder newBuilder(com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds other) {
    return new com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder(other);
  }

  /**
   * RecordBuilder for PriorMemberFacingIds instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PriorMemberFacingIds>
    implements org.apache.avro.data.RecordBuilder<PriorMemberFacingIds> {

    /** External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee. */
    private java.lang.CharSequence enrolleeMemberFacingIdentifier;
    /** Identifier for the Organization of the Individual. */
    private java.lang.CharSequence organizationIdentifier;
    /** External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee. */
    private java.lang.CharSequence subscriberMemberFacingIdentifier;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.enrolleeMemberFacingIdentifier)) {
        this.enrolleeMemberFacingIdentifier = data().deepCopy(fields()[0].schema(), other.enrolleeMemberFacingIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.organizationIdentifier)) {
        this.organizationIdentifier = data().deepCopy(fields()[1].schema(), other.organizationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subscriberMemberFacingIdentifier)) {
        this.subscriberMemberFacingIdentifier = data().deepCopy(fields()[2].schema(), other.subscriberMemberFacingIdentifier);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PriorMemberFacingIds instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.enrolleeMemberFacingIdentifier)) {
        this.enrolleeMemberFacingIdentifier = data().deepCopy(fields()[0].schema(), other.enrolleeMemberFacingIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.organizationIdentifier)) {
        this.organizationIdentifier = data().deepCopy(fields()[1].schema(), other.organizationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subscriberMemberFacingIdentifier)) {
        this.subscriberMemberFacingIdentifier = data().deepCopy(fields()[2].schema(), other.subscriberMemberFacingIdentifier);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'enrolleeMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @return The value.
      */
    public java.lang.CharSequence getEnrolleeMemberFacingIdentifier() {
      return enrolleeMemberFacingIdentifier;
    }

    /**
      * Sets the value of the 'enrolleeMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @param value The value of 'enrolleeMemberFacingIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder setEnrolleeMemberFacingIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.enrolleeMemberFacingIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'enrolleeMemberFacingIdentifier' field has been set.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @return True if the 'enrolleeMemberFacingIdentifier' field has been set, false otherwise.
      */
    public boolean hasEnrolleeMemberFacingIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'enrolleeMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a member, at the level of the enrollee.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder clearEnrolleeMemberFacingIdentifier() {
      enrolleeMemberFacingIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationIdentifier' field.
      * Identifier for the Organization of the Individual.
      * @return The value.
      */
    public java.lang.CharSequence getOrganizationIdentifier() {
      return organizationIdentifier;
    }

    /**
      * Sets the value of the 'organizationIdentifier' field.
      * Identifier for the Organization of the Individual.
      * @param value The value of 'organizationIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder setOrganizationIdentifier(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.organizationIdentifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationIdentifier' field has been set.
      * Identifier for the Organization of the Individual.
      * @return True if the 'organizationIdentifier' field has been set, false otherwise.
      */
    public boolean hasOrganizationIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'organizationIdentifier' field.
      * Identifier for the Organization of the Individual.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder clearOrganizationIdentifier() {
      organizationIdentifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscriberMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @return The value.
      */
    public java.lang.CharSequence getSubscriberMemberFacingIdentifier() {
      return subscriberMemberFacingIdentifier;
    }

    /**
      * Sets the value of the 'subscriberMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @param value The value of 'subscriberMemberFacingIdentifier'.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder setSubscriberMemberFacingIdentifier(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.subscriberMemberFacingIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subscriberMemberFacingIdentifier' field has been set.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @return True if the 'subscriberMemberFacingIdentifier' field has been set, false otherwise.
      */
    public boolean hasSubscriberMemberFacingIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subscriberMemberFacingIdentifier' field.
      * External facing identifier, such as an ID printed on a membership card, used to identify a subscriber, at the level of the enrollee.
      * @return This builder.
      */
    public com.uhc.schema.model.eligibility.individual.PriorMemberFacingIds.Builder clearSubscriberMemberFacingIdentifier() {
      subscriberMemberFacingIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PriorMemberFacingIds build() {
      try {
        PriorMemberFacingIds record = new PriorMemberFacingIds();
        record.enrolleeMemberFacingIdentifier = fieldSetFlags()[0] ? this.enrolleeMemberFacingIdentifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.organizationIdentifier = fieldSetFlags()[1] ? this.organizationIdentifier : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.subscriberMemberFacingIdentifier = fieldSetFlags()[2] ? this.subscriberMemberFacingIdentifier : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PriorMemberFacingIds>
    WRITER$ = (org.apache.avro.io.DatumWriter<PriorMemberFacingIds>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PriorMemberFacingIds>
    READER$ = (org.apache.avro.io.DatumReader<PriorMemberFacingIds>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
