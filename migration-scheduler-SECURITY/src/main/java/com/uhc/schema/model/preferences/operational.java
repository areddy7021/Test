/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.preferences;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class operational extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4224821966805259372L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"operational\",\"namespace\":\"com.optum.exts.individual.preference.selection.model\",\"fields\":[{\"name\":\"documentIdentifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Internal system identifier that uniquely identifies the document instance.\",\"default\":null},{\"name\":\"documentCreateDatetime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"The date and time that the document instance was created.\",\"default\":null},{\"name\":\"documentUpdateDatetime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"The date and time that the document instance was updated.\",\"default\":null},{\"name\":\"documentOriginatingSourceSystemCode\",\"type\":[\"null\",\"string\"],\"doc\":\"The abbreviated source system designation that represents the originating system for the data found on the document instance.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<operational> ENCODER =
      new BinaryMessageEncoder<operational>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<operational> DECODER =
      new BinaryMessageDecoder<operational>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<operational> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<operational> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<operational>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this operational to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a operational from a ByteBuffer. */
  public static operational fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Internal system identifier that uniquely identifies the document instance. */
  @Deprecated public CharSequence documentIdentifier;
  /** The date and time that the document instance was created. */
  @Deprecated public Long documentCreateDatetime;
  /** The date and time that the document instance was updated. */
  @Deprecated public Long documentUpdateDatetime;
  /** The abbreviated source system designation that represents the originating system for the data found on the document instance. */
  @Deprecated public CharSequence documentOriginatingSourceSystemCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public operational() {}

  /**
   * All-args constructor.
   * @param documentIdentifier Internal system identifier that uniquely identifies the document instance.
   * @param documentCreateDatetime The date and time that the document instance was created.
   * @param documentUpdateDatetime The date and time that the document instance was updated.
   * @param documentOriginatingSourceSystemCode The abbreviated source system designation that represents the originating system for the data found on the document instance.
   */
  public operational(CharSequence documentIdentifier, Long documentCreateDatetime, Long documentUpdateDatetime, CharSequence documentOriginatingSourceSystemCode) {
    this.documentIdentifier = documentIdentifier;
    this.documentCreateDatetime = documentCreateDatetime;
    this.documentUpdateDatetime = documentUpdateDatetime;
    this.documentOriginatingSourceSystemCode = documentOriginatingSourceSystemCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return documentIdentifier;
    case 1: return documentCreateDatetime;
    case 2: return documentUpdateDatetime;
    case 3: return documentOriginatingSourceSystemCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: documentIdentifier = (CharSequence)value$; break;
    case 1: documentCreateDatetime = (Long)value$; break;
    case 2: documentUpdateDatetime = (Long)value$; break;
    case 3: documentOriginatingSourceSystemCode = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'documentIdentifier' field.
   * @return Internal system identifier that uniquely identifies the document instance.
   */
  public CharSequence getDocumentIdentifier() {
    return documentIdentifier;
  }

  /**
   * Sets the value of the 'documentIdentifier' field.
   * Internal system identifier that uniquely identifies the document instance.
   * @param value the value to set.
   */
  public void setDocumentIdentifier(CharSequence value) {
    this.documentIdentifier = value;
  }

  /**
   * Gets the value of the 'documentCreateDatetime' field.
   * @return The date and time that the document instance was created.
   */
  public Long getDocumentCreateDatetime() {
    return documentCreateDatetime;
  }

  /**
   * Sets the value of the 'documentCreateDatetime' field.
   * The date and time that the document instance was created.
   * @param value the value to set.
   */
  public void setDocumentCreateDatetime(Long value) {
    this.documentCreateDatetime = value;
  }

  /**
   * Gets the value of the 'documentUpdateDatetime' field.
   * @return The date and time that the document instance was updated.
   */
  public Long getDocumentUpdateDatetime() {
    return documentUpdateDatetime;
  }

  /**
   * Sets the value of the 'documentUpdateDatetime' field.
   * The date and time that the document instance was updated.
   * @param value the value to set.
   */
  public void setDocumentUpdateDatetime(Long value) {
    this.documentUpdateDatetime = value;
  }

  /**
   * Gets the value of the 'documentOriginatingSourceSystemCode' field.
   * @return The abbreviated source system designation that represents the originating system for the data found on the document instance.
   */
  public CharSequence getDocumentOriginatingSourceSystemCode() {
    return documentOriginatingSourceSystemCode;
  }

  /**
   * Sets the value of the 'documentOriginatingSourceSystemCode' field.
   * The abbreviated source system designation that represents the originating system for the data found on the document instance.
   * @param value the value to set.
   */
  public void setDocumentOriginatingSourceSystemCode(CharSequence value) {
    this.documentOriginatingSourceSystemCode = value;
  }

  /**
   * Creates a new operational RecordBuilder.
   * @return A new operational RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new operational RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new operational RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new operational RecordBuilder by copying an existing operational instance.
   * @param other The existing instance to copy.
   * @return A new operational RecordBuilder
   */
  public static Builder newBuilder(operational other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for operational instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<operational>
    implements org.apache.avro.data.RecordBuilder<operational> {

    /** Internal system identifier that uniquely identifies the document instance. */
    private CharSequence documentIdentifier;
    /** The date and time that the document instance was created. */
    private Long documentCreateDatetime;
    /** The date and time that the document instance was updated. */
    private Long documentUpdateDatetime;
    /** The abbreviated source system designation that represents the originating system for the data found on the document instance. */
    private CharSequence documentOriginatingSourceSystemCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.documentIdentifier)) {
        this.documentIdentifier = data().deepCopy(fields()[0].schema(), other.documentIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.documentCreateDatetime)) {
        this.documentCreateDatetime = data().deepCopy(fields()[1].schema(), other.documentCreateDatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.documentUpdateDatetime)) {
        this.documentUpdateDatetime = data().deepCopy(fields()[2].schema(), other.documentUpdateDatetime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.documentOriginatingSourceSystemCode)) {
        this.documentOriginatingSourceSystemCode = data().deepCopy(fields()[3].schema(), other.documentOriginatingSourceSystemCode);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing operational instance
     * @param other The existing instance to copy.
     */
    private Builder(operational other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.documentIdentifier)) {
        this.documentIdentifier = data().deepCopy(fields()[0].schema(), other.documentIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.documentCreateDatetime)) {
        this.documentCreateDatetime = data().deepCopy(fields()[1].schema(), other.documentCreateDatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.documentUpdateDatetime)) {
        this.documentUpdateDatetime = data().deepCopy(fields()[2].schema(), other.documentUpdateDatetime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.documentOriginatingSourceSystemCode)) {
        this.documentOriginatingSourceSystemCode = data().deepCopy(fields()[3].schema(), other.documentOriginatingSourceSystemCode);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'documentIdentifier' field.
      * Internal system identifier that uniquely identifies the document instance.
      * @return The value.
      */
    public CharSequence getDocumentIdentifier() {
      return documentIdentifier;
    }

    /**
      * Sets the value of the 'documentIdentifier' field.
      * Internal system identifier that uniquely identifies the document instance.
      * @param value The value of 'documentIdentifier'.
      * @return This builder.
      */
    public Builder setDocumentIdentifier(CharSequence value) {
      validate(fields()[0], value);
      this.documentIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'documentIdentifier' field has been set.
      * Internal system identifier that uniquely identifies the document instance.
      * @return True if the 'documentIdentifier' field has been set, false otherwise.
      */
    public boolean hasDocumentIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'documentIdentifier' field.
      * Internal system identifier that uniquely identifies the document instance.
      * @return This builder.
      */
    public Builder clearDocumentIdentifier() {
      documentIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentCreateDatetime' field.
      * The date and time that the document instance was created.
      * @return The value.
      */
    public Long getDocumentCreateDatetime() {
      return documentCreateDatetime;
    }

    /**
      * Sets the value of the 'documentCreateDatetime' field.
      * The date and time that the document instance was created.
      * @param value The value of 'documentCreateDatetime'.
      * @return This builder.
      */
    public Builder setDocumentCreateDatetime(Long value) {
      validate(fields()[1], value);
      this.documentCreateDatetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'documentCreateDatetime' field has been set.
      * The date and time that the document instance was created.
      * @return True if the 'documentCreateDatetime' field has been set, false otherwise.
      */
    public boolean hasDocumentCreateDatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'documentCreateDatetime' field.
      * The date and time that the document instance was created.
      * @return This builder.
      */
    public Builder clearDocumentCreateDatetime() {
      documentCreateDatetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentUpdateDatetime' field.
      * The date and time that the document instance was updated.
      * @return The value.
      */
    public Long getDocumentUpdateDatetime() {
      return documentUpdateDatetime;
    }

    /**
      * Sets the value of the 'documentUpdateDatetime' field.
      * The date and time that the document instance was updated.
      * @param value The value of 'documentUpdateDatetime'.
      * @return This builder.
      */
    public Builder setDocumentUpdateDatetime(Long value) {
      validate(fields()[2], value);
      this.documentUpdateDatetime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'documentUpdateDatetime' field has been set.
      * The date and time that the document instance was updated.
      * @return True if the 'documentUpdateDatetime' field has been set, false otherwise.
      */
    public boolean hasDocumentUpdateDatetime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'documentUpdateDatetime' field.
      * The date and time that the document instance was updated.
      * @return This builder.
      */
    public Builder clearDocumentUpdateDatetime() {
      documentUpdateDatetime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentOriginatingSourceSystemCode' field.
      * The abbreviated source system designation that represents the originating system for the data found on the document instance.
      * @return The value.
      */
    public CharSequence getDocumentOriginatingSourceSystemCode() {
      return documentOriginatingSourceSystemCode;
    }

    /**
      * Sets the value of the 'documentOriginatingSourceSystemCode' field.
      * The abbreviated source system designation that represents the originating system for the data found on the document instance.
      * @param value The value of 'documentOriginatingSourceSystemCode'.
      * @return This builder.
      */
    public Builder setDocumentOriginatingSourceSystemCode(CharSequence value) {
      validate(fields()[3], value);
      this.documentOriginatingSourceSystemCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'documentOriginatingSourceSystemCode' field has been set.
      * The abbreviated source system designation that represents the originating system for the data found on the document instance.
      * @return True if the 'documentOriginatingSourceSystemCode' field has been set, false otherwise.
      */
    public boolean hasDocumentOriginatingSourceSystemCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'documentOriginatingSourceSystemCode' field.
      * The abbreviated source system designation that represents the originating system for the data found on the document instance.
      * @return This builder.
      */
    public Builder clearDocumentOriginatingSourceSystemCode() {
      documentOriginatingSourceSystemCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public operational build() {
      try {
        operational record = new operational();
        record.documentIdentifier = fieldSetFlags()[0] ? this.documentIdentifier : (CharSequence) defaultValue(fields()[0]);
        record.documentCreateDatetime = fieldSetFlags()[1] ? this.documentCreateDatetime : (Long) defaultValue(fields()[1]);
        record.documentUpdateDatetime = fieldSetFlags()[2] ? this.documentUpdateDatetime : (Long) defaultValue(fields()[2]);
        record.documentOriginatingSourceSystemCode = fieldSetFlags()[3] ? this.documentOriginatingSourceSystemCode : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<operational>
    WRITER$ = (org.apache.avro.io.DatumWriter<operational>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<operational>
    READER$ = (org.apache.avro.io.DatumReader<operational>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
