/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uhc.schema.model.preferences;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class preferenceSelection extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1859258545450964695L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"preferenceSelection\",\"namespace\":\"com.optum.exts.individual.preference.selection.model\",\"fields\":[{\"name\":\"preferenceCategoryCode\",\"type\":[\"null\",\"string\"],\"doc\":\"(REF) The code for the category for the preference. Ex: Paperless, etc.\",\"default\":null},{\"name\":\"preferenceTopicCode\",\"type\":[\"null\",\"string\"],\"doc\":\"(REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.\",\"default\":null},{\"name\":\"preferencePropertyCode\",\"type\":[\"null\",\"string\"],\"doc\":\"(REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.\",\"default\":null},{\"name\":\"preferenceSelectionEffectiveDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"doc\":\"Date preference selection becomes effective.\",\"default\":null},{\"name\":\"preferencePropertyOptionCode\",\"type\":[\"null\",\"string\"],\"doc\":\"(REF) The code for the property option for the preference. Ex: Email, Yes, etc.\",\"default\":null},{\"name\":\"preferenceTopicDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"(REFDEF) The description for the preference topic code.\",\"default\":null},{\"name\":\"preferencePropertyDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"(REFDEF) The description for the preference property code.\",\"default\":null},{\"name\":\"preferencePropertyOptionDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"(REFDEF) The description for the preference property option code.\",\"default\":null},{\"name\":\"preferencePropertyOptionValue\",\"type\":[\"null\",\"string\"],\"doc\":\"A value for the property option.\",\"default\":null},{\"name\":\"lastUpdateDateTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}],\"doc\":\"Date of last upate.\",\"default\":null},{\"name\":\"lastUpdateUser\",\"type\":[\"null\",\"string\"],\"doc\":\"User of last upate.\",\"default\":null},{\"name\":\"preferenceCategoryDescription\",\"type\":[\"null\",\"string\"],\"doc\":\"(REFDEF) The description for the category for the preference.\",\"default\":null},{\"name\":\"isDefaultSelection\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.\",\"default\":null},{\"name\":\"preferenceSelectionTerminationDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"doc\":\"Date preference selection is terminated.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<preferenceSelection> ENCODER =
      new BinaryMessageEncoder<preferenceSelection>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<preferenceSelection> DECODER =
      new BinaryMessageDecoder<preferenceSelection>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<preferenceSelection> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<preferenceSelection> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<preferenceSelection>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this preferenceSelection to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a preferenceSelection from a ByteBuffer. */
  public static preferenceSelection fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** (REF) The code for the category for the preference. Ex: Paperless, etc. */
  @Deprecated public CharSequence preferenceCategoryCode;
  /** (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc. */
  @Deprecated public CharSequence preferenceTopicCode;
  /** (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc. */
  @Deprecated public CharSequence preferencePropertyCode;
  /** Date preference selection becomes effective. */
  @Deprecated public org.joda.time.LocalDate preferenceSelectionEffectiveDate;
  /** (REF) The code for the property option for the preference. Ex: Email, Yes, etc. */
  @Deprecated public CharSequence preferencePropertyOptionCode;
  /** (REFDEF) The description for the preference topic code. */
  @Deprecated public CharSequence preferenceTopicDescription;
  /** (REFDEF) The description for the preference property code. */
  @Deprecated public CharSequence preferencePropertyDescription;
  /** (REFDEF) The description for the preference property option code. */
  @Deprecated public CharSequence preferencePropertyOptionDescription;
  /** A value for the property option. */
  @Deprecated public CharSequence preferencePropertyOptionValue;
  /** Date of last upate. */
  @Deprecated public Long lastUpdateDateTime;
  /** User of last upate. */
  @Deprecated public CharSequence lastUpdateUser;
  /** (REFDEF) The description for the category for the preference. */
  @Deprecated public CharSequence preferenceCategoryDescription;
  /** Indicates if the selection is a system assigned default selection, as opposed to a user selected preference. */
  @Deprecated public CharSequence isDefaultSelection;
  /** Date preference selection is terminated. */
  @Deprecated public org.joda.time.LocalDate preferenceSelectionTerminationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public preferenceSelection() {}

  /**
   * All-args constructor.
   * @param preferenceCategoryCode (REF) The code for the category for the preference. Ex: Paperless, etc.
   * @param preferenceTopicCode (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
   * @param preferencePropertyCode (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
   * @param preferenceSelectionEffectiveDate Date preference selection becomes effective.
   * @param preferencePropertyOptionCode (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
   * @param preferenceTopicDescription (REFDEF) The description for the preference topic code.
   * @param preferencePropertyDescription (REFDEF) The description for the preference property code.
   * @param preferencePropertyOptionDescription (REFDEF) The description for the preference property option code.
   * @param preferencePropertyOptionValue A value for the property option.
   * @param lastUpdateDateTime Date of last upate.
   * @param lastUpdateUser User of last upate.
   * @param preferenceCategoryDescription (REFDEF) The description for the category for the preference.
   * @param isDefaultSelection Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
   * @param preferenceSelectionTerminationDate Date preference selection is terminated.
   */
  public preferenceSelection(CharSequence preferenceCategoryCode, CharSequence preferenceTopicCode, CharSequence preferencePropertyCode, org.joda.time.LocalDate preferenceSelectionEffectiveDate, CharSequence preferencePropertyOptionCode, CharSequence preferenceTopicDescription, CharSequence preferencePropertyDescription, CharSequence preferencePropertyOptionDescription, CharSequence preferencePropertyOptionValue, Long lastUpdateDateTime, CharSequence lastUpdateUser, CharSequence preferenceCategoryDescription, CharSequence isDefaultSelection, org.joda.time.LocalDate preferenceSelectionTerminationDate) {
    this.preferenceCategoryCode = preferenceCategoryCode;
    this.preferenceTopicCode = preferenceTopicCode;
    this.preferencePropertyCode = preferencePropertyCode;
    this.preferenceSelectionEffectiveDate = preferenceSelectionEffectiveDate;
    this.preferencePropertyOptionCode = preferencePropertyOptionCode;
    this.preferenceTopicDescription = preferenceTopicDescription;
    this.preferencePropertyDescription = preferencePropertyDescription;
    this.preferencePropertyOptionDescription = preferencePropertyOptionDescription;
    this.preferencePropertyOptionValue = preferencePropertyOptionValue;
    this.lastUpdateDateTime = lastUpdateDateTime;
    this.lastUpdateUser = lastUpdateUser;
    this.preferenceCategoryDescription = preferenceCategoryDescription;
    this.isDefaultSelection = isDefaultSelection;
    this.preferenceSelectionTerminationDate = preferenceSelectionTerminationDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return preferenceCategoryCode;
    case 1: return preferenceTopicCode;
    case 2: return preferencePropertyCode;
    case 3: return preferenceSelectionEffectiveDate;
    case 4: return preferencePropertyOptionCode;
    case 5: return preferenceTopicDescription;
    case 6: return preferencePropertyDescription;
    case 7: return preferencePropertyOptionDescription;
    case 8: return preferencePropertyOptionValue;
    case 9: return lastUpdateDateTime;
    case 10: return lastUpdateUser;
    case 11: return preferenceCategoryDescription;
    case 12: return isDefaultSelection;
    case 13: return preferenceSelectionTerminationDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: preferenceCategoryCode = (CharSequence)value$; break;
    case 1: preferenceTopicCode = (CharSequence)value$; break;
    case 2: preferencePropertyCode = (CharSequence)value$; break;
    case 3: preferenceSelectionEffectiveDate = (org.joda.time.LocalDate)value$; break;
    case 4: preferencePropertyOptionCode = (CharSequence)value$; break;
    case 5: preferenceTopicDescription = (CharSequence)value$; break;
    case 6: preferencePropertyDescription = (CharSequence)value$; break;
    case 7: preferencePropertyOptionDescription = (CharSequence)value$; break;
    case 8: preferencePropertyOptionValue = (CharSequence)value$; break;
    case 9: lastUpdateDateTime = (Long)value$; break;
    case 10: lastUpdateUser = (CharSequence)value$; break;
    case 11: preferenceCategoryDescription = (CharSequence)value$; break;
    case 12: isDefaultSelection = (CharSequence)value$; break;
    case 13: preferenceSelectionTerminationDate = (org.joda.time.LocalDate)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'preferenceCategoryCode' field.
   * @return (REF) The code for the category for the preference. Ex: Paperless, etc.
   */
  public CharSequence getPreferenceCategoryCode() {
    return preferenceCategoryCode;
  }

  /**
   * Sets the value of the 'preferenceCategoryCode' field.
   * (REF) The code for the category for the preference. Ex: Paperless, etc.
   * @param value the value to set.
   */
  public void setPreferenceCategoryCode(CharSequence value) {
    this.preferenceCategoryCode = value;
  }

  /**
   * Gets the value of the 'preferenceTopicCode' field.
   * @return (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
   */
  public CharSequence getPreferenceTopicCode() {
    return preferenceTopicCode;
  }

  /**
   * Sets the value of the 'preferenceTopicCode' field.
   * (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
   * @param value the value to set.
   */
  public void setPreferenceTopicCode(CharSequence value) {
    this.preferenceTopicCode = value;
  }

  /**
   * Gets the value of the 'preferencePropertyCode' field.
   * @return (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
   */
  public CharSequence getPreferencePropertyCode() {
    return preferencePropertyCode;
  }

  /**
   * Sets the value of the 'preferencePropertyCode' field.
   * (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
   * @param value the value to set.
   */
  public void setPreferencePropertyCode(CharSequence value) {
    this.preferencePropertyCode = value;
  }

  /**
   * Gets the value of the 'preferenceSelectionEffectiveDate' field.
   * @return Date preference selection becomes effective.
   */
  public org.joda.time.LocalDate getPreferenceSelectionEffectiveDate() {
    return preferenceSelectionEffectiveDate;
  }

  /**
   * Sets the value of the 'preferenceSelectionEffectiveDate' field.
   * Date preference selection becomes effective.
   * @param value the value to set.
   */
  public void setPreferenceSelectionEffectiveDate(org.joda.time.LocalDate value) {
    this.preferenceSelectionEffectiveDate = value;
  }

  /**
   * Gets the value of the 'preferencePropertyOptionCode' field.
   * @return (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
   */
  public CharSequence getPreferencePropertyOptionCode() {
    return preferencePropertyOptionCode;
  }

  /**
   * Sets the value of the 'preferencePropertyOptionCode' field.
   * (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
   * @param value the value to set.
   */
  public void setPreferencePropertyOptionCode(CharSequence value) {
    this.preferencePropertyOptionCode = value;
  }

  /**
   * Gets the value of the 'preferenceTopicDescription' field.
   * @return (REFDEF) The description for the preference topic code.
   */
  public CharSequence getPreferenceTopicDescription() {
    return preferenceTopicDescription;
  }

  /**
   * Sets the value of the 'preferenceTopicDescription' field.
   * (REFDEF) The description for the preference topic code.
   * @param value the value to set.
   */
  public void setPreferenceTopicDescription(CharSequence value) {
    this.preferenceTopicDescription = value;
  }

  /**
   * Gets the value of the 'preferencePropertyDescription' field.
   * @return (REFDEF) The description for the preference property code.
   */
  public CharSequence getPreferencePropertyDescription() {
    return preferencePropertyDescription;
  }

  /**
   * Sets the value of the 'preferencePropertyDescription' field.
   * (REFDEF) The description for the preference property code.
   * @param value the value to set.
   */
  public void setPreferencePropertyDescription(CharSequence value) {
    this.preferencePropertyDescription = value;
  }

  /**
   * Gets the value of the 'preferencePropertyOptionDescription' field.
   * @return (REFDEF) The description for the preference property option code.
   */
  public CharSequence getPreferencePropertyOptionDescription() {
    return preferencePropertyOptionDescription;
  }

  /**
   * Sets the value of the 'preferencePropertyOptionDescription' field.
   * (REFDEF) The description for the preference property option code.
   * @param value the value to set.
   */
  public void setPreferencePropertyOptionDescription(CharSequence value) {
    this.preferencePropertyOptionDescription = value;
  }

  /**
   * Gets the value of the 'preferencePropertyOptionValue' field.
   * @return A value for the property option.
   */
  public CharSequence getPreferencePropertyOptionValue() {
    return preferencePropertyOptionValue;
  }

  /**
   * Sets the value of the 'preferencePropertyOptionValue' field.
   * A value for the property option.
   * @param value the value to set.
   */
  public void setPreferencePropertyOptionValue(CharSequence value) {
    this.preferencePropertyOptionValue = value;
  }

  /**
   * Gets the value of the 'lastUpdateDateTime' field.
   * @return Date of last upate.
   */
  public Long getLastUpdateDateTime() {
    return lastUpdateDateTime;
  }

  /**
   * Sets the value of the 'lastUpdateDateTime' field.
   * Date of last upate.
   * @param value the value to set.
   */
  public void setLastUpdateDateTime(Long value) {
    this.lastUpdateDateTime = value;
  }

  /**
   * Gets the value of the 'lastUpdateUser' field.
   * @return User of last upate.
   */
  public CharSequence getLastUpdateUser() {
    return lastUpdateUser;
  }

  /**
   * Sets the value of the 'lastUpdateUser' field.
   * User of last upate.
   * @param value the value to set.
   */
  public void setLastUpdateUser(CharSequence value) {
    this.lastUpdateUser = value;
  }

  /**
   * Gets the value of the 'preferenceCategoryDescription' field.
   * @return (REFDEF) The description for the category for the preference.
   */
  public CharSequence getPreferenceCategoryDescription() {
    return preferenceCategoryDescription;
  }

  /**
   * Sets the value of the 'preferenceCategoryDescription' field.
   * (REFDEF) The description for the category for the preference.
   * @param value the value to set.
   */
  public void setPreferenceCategoryDescription(CharSequence value) {
    this.preferenceCategoryDescription = value;
  }

  /**
   * Gets the value of the 'isDefaultSelection' field.
   * @return Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
   */
  public CharSequence getIsDefaultSelection() {
    return isDefaultSelection;
  }

  /**
   * Sets the value of the 'isDefaultSelection' field.
   * Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
   * @param value the value to set.
   */
  public void setIsDefaultSelection(CharSequence value) {
    this.isDefaultSelection = value;
  }

  /**
   * Gets the value of the 'preferenceSelectionTerminationDate' field.
   * @return Date preference selection is terminated.
   */
  public org.joda.time.LocalDate getPreferenceSelectionTerminationDate() {
    return preferenceSelectionTerminationDate;
  }

  /**
   * Sets the value of the 'preferenceSelectionTerminationDate' field.
   * Date preference selection is terminated.
   * @param value the value to set.
   */
  public void setPreferenceSelectionTerminationDate(org.joda.time.LocalDate value) {
    this.preferenceSelectionTerminationDate = value;
  }

  /**
   * Creates a new preferenceSelection RecordBuilder.
   * @return A new preferenceSelection RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new preferenceSelection RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new preferenceSelection RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new preferenceSelection RecordBuilder by copying an existing preferenceSelection instance.
   * @param other The existing instance to copy.
   * @return A new preferenceSelection RecordBuilder
   */
  public static Builder newBuilder(preferenceSelection other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for preferenceSelection instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<preferenceSelection>
    implements org.apache.avro.data.RecordBuilder<preferenceSelection> {

    /** (REF) The code for the category for the preference. Ex: Paperless, etc. */
    private CharSequence preferenceCategoryCode;
    /** (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc. */
    private CharSequence preferenceTopicCode;
    /** (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc. */
    private CharSequence preferencePropertyCode;
    /** Date preference selection becomes effective. */
    private org.joda.time.LocalDate preferenceSelectionEffectiveDate;
    /** (REF) The code for the property option for the preference. Ex: Email, Yes, etc. */
    private CharSequence preferencePropertyOptionCode;
    /** (REFDEF) The description for the preference topic code. */
    private CharSequence preferenceTopicDescription;
    /** (REFDEF) The description for the preference property code. */
    private CharSequence preferencePropertyDescription;
    /** (REFDEF) The description for the preference property option code. */
    private CharSequence preferencePropertyOptionDescription;
    /** A value for the property option. */
    private CharSequence preferencePropertyOptionValue;
    /** Date of last upate. */
    private Long lastUpdateDateTime;
    /** User of last upate. */
    private CharSequence lastUpdateUser;
    /** (REFDEF) The description for the category for the preference. */
    private CharSequence preferenceCategoryDescription;
    /** Indicates if the selection is a system assigned default selection, as opposed to a user selected preference. */
    private CharSequence isDefaultSelection;
    /** Date preference selection is terminated. */
    private org.joda.time.LocalDate preferenceSelectionTerminationDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.preferenceCategoryCode)) {
        this.preferenceCategoryCode = data().deepCopy(fields()[0].schema(), other.preferenceCategoryCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.preferenceTopicCode)) {
        this.preferenceTopicCode = data().deepCopy(fields()[1].schema(), other.preferenceTopicCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.preferencePropertyCode)) {
        this.preferencePropertyCode = data().deepCopy(fields()[2].schema(), other.preferencePropertyCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.preferenceSelectionEffectiveDate)) {
        this.preferenceSelectionEffectiveDate = data().deepCopy(fields()[3].schema(), other.preferenceSelectionEffectiveDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.preferencePropertyOptionCode)) {
        this.preferencePropertyOptionCode = data().deepCopy(fields()[4].schema(), other.preferencePropertyOptionCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.preferenceTopicDescription)) {
        this.preferenceTopicDescription = data().deepCopy(fields()[5].schema(), other.preferenceTopicDescription);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.preferencePropertyDescription)) {
        this.preferencePropertyDescription = data().deepCopy(fields()[6].schema(), other.preferencePropertyDescription);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.preferencePropertyOptionDescription)) {
        this.preferencePropertyOptionDescription = data().deepCopy(fields()[7].schema(), other.preferencePropertyOptionDescription);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.preferencePropertyOptionValue)) {
        this.preferencePropertyOptionValue = data().deepCopy(fields()[8].schema(), other.preferencePropertyOptionValue);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lastUpdateDateTime)) {
        this.lastUpdateDateTime = data().deepCopy(fields()[9].schema(), other.lastUpdateDateTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lastUpdateUser)) {
        this.lastUpdateUser = data().deepCopy(fields()[10].schema(), other.lastUpdateUser);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.preferenceCategoryDescription)) {
        this.preferenceCategoryDescription = data().deepCopy(fields()[11].schema(), other.preferenceCategoryDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isDefaultSelection)) {
        this.isDefaultSelection = data().deepCopy(fields()[12].schema(), other.isDefaultSelection);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.preferenceSelectionTerminationDate)) {
        this.preferenceSelectionTerminationDate = data().deepCopy(fields()[13].schema(), other.preferenceSelectionTerminationDate);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing preferenceSelection instance
     * @param other The existing instance to copy.
     */
    private Builder(preferenceSelection other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.preferenceCategoryCode)) {
        this.preferenceCategoryCode = data().deepCopy(fields()[0].schema(), other.preferenceCategoryCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.preferenceTopicCode)) {
        this.preferenceTopicCode = data().deepCopy(fields()[1].schema(), other.preferenceTopicCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.preferencePropertyCode)) {
        this.preferencePropertyCode = data().deepCopy(fields()[2].schema(), other.preferencePropertyCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.preferenceSelectionEffectiveDate)) {
        this.preferenceSelectionEffectiveDate = data().deepCopy(fields()[3].schema(), other.preferenceSelectionEffectiveDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.preferencePropertyOptionCode)) {
        this.preferencePropertyOptionCode = data().deepCopy(fields()[4].schema(), other.preferencePropertyOptionCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.preferenceTopicDescription)) {
        this.preferenceTopicDescription = data().deepCopy(fields()[5].schema(), other.preferenceTopicDescription);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.preferencePropertyDescription)) {
        this.preferencePropertyDescription = data().deepCopy(fields()[6].schema(), other.preferencePropertyDescription);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.preferencePropertyOptionDescription)) {
        this.preferencePropertyOptionDescription = data().deepCopy(fields()[7].schema(), other.preferencePropertyOptionDescription);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.preferencePropertyOptionValue)) {
        this.preferencePropertyOptionValue = data().deepCopy(fields()[8].schema(), other.preferencePropertyOptionValue);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lastUpdateDateTime)) {
        this.lastUpdateDateTime = data().deepCopy(fields()[9].schema(), other.lastUpdateDateTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lastUpdateUser)) {
        this.lastUpdateUser = data().deepCopy(fields()[10].schema(), other.lastUpdateUser);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.preferenceCategoryDescription)) {
        this.preferenceCategoryDescription = data().deepCopy(fields()[11].schema(), other.preferenceCategoryDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isDefaultSelection)) {
        this.isDefaultSelection = data().deepCopy(fields()[12].schema(), other.isDefaultSelection);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.preferenceSelectionTerminationDate)) {
        this.preferenceSelectionTerminationDate = data().deepCopy(fields()[13].schema(), other.preferenceSelectionTerminationDate);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'preferenceCategoryCode' field.
      * (REF) The code for the category for the preference. Ex: Paperless, etc.
      * @return The value.
      */
    public CharSequence getPreferenceCategoryCode() {
      return preferenceCategoryCode;
    }

    /**
      * Sets the value of the 'preferenceCategoryCode' field.
      * (REF) The code for the category for the preference. Ex: Paperless, etc.
      * @param value The value of 'preferenceCategoryCode'.
      * @return This builder.
      */
    public Builder setPreferenceCategoryCode(CharSequence value) {
      validate(fields()[0], value);
      this.preferenceCategoryCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'preferenceCategoryCode' field has been set.
      * (REF) The code for the category for the preference. Ex: Paperless, etc.
      * @return True if the 'preferenceCategoryCode' field has been set, false otherwise.
      */
    public boolean hasPreferenceCategoryCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'preferenceCategoryCode' field.
      * (REF) The code for the category for the preference. Ex: Paperless, etc.
      * @return This builder.
      */
    public Builder clearPreferenceCategoryCode() {
      preferenceCategoryCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferenceTopicCode' field.
      * (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
      * @return The value.
      */
    public CharSequence getPreferenceTopicCode() {
      return preferenceTopicCode;
    }

    /**
      * Sets the value of the 'preferenceTopicCode' field.
      * (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
      * @param value The value of 'preferenceTopicCode'.
      * @return This builder.
      */
    public Builder setPreferenceTopicCode(CharSequence value) {
      validate(fields()[1], value);
      this.preferenceTopicCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'preferenceTopicCode' field has been set.
      * (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
      * @return True if the 'preferenceTopicCode' field has been set, false otherwise.
      */
    public boolean hasPreferenceTopicCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'preferenceTopicCode' field.
      * (REF) The code for the topic for the preference. Ex: Do Not Call, Tax Documents, Required Documents, etc.
      * @return This builder.
      */
    public Builder clearPreferenceTopicCode() {
      preferenceTopicCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferencePropertyCode' field.
      * (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
      * @return The value.
      */
    public CharSequence getPreferencePropertyCode() {
      return preferencePropertyCode;
    }

    /**
      * Sets the value of the 'preferencePropertyCode' field.
      * (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
      * @param value The value of 'preferencePropertyCode'.
      * @return This builder.
      */
    public Builder setPreferencePropertyCode(CharSequence value) {
      validate(fields()[2], value);
      this.preferencePropertyCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'preferencePropertyCode' field has been set.
      * (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
      * @return True if the 'preferencePropertyCode' field has been set, false otherwise.
      */
    public boolean hasPreferencePropertyCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'preferencePropertyCode' field.
      * (REF) The code for the property for the preference. Ex: Document Delivery Channel, Opt-In, etc.
      * @return This builder.
      */
    public Builder clearPreferencePropertyCode() {
      preferencePropertyCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferenceSelectionEffectiveDate' field.
      * Date preference selection becomes effective.
      * @return The value.
      */
    public org.joda.time.LocalDate getPreferenceSelectionEffectiveDate() {
      return preferenceSelectionEffectiveDate;
    }

    /**
      * Sets the value of the 'preferenceSelectionEffectiveDate' field.
      * Date preference selection becomes effective.
      * @param value The value of 'preferenceSelectionEffectiveDate'.
      * @return This builder.
      */
    public Builder setPreferenceSelectionEffectiveDate(org.joda.time.LocalDate value) {
      validate(fields()[3], value);
      this.preferenceSelectionEffectiveDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'preferenceSelectionEffectiveDate' field has been set.
      * Date preference selection becomes effective.
      * @return True if the 'preferenceSelectionEffectiveDate' field has been set, false otherwise.
      */
    public boolean hasPreferenceSelectionEffectiveDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'preferenceSelectionEffectiveDate' field.
      * Date preference selection becomes effective.
      * @return This builder.
      */
    public Builder clearPreferenceSelectionEffectiveDate() {
      preferenceSelectionEffectiveDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferencePropertyOptionCode' field.
      * (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
      * @return The value.
      */
    public CharSequence getPreferencePropertyOptionCode() {
      return preferencePropertyOptionCode;
    }

    /**
      * Sets the value of the 'preferencePropertyOptionCode' field.
      * (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
      * @param value The value of 'preferencePropertyOptionCode'.
      * @return This builder.
      */
    public Builder setPreferencePropertyOptionCode(CharSequence value) {
      validate(fields()[4], value);
      this.preferencePropertyOptionCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'preferencePropertyOptionCode' field has been set.
      * (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
      * @return True if the 'preferencePropertyOptionCode' field has been set, false otherwise.
      */
    public boolean hasPreferencePropertyOptionCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'preferencePropertyOptionCode' field.
      * (REF) The code for the property option for the preference. Ex: Email, Yes, etc.
      * @return This builder.
      */
    public Builder clearPreferencePropertyOptionCode() {
      preferencePropertyOptionCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferenceTopicDescription' field.
      * (REFDEF) The description for the preference topic code.
      * @return The value.
      */
    public CharSequence getPreferenceTopicDescription() {
      return preferenceTopicDescription;
    }

    /**
      * Sets the value of the 'preferenceTopicDescription' field.
      * (REFDEF) The description for the preference topic code.
      * @param value The value of 'preferenceTopicDescription'.
      * @return This builder.
      */
    public Builder setPreferenceTopicDescription(CharSequence value) {
      validate(fields()[5], value);
      this.preferenceTopicDescription = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'preferenceTopicDescription' field has been set.
      * (REFDEF) The description for the preference topic code.
      * @return True if the 'preferenceTopicDescription' field has been set, false otherwise.
      */
    public boolean hasPreferenceTopicDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'preferenceTopicDescription' field.
      * (REFDEF) The description for the preference topic code.
      * @return This builder.
      */
    public Builder clearPreferenceTopicDescription() {
      preferenceTopicDescription = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferencePropertyDescription' field.
      * (REFDEF) The description for the preference property code.
      * @return The value.
      */
    public CharSequence getPreferencePropertyDescription() {
      return preferencePropertyDescription;
    }

    /**
      * Sets the value of the 'preferencePropertyDescription' field.
      * (REFDEF) The description for the preference property code.
      * @param value The value of 'preferencePropertyDescription'.
      * @return This builder.
      */
    public Builder setPreferencePropertyDescription(CharSequence value) {
      validate(fields()[6], value);
      this.preferencePropertyDescription = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'preferencePropertyDescription' field has been set.
      * (REFDEF) The description for the preference property code.
      * @return True if the 'preferencePropertyDescription' field has been set, false otherwise.
      */
    public boolean hasPreferencePropertyDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'preferencePropertyDescription' field.
      * (REFDEF) The description for the preference property code.
      * @return This builder.
      */
    public Builder clearPreferencePropertyDescription() {
      preferencePropertyDescription = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferencePropertyOptionDescription' field.
      * (REFDEF) The description for the preference property option code.
      * @return The value.
      */
    public CharSequence getPreferencePropertyOptionDescription() {
      return preferencePropertyOptionDescription;
    }

    /**
      * Sets the value of the 'preferencePropertyOptionDescription' field.
      * (REFDEF) The description for the preference property option code.
      * @param value The value of 'preferencePropertyOptionDescription'.
      * @return This builder.
      */
    public Builder setPreferencePropertyOptionDescription(CharSequence value) {
      validate(fields()[7], value);
      this.preferencePropertyOptionDescription = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'preferencePropertyOptionDescription' field has been set.
      * (REFDEF) The description for the preference property option code.
      * @return True if the 'preferencePropertyOptionDescription' field has been set, false otherwise.
      */
    public boolean hasPreferencePropertyOptionDescription() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'preferencePropertyOptionDescription' field.
      * (REFDEF) The description for the preference property option code.
      * @return This builder.
      */
    public Builder clearPreferencePropertyOptionDescription() {
      preferencePropertyOptionDescription = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferencePropertyOptionValue' field.
      * A value for the property option.
      * @return The value.
      */
    public CharSequence getPreferencePropertyOptionValue() {
      return preferencePropertyOptionValue;
    }

    /**
      * Sets the value of the 'preferencePropertyOptionValue' field.
      * A value for the property option.
      * @param value The value of 'preferencePropertyOptionValue'.
      * @return This builder.
      */
    public Builder setPreferencePropertyOptionValue(CharSequence value) {
      validate(fields()[8], value);
      this.preferencePropertyOptionValue = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'preferencePropertyOptionValue' field has been set.
      * A value for the property option.
      * @return True if the 'preferencePropertyOptionValue' field has been set, false otherwise.
      */
    public boolean hasPreferencePropertyOptionValue() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'preferencePropertyOptionValue' field.
      * A value for the property option.
      * @return This builder.
      */
    public Builder clearPreferencePropertyOptionValue() {
      preferencePropertyOptionValue = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdateDateTime' field.
      * Date of last upate.
      * @return The value.
      */
    public Long getLastUpdateDateTime() {
      return lastUpdateDateTime;
    }

    /**
      * Sets the value of the 'lastUpdateDateTime' field.
      * Date of last upate.
      * @param value The value of 'lastUpdateDateTime'.
      * @return This builder.
      */
    public Builder setLastUpdateDateTime(Long value) {
      validate(fields()[9], value);
      this.lastUpdateDateTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdateDateTime' field has been set.
      * Date of last upate.
      * @return True if the 'lastUpdateDateTime' field has been set, false otherwise.
      */
    public boolean hasLastUpdateDateTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'lastUpdateDateTime' field.
      * Date of last upate.
      * @return This builder.
      */
    public Builder clearLastUpdateDateTime() {
      lastUpdateDateTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdateUser' field.
      * User of last upate.
      * @return The value.
      */
    public CharSequence getLastUpdateUser() {
      return lastUpdateUser;
    }

    /**
      * Sets the value of the 'lastUpdateUser' field.
      * User of last upate.
      * @param value The value of 'lastUpdateUser'.
      * @return This builder.
      */
    public Builder setLastUpdateUser(CharSequence value) {
      validate(fields()[10], value);
      this.lastUpdateUser = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdateUser' field has been set.
      * User of last upate.
      * @return True if the 'lastUpdateUser' field has been set, false otherwise.
      */
    public boolean hasLastUpdateUser() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'lastUpdateUser' field.
      * User of last upate.
      * @return This builder.
      */
    public Builder clearLastUpdateUser() {
      lastUpdateUser = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferenceCategoryDescription' field.
      * (REFDEF) The description for the category for the preference.
      * @return The value.
      */
    public CharSequence getPreferenceCategoryDescription() {
      return preferenceCategoryDescription;
    }

    /**
      * Sets the value of the 'preferenceCategoryDescription' field.
      * (REFDEF) The description for the category for the preference.
      * @param value The value of 'preferenceCategoryDescription'.
      * @return This builder.
      */
    public Builder setPreferenceCategoryDescription(CharSequence value) {
      validate(fields()[11], value);
      this.preferenceCategoryDescription = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'preferenceCategoryDescription' field has been set.
      * (REFDEF) The description for the category for the preference.
      * @return True if the 'preferenceCategoryDescription' field has been set, false otherwise.
      */
    public boolean hasPreferenceCategoryDescription() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'preferenceCategoryDescription' field.
      * (REFDEF) The description for the category for the preference.
      * @return This builder.
      */
    public Builder clearPreferenceCategoryDescription() {
      preferenceCategoryDescription = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'isDefaultSelection' field.
      * Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
      * @return The value.
      */
    public CharSequence getIsDefaultSelection() {
      return isDefaultSelection;
    }

    /**
      * Sets the value of the 'isDefaultSelection' field.
      * Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
      * @param value The value of 'isDefaultSelection'.
      * @return This builder.
      */
    public Builder setIsDefaultSelection(CharSequence value) {
      validate(fields()[12], value);
      this.isDefaultSelection = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'isDefaultSelection' field has been set.
      * Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
      * @return True if the 'isDefaultSelection' field has been set, false otherwise.
      */
    public boolean hasIsDefaultSelection() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'isDefaultSelection' field.
      * Indicates if the selection is a system assigned default selection, as opposed to a user selected preference.
      * @return This builder.
      */
    public Builder clearIsDefaultSelection() {
      isDefaultSelection = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferenceSelectionTerminationDate' field.
      * Date preference selection is terminated.
      * @return The value.
      */
    public org.joda.time.LocalDate getPreferenceSelectionTerminationDate() {
      return preferenceSelectionTerminationDate;
    }

    /**
      * Sets the value of the 'preferenceSelectionTerminationDate' field.
      * Date preference selection is terminated.
      * @param value The value of 'preferenceSelectionTerminationDate'.
      * @return This builder.
      */
    public Builder setPreferenceSelectionTerminationDate(org.joda.time.LocalDate value) {
      validate(fields()[13], value);
      this.preferenceSelectionTerminationDate = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'preferenceSelectionTerminationDate' field has been set.
      * Date preference selection is terminated.
      * @return True if the 'preferenceSelectionTerminationDate' field has been set, false otherwise.
      */
    public boolean hasPreferenceSelectionTerminationDate() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'preferenceSelectionTerminationDate' field.
      * Date preference selection is terminated.
      * @return This builder.
      */
    public Builder clearPreferenceSelectionTerminationDate() {
      preferenceSelectionTerminationDate = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public preferenceSelection build() {
      try {
        preferenceSelection record = new preferenceSelection();
        record.preferenceCategoryCode = fieldSetFlags()[0] ? this.preferenceCategoryCode : (CharSequence) defaultValue(fields()[0]);
        record.preferenceTopicCode = fieldSetFlags()[1] ? this.preferenceTopicCode : (CharSequence) defaultValue(fields()[1]);
        record.preferencePropertyCode = fieldSetFlags()[2] ? this.preferencePropertyCode : (CharSequence) defaultValue(fields()[2]);
        record.preferenceSelectionEffectiveDate = fieldSetFlags()[3] ? this.preferenceSelectionEffectiveDate : (org.joda.time.LocalDate) defaultValue(fields()[3]);
        record.preferencePropertyOptionCode = fieldSetFlags()[4] ? this.preferencePropertyOptionCode : (CharSequence) defaultValue(fields()[4]);
        record.preferenceTopicDescription = fieldSetFlags()[5] ? this.preferenceTopicDescription : (CharSequence) defaultValue(fields()[5]);
        record.preferencePropertyDescription = fieldSetFlags()[6] ? this.preferencePropertyDescription : (CharSequence) defaultValue(fields()[6]);
        record.preferencePropertyOptionDescription = fieldSetFlags()[7] ? this.preferencePropertyOptionDescription : (CharSequence) defaultValue(fields()[7]);
        record.preferencePropertyOptionValue = fieldSetFlags()[8] ? this.preferencePropertyOptionValue : (CharSequence) defaultValue(fields()[8]);
        record.lastUpdateDateTime = fieldSetFlags()[9] ? this.lastUpdateDateTime : (Long) defaultValue(fields()[9]);
        record.lastUpdateUser = fieldSetFlags()[10] ? this.lastUpdateUser : (CharSequence) defaultValue(fields()[10]);
        record.preferenceCategoryDescription = fieldSetFlags()[11] ? this.preferenceCategoryDescription : (CharSequence) defaultValue(fields()[11]);
        record.isDefaultSelection = fieldSetFlags()[12] ? this.isDefaultSelection : (CharSequence) defaultValue(fields()[12]);
        record.preferenceSelectionTerminationDate = fieldSetFlags()[13] ? this.preferenceSelectionTerminationDate : (org.joda.time.LocalDate) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<preferenceSelection>
    WRITER$ = (org.apache.avro.io.DatumWriter<preferenceSelection>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<preferenceSelection>
    READER$ = (org.apache.avro.io.DatumReader<preferenceSelection>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
